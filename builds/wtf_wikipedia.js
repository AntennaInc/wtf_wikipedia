/* wtf_wikipedia v2.6.3
   github.com/spencermountain/wtf_wikipedia
   MIT
*/

(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.wtf = f()}})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(_dereq_,module,exports){

/**
 * Expose `Emitter`.
 */

if (typeof module !== 'undefined') {
  module.exports = Emitter;
}

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on =
Emitter.prototype.addEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  function on() {
    this.off(event, on);
    fn.apply(this, arguments);
  }

  on.fn = fn;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners =
Emitter.prototype.removeEventListener = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks['$' + event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks['$' + event];
    return this;
  }

  // remove specific handler
  var cb;
  for (var i = 0; i < callbacks.length; i++) {
    cb = callbacks[i];
    if (cb === fn || cb.fn === fn) {
      callbacks.splice(i, 1);
      break;
    }
  }
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks['$' + event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks['$' + event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

},{}],2:[function(_dereq_,module,exports){
(function (global){
/**
 * jshashes - https://github.com/h2non/jshashes
 * Released under the "New BSD" license
 *
 * Algorithms specification:
 *
 * MD5 - http://www.ietf.org/rfc/rfc1321.txt
 * RIPEMD-160 - http://homes.esat.kuleuven.be/~bosselae/ripemd160.html
 * SHA1   - http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
 * SHA256 - http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
 * SHA512 - http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
 * HMAC - http://www.ietf.org/rfc/rfc2104.txt
 */
(function() {
  var Hashes;

  function utf8Encode(str) {
    var x, y, output = '',
      i = -1,
      l;

    if (str && str.length) {
      l = str.length;
      while ((i += 1) < l) {
        /* Decode utf-16 surrogate pairs */
        x = str.charCodeAt(i);
        y = i + 1 < l ? str.charCodeAt(i + 1) : 0;
        if (0xD800 <= x && x <= 0xDBFF && 0xDC00 <= y && y <= 0xDFFF) {
          x = 0x10000 + ((x & 0x03FF) << 10) + (y & 0x03FF);
          i += 1;
        }
        /* Encode output as utf-8 */
        if (x <= 0x7F) {
          output += String.fromCharCode(x);
        } else if (x <= 0x7FF) {
          output += String.fromCharCode(0xC0 | ((x >>> 6) & 0x1F),
            0x80 | (x & 0x3F));
        } else if (x <= 0xFFFF) {
          output += String.fromCharCode(0xE0 | ((x >>> 12) & 0x0F),
            0x80 | ((x >>> 6) & 0x3F),
            0x80 | (x & 0x3F));
        } else if (x <= 0x1FFFFF) {
          output += String.fromCharCode(0xF0 | ((x >>> 18) & 0x07),
            0x80 | ((x >>> 12) & 0x3F),
            0x80 | ((x >>> 6) & 0x3F),
            0x80 | (x & 0x3F));
        }
      }
    }
    return output;
  }

  function utf8Decode(str) {
    var i, ac, c1, c2, c3, arr = [],
      l;
    i = ac = c1 = c2 = c3 = 0;

    if (str && str.length) {
      l = str.length;
      str += '';

      while (i < l) {
        c1 = str.charCodeAt(i);
        ac += 1;
        if (c1 < 128) {
          arr[ac] = String.fromCharCode(c1);
          i += 1;
        } else if (c1 > 191 && c1 < 224) {
          c2 = str.charCodeAt(i + 1);
          arr[ac] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
          i += 2;
        } else {
          c2 = str.charCodeAt(i + 1);
          c3 = str.charCodeAt(i + 2);
          arr[ac] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
          i += 3;
        }
      }
    }
    return arr.join('');
  }

  /**
   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
   * to work around bugs in some JS interpreters.
   */

  function safe_add(x, y) {
    var lsw = (x & 0xFFFF) + (y & 0xFFFF),
      msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xFFFF);
  }

  /**
   * Bitwise rotate a 32-bit number to the left.
   */

  function bit_rol(num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt));
  }

  /**
   * Convert a raw string to a hex string
   */

  function rstr2hex(input, hexcase) {
    var hex_tab = hexcase ? '0123456789ABCDEF' : '0123456789abcdef',
      output = '',
      x, i = 0,
      l = input.length;
    for (; i < l; i += 1) {
      x = input.charCodeAt(i);
      output += hex_tab.charAt((x >>> 4) & 0x0F) + hex_tab.charAt(x & 0x0F);
    }
    return output;
  }

  /**
   * Encode a string as utf-16
   */

  function str2rstr_utf16le(input) {
    var i, l = input.length,
      output = '';
    for (i = 0; i < l; i += 1) {
      output += String.fromCharCode(input.charCodeAt(i) & 0xFF, (input.charCodeAt(i) >>> 8) & 0xFF);
    }
    return output;
  }

  function str2rstr_utf16be(input) {
    var i, l = input.length,
      output = '';
    for (i = 0; i < l; i += 1) {
      output += String.fromCharCode((input.charCodeAt(i) >>> 8) & 0xFF, input.charCodeAt(i) & 0xFF);
    }
    return output;
  }

  /**
   * Convert an array of big-endian words to a string
   */

  function binb2rstr(input) {
    var i, l = input.length * 32,
      output = '';
    for (i = 0; i < l; i += 8) {
      output += String.fromCharCode((input[i >> 5] >>> (24 - i % 32)) & 0xFF);
    }
    return output;
  }

  /**
   * Convert an array of little-endian words to a string
   */

  function binl2rstr(input) {
    var i, l = input.length * 32,
      output = '';
    for (i = 0; i < l; i += 8) {
      output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
    }
    return output;
  }

  /**
   * Convert a raw string to an array of little-endian words
   * Characters >255 have their high-byte silently ignored.
   */

  function rstr2binl(input) {
    var i, l = input.length * 8,
      output = Array(input.length >> 2),
      lo = output.length;
    for (i = 0; i < lo; i += 1) {
      output[i] = 0;
    }
    for (i = 0; i < l; i += 8) {
      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32);
    }
    return output;
  }

  /**
   * Convert a raw string to an array of big-endian words
   * Characters >255 have their high-byte silently ignored.
   */

  function rstr2binb(input) {
    var i, l = input.length * 8,
      output = Array(input.length >> 2),
      lo = output.length;
    for (i = 0; i < lo; i += 1) {
      output[i] = 0;
    }
    for (i = 0; i < l; i += 8) {
      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (24 - i % 32);
    }
    return output;
  }

  /**
   * Convert a raw string to an arbitrary string encoding
   */

  function rstr2any(input, encoding) {
    var divisor = encoding.length,
      remainders = Array(),
      i, q, x, ld, quotient, dividend, output, full_length;

    /* Convert to an array of 16-bit big-endian values, forming the dividend */
    dividend = Array(Math.ceil(input.length / 2));
    ld = dividend.length;
    for (i = 0; i < ld; i += 1) {
      dividend[i] = (input.charCodeAt(i * 2) << 8) | input.charCodeAt(i * 2 + 1);
    }

    /**
     * Repeatedly perform a long division. The binary array forms the dividend,
     * the length of the encoding is the divisor. Once computed, the quotient
     * forms the dividend for the next step. We stop when the dividend is zerHashes.
     * All remainders are stored for later use.
     */
    while (dividend.length > 0) {
      quotient = Array();
      x = 0;
      for (i = 0; i < dividend.length; i += 1) {
        x = (x << 16) + dividend[i];
        q = Math.floor(x / divisor);
        x -= q * divisor;
        if (quotient.length > 0 || q > 0) {
          quotient[quotient.length] = q;
        }
      }
      remainders[remainders.length] = x;
      dividend = quotient;
    }

    /* Convert the remainders to the output string */
    output = '';
    for (i = remainders.length - 1; i >= 0; i--) {
      output += encoding.charAt(remainders[i]);
    }

    /* Append leading zero equivalents */
    full_length = Math.ceil(input.length * 8 / (Math.log(encoding.length) / Math.log(2)));
    for (i = output.length; i < full_length; i += 1) {
      output = encoding[0] + output;
    }
    return output;
  }

  /**
   * Convert a raw string to a base-64 string
   */

  function rstr2b64(input, b64pad) {
    var tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
      output = '',
      len = input.length,
      i, j, triplet;
    b64pad = b64pad || '=';
    for (i = 0; i < len; i += 3) {
      triplet = (input.charCodeAt(i) << 16) | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);
      for (j = 0; j < 4; j += 1) {
        if (i * 8 + j * 6 > input.length * 8) {
          output += b64pad;
        } else {
          output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);
        }
      }
    }
    return output;
  }

  Hashes = {
    /**
     * @property {String} version
     * @readonly
     */
    VERSION: '1.0.6',
    /**
     * @member Hashes
     * @class Base64
     * @constructor
     */
    Base64: function() {
      // private properties
      var tab = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
        pad = '=', // default pad according with the RFC standard
        url = false, // URL encoding support @todo
        utf8 = true; // by default enable UTF-8 support encoding

      // public method for encoding
      this.encode = function(input) {
        var i, j, triplet,
          output = '',
          len = input.length;

        pad = pad || '=';
        input = (utf8) ? utf8Encode(input) : input;

        for (i = 0; i < len; i += 3) {
          triplet = (input.charCodeAt(i) << 16) | (i + 1 < len ? input.charCodeAt(i + 1) << 8 : 0) | (i + 2 < len ? input.charCodeAt(i + 2) : 0);
          for (j = 0; j < 4; j += 1) {
            if (i * 8 + j * 6 > len * 8) {
              output += pad;
            } else {
              output += tab.charAt((triplet >>> 6 * (3 - j)) & 0x3F);
            }
          }
        }
        return output;
      };

      // public method for decoding
      this.decode = function(input) {
        // var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        var i, o1, o2, o3, h1, h2, h3, h4, bits, ac,
          dec = '',
          arr = [];
        if (!input) {
          return input;
        }

        i = ac = 0;
        input = input.replace(new RegExp('\\' + pad, 'gi'), ''); // use '='
        //input += '';

        do { // unpack four hexets into three octets using index points in b64
          h1 = tab.indexOf(input.charAt(i += 1));
          h2 = tab.indexOf(input.charAt(i += 1));
          h3 = tab.indexOf(input.charAt(i += 1));
          h4 = tab.indexOf(input.charAt(i += 1));

          bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;

          o1 = bits >> 16 & 0xff;
          o2 = bits >> 8 & 0xff;
          o3 = bits & 0xff;
          ac += 1;

          if (h3 === 64) {
            arr[ac] = String.fromCharCode(o1);
          } else if (h4 === 64) {
            arr[ac] = String.fromCharCode(o1, o2);
          } else {
            arr[ac] = String.fromCharCode(o1, o2, o3);
          }
        } while (i < input.length);

        dec = arr.join('');
        dec = (utf8) ? utf8Decode(dec) : dec;

        return dec;
      };

      // set custom pad string
      this.setPad = function(str) {
        pad = str || pad;
        return this;
      };
      // set custom tab string characters
      this.setTab = function(str) {
        tab = str || tab;
        return this;
      };
      this.setUTF8 = function(bool) {
        if (typeof bool === 'boolean') {
          utf8 = bool;
        }
        return this;
      };
    },

    /**
     * CRC-32 calculation
     * @member Hashes
     * @method CRC32
     * @static
     * @param {String} str Input String
     * @return {String}
     */
    CRC32: function(str) {
      var crc = 0,
        x = 0,
        y = 0,
        table, i, iTop;
      str = utf8Encode(str);

      table = [
        '00000000 77073096 EE0E612C 990951BA 076DC419 706AF48F E963A535 9E6495A3 0EDB8832 ',
        '79DCB8A4 E0D5E91E 97D2D988 09B64C2B 7EB17CBD E7B82D07 90BF1D91 1DB71064 6AB020F2 F3B97148 ',
        '84BE41DE 1ADAD47D 6DDDE4EB F4D4B551 83D385C7 136C9856 646BA8C0 FD62F97A 8A65C9EC 14015C4F ',
        '63066CD9 FA0F3D63 8D080DF5 3B6E20C8 4C69105E D56041E4 A2677172 3C03E4D1 4B04D447 D20D85FD ',
        'A50AB56B 35B5A8FA 42B2986C DBBBC9D6 ACBCF940 32D86CE3 45DF5C75 DCD60DCF ABD13D59 26D930AC ',
        '51DE003A C8D75180 BFD06116 21B4F4B5 56B3C423 CFBA9599 B8BDA50F 2802B89E 5F058808 C60CD9B2 ',
        'B10BE924 2F6F7C87 58684C11 C1611DAB B6662D3D 76DC4190 01DB7106 98D220BC EFD5102A 71B18589 ',
        '06B6B51F 9FBFE4A5 E8B8D433 7807C9A2 0F00F934 9609A88E E10E9818 7F6A0DBB 086D3D2D 91646C97 ',
        'E6635C01 6B6B51F4 1C6C6162 856530D8 F262004E 6C0695ED 1B01A57B 8208F4C1 F50FC457 65B0D9C6 ',
        '12B7E950 8BBEB8EA FCB9887C 62DD1DDF 15DA2D49 8CD37CF3 FBD44C65 4DB26158 3AB551CE A3BC0074 ',
        'D4BB30E2 4ADFA541 3DD895D7 A4D1C46D D3D6F4FB 4369E96A 346ED9FC AD678846 DA60B8D0 44042D73 ',
        '33031DE5 AA0A4C5F DD0D7CC9 5005713C 270241AA BE0B1010 C90C2086 5768B525 206F85B3 B966D409 ',
        'CE61E49F 5EDEF90E 29D9C998 B0D09822 C7D7A8B4 59B33D17 2EB40D81 B7BD5C3B C0BA6CAD EDB88320 ',
        '9ABFB3B6 03B6E20C 74B1D29A EAD54739 9DD277AF 04DB2615 73DC1683 E3630B12 94643B84 0D6D6A3E ',
        '7A6A5AA8 E40ECF0B 9309FF9D 0A00AE27 7D079EB1 F00F9344 8708A3D2 1E01F268 6906C2FE F762575D ',
        '806567CB 196C3671 6E6B06E7 FED41B76 89D32BE0 10DA7A5A 67DD4ACC F9B9DF6F 8EBEEFF9 17B7BE43 ',
        '60B08ED5 D6D6A3E8 A1D1937E 38D8C2C4 4FDFF252 D1BB67F1 A6BC5767 3FB506DD 48B2364B D80D2BDA ',
        'AF0A1B4C 36034AF6 41047A60 DF60EFC3 A867DF55 316E8EEF 4669BE79 CB61B38C BC66831A 256FD2A0 ',
        '5268E236 CC0C7795 BB0B4703 220216B9 5505262F C5BA3BBE B2BD0B28 2BB45A92 5CB36A04 C2D7FFA7 ',
        'B5D0CF31 2CD99E8B 5BDEAE1D 9B64C2B0 EC63F226 756AA39C 026D930A 9C0906A9 EB0E363F 72076785 ',
        '05005713 95BF4A82 E2B87A14 7BB12BAE 0CB61B38 92D28E9B E5D5BE0D 7CDCEFB7 0BDBDF21 86D3D2D4 ',
        'F1D4E242 68DDB3F8 1FDA836E 81BE16CD F6B9265B 6FB077E1 18B74777 88085AE6 FF0F6A70 66063BCA ',
        '11010B5C 8F659EFF F862AE69 616BFFD3 166CCF45 A00AE278 D70DD2EE 4E048354 3903B3C2 A7672661 ',
        'D06016F7 4969474D 3E6E77DB AED16A4A D9D65ADC 40DF0B66 37D83BF0 A9BCAE53 DEBB9EC5 47B2CF7F ',
        '30B5FFE9 BDBDF21C CABAC28A 53B39330 24B4A3A6 BAD03605 CDD70693 54DE5729 23D967BF B3667A2E ',
        'C4614AB8 5D681B02 2A6F2B94 B40BBE37 C30C8EA1 5A05DF1B 2D02EF8D'
      ].join('');

      crc = crc ^ (-1);
      for (i = 0, iTop = str.length; i < iTop; i += 1) {
        y = (crc ^ str.charCodeAt(i)) & 0xFF;
        x = '0x' + table.substr(y * 9, 8);
        crc = (crc >>> 8) ^ x;
      }
      // always return a positive number (that's what >>> 0 does)
      return (crc ^ (-1)) >>> 0;
    },
    /**
     * @member Hashes
     * @class MD5
     * @constructor
     * @param {Object} [config]
     *
     * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
     * Digest Algorithm, as defined in RFC 1321.
     * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * See <http://pajhome.org.uk/crypt/md5> for more infHashes.
     */
    MD5: function(options) {
      /**
       * Private config properties. You may need to tweak these to be compatible with
       * the server-side, but the defaults work in most cases.
       * See {@link Hashes.MD5#method-setUpperCase} and {@link Hashes.SHA1#method-setUpperCase}
       */
      var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false, // hexadecimal output case format. false - lowercase; true - uppercase
        b64pad = (options && typeof options.pad === 'string') ? options.pad : '=', // base-64 pad character. Defaults to '=' for strict RFC compliance
        utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true; // enable/disable utf8 encoding

      // privileged (public) methods
      this.hex = function(s) {
        return rstr2hex(rstr(s, utf8), hexcase);
      };
      this.b64 = function(s) {
        return rstr2b64(rstr(s), b64pad);
      };
      this.any = function(s, e) {
        return rstr2any(rstr(s, utf8), e);
      };
      this.raw = function(s) {
        return rstr(s, utf8);
      };
      this.hex_hmac = function(k, d) {
        return rstr2hex(rstr_hmac(k, d), hexcase);
      };
      this.b64_hmac = function(k, d) {
        return rstr2b64(rstr_hmac(k, d), b64pad);
      };
      this.any_hmac = function(k, d, e) {
        return rstr2any(rstr_hmac(k, d), e);
      };
      /**
       * Perform a simple self-test to see if the VM is working
       * @return {String} Hexadecimal hash sample
       */
      this.vm_test = function() {
        return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
      };
      /**
       * Enable/disable uppercase hexadecimal returned string
       * @param {Boolean}
       * @return {Object} this
       */
      this.setUpperCase = function(a) {
        if (typeof a === 'boolean') {
          hexcase = a;
        }
        return this;
      };
      /**
       * Defines a base64 pad string
       * @param {String} Pad
       * @return {Object} this
       */
      this.setPad = function(a) {
        b64pad = a || b64pad;
        return this;
      };
      /**
       * Defines a base64 pad string
       * @param {Boolean}
       * @return {Object} [this]
       */
      this.setUTF8 = function(a) {
        if (typeof a === 'boolean') {
          utf8 = a;
        }
        return this;
      };

      // private methods

      /**
       * Calculate the MD5 of a raw string
       */

      function rstr(s) {
        s = (utf8) ? utf8Encode(s) : s;
        return binl2rstr(binl(rstr2binl(s), s.length * 8));
      }

      /**
       * Calculate the HMAC-MD5, of a key and some data (raw strings)
       */

      function rstr_hmac(key, data) {
        var bkey, ipad, opad, hash, i;

        key = (utf8) ? utf8Encode(key) : key;
        data = (utf8) ? utf8Encode(data) : data;
        bkey = rstr2binl(key);
        if (bkey.length > 16) {
          bkey = binl(bkey, key.length * 8);
        }

        ipad = Array(16), opad = Array(16);
        for (i = 0; i < 16; i += 1) {
          ipad[i] = bkey[i] ^ 0x36363636;
          opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }
        hash = binl(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
        return binl2rstr(binl(opad.concat(hash), 512 + 128));
      }

      /**
       * Calculate the MD5 of an array of little-endian words, and a bit length.
       */

      function binl(x, len) {
        var i, olda, oldb, oldc, oldd,
          a = 1732584193,
          b = -271733879,
          c = -1732584194,
          d = 271733878;

        /* append padding */
        x[len >> 5] |= 0x80 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;

        for (i = 0; i < x.length; i += 16) {
          olda = a;
          oldb = b;
          oldc = c;
          oldd = d;

          a = md5_ff(a, b, c, d, x[i + 0], 7, -680876936);
          d = md5_ff(d, a, b, c, x[i + 1], 12, -389564586);
          c = md5_ff(c, d, a, b, x[i + 2], 17, 606105819);
          b = md5_ff(b, c, d, a, x[i + 3], 22, -1044525330);
          a = md5_ff(a, b, c, d, x[i + 4], 7, -176418897);
          d = md5_ff(d, a, b, c, x[i + 5], 12, 1200080426);
          c = md5_ff(c, d, a, b, x[i + 6], 17, -1473231341);
          b = md5_ff(b, c, d, a, x[i + 7], 22, -45705983);
          a = md5_ff(a, b, c, d, x[i + 8], 7, 1770035416);
          d = md5_ff(d, a, b, c, x[i + 9], 12, -1958414417);
          c = md5_ff(c, d, a, b, x[i + 10], 17, -42063);
          b = md5_ff(b, c, d, a, x[i + 11], 22, -1990404162);
          a = md5_ff(a, b, c, d, x[i + 12], 7, 1804603682);
          d = md5_ff(d, a, b, c, x[i + 13], 12, -40341101);
          c = md5_ff(c, d, a, b, x[i + 14], 17, -1502002290);
          b = md5_ff(b, c, d, a, x[i + 15], 22, 1236535329);

          a = md5_gg(a, b, c, d, x[i + 1], 5, -165796510);
          d = md5_gg(d, a, b, c, x[i + 6], 9, -1069501632);
          c = md5_gg(c, d, a, b, x[i + 11], 14, 643717713);
          b = md5_gg(b, c, d, a, x[i + 0], 20, -373897302);
          a = md5_gg(a, b, c, d, x[i + 5], 5, -701558691);
          d = md5_gg(d, a, b, c, x[i + 10], 9, 38016083);
          c = md5_gg(c, d, a, b, x[i + 15], 14, -660478335);
          b = md5_gg(b, c, d, a, x[i + 4], 20, -405537848);
          a = md5_gg(a, b, c, d, x[i + 9], 5, 568446438);
          d = md5_gg(d, a, b, c, x[i + 14], 9, -1019803690);
          c = md5_gg(c, d, a, b, x[i + 3], 14, -187363961);
          b = md5_gg(b, c, d, a, x[i + 8], 20, 1163531501);
          a = md5_gg(a, b, c, d, x[i + 13], 5, -1444681467);
          d = md5_gg(d, a, b, c, x[i + 2], 9, -51403784);
          c = md5_gg(c, d, a, b, x[i + 7], 14, 1735328473);
          b = md5_gg(b, c, d, a, x[i + 12], 20, -1926607734);

          a = md5_hh(a, b, c, d, x[i + 5], 4, -378558);
          d = md5_hh(d, a, b, c, x[i + 8], 11, -2022574463);
          c = md5_hh(c, d, a, b, x[i + 11], 16, 1839030562);
          b = md5_hh(b, c, d, a, x[i + 14], 23, -35309556);
          a = md5_hh(a, b, c, d, x[i + 1], 4, -1530992060);
          d = md5_hh(d, a, b, c, x[i + 4], 11, 1272893353);
          c = md5_hh(c, d, a, b, x[i + 7], 16, -155497632);
          b = md5_hh(b, c, d, a, x[i + 10], 23, -1094730640);
          a = md5_hh(a, b, c, d, x[i + 13], 4, 681279174);
          d = md5_hh(d, a, b, c, x[i + 0], 11, -358537222);
          c = md5_hh(c, d, a, b, x[i + 3], 16, -722521979);
          b = md5_hh(b, c, d, a, x[i + 6], 23, 76029189);
          a = md5_hh(a, b, c, d, x[i + 9], 4, -640364487);
          d = md5_hh(d, a, b, c, x[i + 12], 11, -421815835);
          c = md5_hh(c, d, a, b, x[i + 15], 16, 530742520);
          b = md5_hh(b, c, d, a, x[i + 2], 23, -995338651);

          a = md5_ii(a, b, c, d, x[i + 0], 6, -198630844);
          d = md5_ii(d, a, b, c, x[i + 7], 10, 1126891415);
          c = md5_ii(c, d, a, b, x[i + 14], 15, -1416354905);
          b = md5_ii(b, c, d, a, x[i + 5], 21, -57434055);
          a = md5_ii(a, b, c, d, x[i + 12], 6, 1700485571);
          d = md5_ii(d, a, b, c, x[i + 3], 10, -1894986606);
          c = md5_ii(c, d, a, b, x[i + 10], 15, -1051523);
          b = md5_ii(b, c, d, a, x[i + 1], 21, -2054922799);
          a = md5_ii(a, b, c, d, x[i + 8], 6, 1873313359);
          d = md5_ii(d, a, b, c, x[i + 15], 10, -30611744);
          c = md5_ii(c, d, a, b, x[i + 6], 15, -1560198380);
          b = md5_ii(b, c, d, a, x[i + 13], 21, 1309151649);
          a = md5_ii(a, b, c, d, x[i + 4], 6, -145523070);
          d = md5_ii(d, a, b, c, x[i + 11], 10, -1120210379);
          c = md5_ii(c, d, a, b, x[i + 2], 15, 718787259);
          b = md5_ii(b, c, d, a, x[i + 9], 21, -343485551);

          a = safe_add(a, olda);
          b = safe_add(b, oldb);
          c = safe_add(c, oldc);
          d = safe_add(d, oldd);
        }
        return Array(a, b, c, d);
      }

      /**
       * These functions implement the four basic operations the algorithm uses.
       */

      function md5_cmn(q, a, b, x, s, t) {
        return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s), b);
      }

      function md5_ff(a, b, c, d, x, s, t) {
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
      }

      function md5_gg(a, b, c, d, x, s, t) {
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
      }

      function md5_hh(a, b, c, d, x, s, t) {
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
      }

      function md5_ii(a, b, c, d, x, s, t) {
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
      }
    },
    /**
     * @member Hashes
     * @class Hashes.SHA1
     * @param {Object} [config]
     * @constructor
     *
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined in FIPS 180-1
     * Version 2.2 Copyright Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * See http://pajhome.org.uk/crypt/md5 for details.
     */
    SHA1: function(options) {
      /**
       * Private config properties. You may need to tweak these to be compatible with
       * the server-side, but the defaults work in most cases.
       * See {@link Hashes.MD5#method-setUpperCase} and {@link Hashes.SHA1#method-setUpperCase}
       */
      var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false, // hexadecimal output case format. false - lowercase; true - uppercase
        b64pad = (options && typeof options.pad === 'string') ? options.pad : '=', // base-64 pad character. Defaults to '=' for strict RFC compliance
        utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true; // enable/disable utf8 encoding

      // public methods
      this.hex = function(s) {
        return rstr2hex(rstr(s, utf8), hexcase);
      };
      this.b64 = function(s) {
        return rstr2b64(rstr(s, utf8), b64pad);
      };
      this.any = function(s, e) {
        return rstr2any(rstr(s, utf8), e);
      };
      this.raw = function(s) {
        return rstr(s, utf8);
      };
      this.hex_hmac = function(k, d) {
        return rstr2hex(rstr_hmac(k, d));
      };
      this.b64_hmac = function(k, d) {
        return rstr2b64(rstr_hmac(k, d), b64pad);
      };
      this.any_hmac = function(k, d, e) {
        return rstr2any(rstr_hmac(k, d), e);
      };
      /**
       * Perform a simple self-test to see if the VM is working
       * @return {String} Hexadecimal hash sample
       * @public
       */
      this.vm_test = function() {
        return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
      };
      /**
       * @description Enable/disable uppercase hexadecimal returned string
       * @param {boolean}
       * @return {Object} this
       * @public
       */
      this.setUpperCase = function(a) {
        if (typeof a === 'boolean') {
          hexcase = a;
        }
        return this;
      };
      /**
       * @description Defines a base64 pad string
       * @param {string} Pad
       * @return {Object} this
       * @public
       */
      this.setPad = function(a) {
        b64pad = a || b64pad;
        return this;
      };
      /**
       * @description Defines a base64 pad string
       * @param {boolean}
       * @return {Object} this
       * @public
       */
      this.setUTF8 = function(a) {
        if (typeof a === 'boolean') {
          utf8 = a;
        }
        return this;
      };

      // private methods

      /**
       * Calculate the SHA-512 of a raw string
       */

      function rstr(s) {
        s = (utf8) ? utf8Encode(s) : s;
        return binb2rstr(binb(rstr2binb(s), s.length * 8));
      }

      /**
       * Calculate the HMAC-SHA1 of a key and some data (raw strings)
       */

      function rstr_hmac(key, data) {
        var bkey, ipad, opad, i, hash;
        key = (utf8) ? utf8Encode(key) : key;
        data = (utf8) ? utf8Encode(data) : data;
        bkey = rstr2binb(key);

        if (bkey.length > 16) {
          bkey = binb(bkey, key.length * 8);
        }
        ipad = Array(16), opad = Array(16);
        for (i = 0; i < 16; i += 1) {
          ipad[i] = bkey[i] ^ 0x36363636;
          opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }
        hash = binb(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
        return binb2rstr(binb(opad.concat(hash), 512 + 160));
      }

      /**
       * Calculate the SHA-1 of an array of big-endian words, and a bit length
       */

      function binb(x, len) {
        var i, j, t, olda, oldb, oldc, oldd, olde,
          w = Array(80),
          a = 1732584193,
          b = -271733879,
          c = -1732584194,
          d = 271733878,
          e = -1009589776;

        /* append padding */
        x[len >> 5] |= 0x80 << (24 - len % 32);
        x[((len + 64 >> 9) << 4) + 15] = len;

        for (i = 0; i < x.length; i += 16) {
          olda = a;
          oldb = b;
          oldc = c;
          oldd = d;
          olde = e;

          for (j = 0; j < 80; j += 1) {
            if (j < 16) {
              w[j] = x[i + j];
            } else {
              w[j] = bit_rol(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
            }
            t = safe_add(safe_add(bit_rol(a, 5), sha1_ft(j, b, c, d)),
              safe_add(safe_add(e, w[j]), sha1_kt(j)));
            e = d;
            d = c;
            c = bit_rol(b, 30);
            b = a;
            a = t;
          }

          a = safe_add(a, olda);
          b = safe_add(b, oldb);
          c = safe_add(c, oldc);
          d = safe_add(d, oldd);
          e = safe_add(e, olde);
        }
        return Array(a, b, c, d, e);
      }

      /**
       * Perform the appropriate triplet combination function for the current
       * iteration
       */

      function sha1_ft(t, b, c, d) {
        if (t < 20) {
          return (b & c) | ((~b) & d);
        }
        if (t < 40) {
          return b ^ c ^ d;
        }
        if (t < 60) {
          return (b & c) | (b & d) | (c & d);
        }
        return b ^ c ^ d;
      }

      /**
       * Determine the appropriate additive constant for the current iteration
       */

      function sha1_kt(t) {
        return (t < 20) ? 1518500249 : (t < 40) ? 1859775393 :
          (t < 60) ? -1894007588 : -899497514;
      }
    },
    /**
     * @class Hashes.SHA256
     * @param {config}
     *
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined in FIPS 180-2
     * Version 2.2 Copyright Angel Marin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * See http://pajhome.org.uk/crypt/md5 for details.
     * Also http://anmar.eu.org/projects/jssha2/
     */
    SHA256: function(options) {
      /**
       * Private properties configuration variables. You may need to tweak these to be compatible with
       * the server-side, but the defaults work in most cases.
       * @see this.setUpperCase() method
       * @see this.setPad() method
       */
      var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false, // hexadecimal output case format. false - lowercase; true - uppercase  */
        b64pad = (options && typeof options.pad === 'string') ? options.pad : '=',
        /* base-64 pad character. Default '=' for strict RFC compliance   */
        utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true,
        /* enable/disable utf8 encoding */
        sha256_K;

      /* privileged (public) methods */
      this.hex = function(s) {
        return rstr2hex(rstr(s, utf8));
      };
      this.b64 = function(s) {
        return rstr2b64(rstr(s, utf8), b64pad);
      };
      this.any = function(s, e) {
        return rstr2any(rstr(s, utf8), e);
      };
      this.raw = function(s) {
        return rstr(s, utf8);
      };
      this.hex_hmac = function(k, d) {
        return rstr2hex(rstr_hmac(k, d));
      };
      this.b64_hmac = function(k, d) {
        return rstr2b64(rstr_hmac(k, d), b64pad);
      };
      this.any_hmac = function(k, d, e) {
        return rstr2any(rstr_hmac(k, d), e);
      };
      /**
       * Perform a simple self-test to see if the VM is working
       * @return {String} Hexadecimal hash sample
       * @public
       */
      this.vm_test = function() {
        return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
      };
      /**
       * Enable/disable uppercase hexadecimal returned string
       * @param {boolean}
       * @return {Object} this
       * @public
       */
      this.setUpperCase = function(a) {
        if (typeof a === 'boolean') {
          hexcase = a;
        }
        return this;
      };
      /**
       * @description Defines a base64 pad string
       * @param {string} Pad
       * @return {Object} this
       * @public
       */
      this.setPad = function(a) {
        b64pad = a || b64pad;
        return this;
      };
      /**
       * Defines a base64 pad string
       * @param {boolean}
       * @return {Object} this
       * @public
       */
      this.setUTF8 = function(a) {
        if (typeof a === 'boolean') {
          utf8 = a;
        }
        return this;
      };

      // private methods

      /**
       * Calculate the SHA-512 of a raw string
       */

      function rstr(s, utf8) {
        s = (utf8) ? utf8Encode(s) : s;
        return binb2rstr(binb(rstr2binb(s), s.length * 8));
      }

      /**
       * Calculate the HMAC-sha256 of a key and some data (raw strings)
       */

      function rstr_hmac(key, data) {
        key = (utf8) ? utf8Encode(key) : key;
        data = (utf8) ? utf8Encode(data) : data;
        var hash, i = 0,
          bkey = rstr2binb(key),
          ipad = Array(16),
          opad = Array(16);

        if (bkey.length > 16) {
          bkey = binb(bkey, key.length * 8);
        }

        for (; i < 16; i += 1) {
          ipad[i] = bkey[i] ^ 0x36363636;
          opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }

        hash = binb(ipad.concat(rstr2binb(data)), 512 + data.length * 8);
        return binb2rstr(binb(opad.concat(hash), 512 + 256));
      }

      /*
       * Main sha256 function, with its support functions
       */

      function sha256_S(X, n) {
        return (X >>> n) | (X << (32 - n));
      }

      function sha256_R(X, n) {
        return (X >>> n);
      }

      function sha256_Ch(x, y, z) {
        return ((x & y) ^ ((~x) & z));
      }

      function sha256_Maj(x, y, z) {
        return ((x & y) ^ (x & z) ^ (y & z));
      }

      function sha256_Sigma0256(x) {
        return (sha256_S(x, 2) ^ sha256_S(x, 13) ^ sha256_S(x, 22));
      }

      function sha256_Sigma1256(x) {
        return (sha256_S(x, 6) ^ sha256_S(x, 11) ^ sha256_S(x, 25));
      }

      function sha256_Gamma0256(x) {
        return (sha256_S(x, 7) ^ sha256_S(x, 18) ^ sha256_R(x, 3));
      }

      function sha256_Gamma1256(x) {
        return (sha256_S(x, 17) ^ sha256_S(x, 19) ^ sha256_R(x, 10));
      }

      function sha256_Sigma0512(x) {
        return (sha256_S(x, 28) ^ sha256_S(x, 34) ^ sha256_S(x, 39));
      }

      function sha256_Sigma1512(x) {
        return (sha256_S(x, 14) ^ sha256_S(x, 18) ^ sha256_S(x, 41));
      }

      function sha256_Gamma0512(x) {
        return (sha256_S(x, 1) ^ sha256_S(x, 8) ^ sha256_R(x, 7));
      }

      function sha256_Gamma1512(x) {
        return (sha256_S(x, 19) ^ sha256_S(x, 61) ^ sha256_R(x, 6));
      }

      sha256_K = [
        1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993, -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987,
        1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522,
        264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585,
        113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291,
        1695183700, 1986661051, -2117940946, -1838011259, -1564481375, -1474664885, -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344,
        430227734, 506948616, 659060556, 883997877, 958139571, 1322822218,
        1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872, -1866530822, -1538233109, -1090935817, -965641998
      ];

      function binb(m, l) {
        var HASH = [1779033703, -1150833019, 1013904242, -1521486534,
          1359893119, -1694144372, 528734635, 1541459225
        ];
        var W = new Array(64);
        var a, b, c, d, e, f, g, h;
        var i, j, T1, T2;

        /* append padding */
        m[l >> 5] |= 0x80 << (24 - l % 32);
        m[((l + 64 >> 9) << 4) + 15] = l;

        for (i = 0; i < m.length; i += 16) {
          a = HASH[0];
          b = HASH[1];
          c = HASH[2];
          d = HASH[3];
          e = HASH[4];
          f = HASH[5];
          g = HASH[6];
          h = HASH[7];

          for (j = 0; j < 64; j += 1) {
            if (j < 16) {
              W[j] = m[j + i];
            } else {
              W[j] = safe_add(safe_add(safe_add(sha256_Gamma1256(W[j - 2]), W[j - 7]),
                sha256_Gamma0256(W[j - 15])), W[j - 16]);
            }

            T1 = safe_add(safe_add(safe_add(safe_add(h, sha256_Sigma1256(e)), sha256_Ch(e, f, g)),
              sha256_K[j]), W[j]);
            T2 = safe_add(sha256_Sigma0256(a), sha256_Maj(a, b, c));
            h = g;
            g = f;
            f = e;
            e = safe_add(d, T1);
            d = c;
            c = b;
            b = a;
            a = safe_add(T1, T2);
          }

          HASH[0] = safe_add(a, HASH[0]);
          HASH[1] = safe_add(b, HASH[1]);
          HASH[2] = safe_add(c, HASH[2]);
          HASH[3] = safe_add(d, HASH[3]);
          HASH[4] = safe_add(e, HASH[4]);
          HASH[5] = safe_add(f, HASH[5]);
          HASH[6] = safe_add(g, HASH[6]);
          HASH[7] = safe_add(h, HASH[7]);
        }
        return HASH;
      }

    },

    /**
     * @class Hashes.SHA512
     * @param {config}
     *
     * A JavaScript implementation of the Secure Hash Algorithm, SHA-512, as defined in FIPS 180-2
     * Version 2.2 Copyright Anonymous Contributor, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * See http://pajhome.org.uk/crypt/md5 for details.
     */
    SHA512: function(options) {
      /**
       * Private properties configuration variables. You may need to tweak these to be compatible with
       * the server-side, but the defaults work in most cases.
       * @see this.setUpperCase() method
       * @see this.setPad() method
       */
      var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false,
        /* hexadecimal output case format. false - lowercase; true - uppercase  */
        b64pad = (options && typeof options.pad === 'string') ? options.pad : '=',
        /* base-64 pad character. Default '=' for strict RFC compliance   */
        utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true,
        /* enable/disable utf8 encoding */
        sha512_k;

      /* privileged (public) methods */
      this.hex = function(s) {
        return rstr2hex(rstr(s));
      };
      this.b64 = function(s) {
        return rstr2b64(rstr(s), b64pad);
      };
      this.any = function(s, e) {
        return rstr2any(rstr(s), e);
      };
      this.raw = function(s) {
        return rstr(s, utf8);
      };
      this.hex_hmac = function(k, d) {
        return rstr2hex(rstr_hmac(k, d));
      };
      this.b64_hmac = function(k, d) {
        return rstr2b64(rstr_hmac(k, d), b64pad);
      };
      this.any_hmac = function(k, d, e) {
        return rstr2any(rstr_hmac(k, d), e);
      };
      /**
       * Perform a simple self-test to see if the VM is working
       * @return {String} Hexadecimal hash sample
       * @public
       */
      this.vm_test = function() {
        return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
      };
      /**
       * @description Enable/disable uppercase hexadecimal returned string
       * @param {boolean}
       * @return {Object} this
       * @public
       */
      this.setUpperCase = function(a) {
        if (typeof a === 'boolean') {
          hexcase = a;
        }
        return this;
      };
      /**
       * @description Defines a base64 pad string
       * @param {string} Pad
       * @return {Object} this
       * @public
       */
      this.setPad = function(a) {
        b64pad = a || b64pad;
        return this;
      };
      /**
       * @description Defines a base64 pad string
       * @param {boolean}
       * @return {Object} this
       * @public
       */
      this.setUTF8 = function(a) {
        if (typeof a === 'boolean') {
          utf8 = a;
        }
        return this;
      };

      /* private methods */

      /**
       * Calculate the SHA-512 of a raw string
       */

      function rstr(s) {
        s = (utf8) ? utf8Encode(s) : s;
        return binb2rstr(binb(rstr2binb(s), s.length * 8));
      }
      /*
       * Calculate the HMAC-SHA-512 of a key and some data (raw strings)
       */

      function rstr_hmac(key, data) {
        key = (utf8) ? utf8Encode(key) : key;
        data = (utf8) ? utf8Encode(data) : data;

        var hash, i = 0,
          bkey = rstr2binb(key),
          ipad = Array(32),
          opad = Array(32);

        if (bkey.length > 32) {
          bkey = binb(bkey, key.length * 8);
        }

        for (; i < 32; i += 1) {
          ipad[i] = bkey[i] ^ 0x36363636;
          opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }

        hash = binb(ipad.concat(rstr2binb(data)), 1024 + data.length * 8);
        return binb2rstr(binb(opad.concat(hash), 1024 + 512));
      }

      /**
       * Calculate the SHA-512 of an array of big-endian dwords, and a bit length
       */

      function binb(x, len) {
        var j, i, l,
          W = new Array(80),
          hash = new Array(16),
          //Initial hash values
          H = [
            new int64(0x6a09e667, -205731576),
            new int64(-1150833019, -2067093701),
            new int64(0x3c6ef372, -23791573),
            new int64(-1521486534, 0x5f1d36f1),
            new int64(0x510e527f, -1377402159),
            new int64(-1694144372, 0x2b3e6c1f),
            new int64(0x1f83d9ab, -79577749),
            new int64(0x5be0cd19, 0x137e2179)
          ],
          T1 = new int64(0, 0),
          T2 = new int64(0, 0),
          a = new int64(0, 0),
          b = new int64(0, 0),
          c = new int64(0, 0),
          d = new int64(0, 0),
          e = new int64(0, 0),
          f = new int64(0, 0),
          g = new int64(0, 0),
          h = new int64(0, 0),
          //Temporary variables not specified by the document
          s0 = new int64(0, 0),
          s1 = new int64(0, 0),
          Ch = new int64(0, 0),
          Maj = new int64(0, 0),
          r1 = new int64(0, 0),
          r2 = new int64(0, 0),
          r3 = new int64(0, 0);

        if (sha512_k === undefined) {
          //SHA512 constants
          sha512_k = [
            new int64(0x428a2f98, -685199838), new int64(0x71374491, 0x23ef65cd),
            new int64(-1245643825, -330482897), new int64(-373957723, -2121671748),
            new int64(0x3956c25b, -213338824), new int64(0x59f111f1, -1241133031),
            new int64(-1841331548, -1357295717), new int64(-1424204075, -630357736),
            new int64(-670586216, -1560083902), new int64(0x12835b01, 0x45706fbe),
            new int64(0x243185be, 0x4ee4b28c), new int64(0x550c7dc3, -704662302),
            new int64(0x72be5d74, -226784913), new int64(-2132889090, 0x3b1696b1),
            new int64(-1680079193, 0x25c71235), new int64(-1046744716, -815192428),
            new int64(-459576895, -1628353838), new int64(-272742522, 0x384f25e3),
            new int64(0xfc19dc6, -1953704523), new int64(0x240ca1cc, 0x77ac9c65),
            new int64(0x2de92c6f, 0x592b0275), new int64(0x4a7484aa, 0x6ea6e483),
            new int64(0x5cb0a9dc, -1119749164), new int64(0x76f988da, -2096016459),
            new int64(-1740746414, -295247957), new int64(-1473132947, 0x2db43210),
            new int64(-1341970488, -1728372417), new int64(-1084653625, -1091629340),
            new int64(-958395405, 0x3da88fc2), new int64(-710438585, -1828018395),
            new int64(0x6ca6351, -536640913), new int64(0x14292967, 0xa0e6e70),
            new int64(0x27b70a85, 0x46d22ffc), new int64(0x2e1b2138, 0x5c26c926),
            new int64(0x4d2c6dfc, 0x5ac42aed), new int64(0x53380d13, -1651133473),
            new int64(0x650a7354, -1951439906), new int64(0x766a0abb, 0x3c77b2a8),
            new int64(-2117940946, 0x47edaee6), new int64(-1838011259, 0x1482353b),
            new int64(-1564481375, 0x4cf10364), new int64(-1474664885, -1136513023),
            new int64(-1035236496, -789014639), new int64(-949202525, 0x654be30),
            new int64(-778901479, -688958952), new int64(-694614492, 0x5565a910),
            new int64(-200395387, 0x5771202a), new int64(0x106aa070, 0x32bbd1b8),
            new int64(0x19a4c116, -1194143544), new int64(0x1e376c08, 0x5141ab53),
            new int64(0x2748774c, -544281703), new int64(0x34b0bcb5, -509917016),
            new int64(0x391c0cb3, -976659869), new int64(0x4ed8aa4a, -482243893),
            new int64(0x5b9cca4f, 0x7763e373), new int64(0x682e6ff3, -692930397),
            new int64(0x748f82ee, 0x5defb2fc), new int64(0x78a5636f, 0x43172f60),
            new int64(-2067236844, -1578062990), new int64(-1933114872, 0x1a6439ec),
            new int64(-1866530822, 0x23631e28), new int64(-1538233109, -561857047),
            new int64(-1090935817, -1295615723), new int64(-965641998, -479046869),
            new int64(-903397682, -366583396), new int64(-779700025, 0x21c0c207),
            new int64(-354779690, -840897762), new int64(-176337025, -294727304),
            new int64(0x6f067aa, 0x72176fba), new int64(0xa637dc5, -1563912026),
            new int64(0x113f9804, -1090974290), new int64(0x1b710b35, 0x131c471b),
            new int64(0x28db77f5, 0x23047d84), new int64(0x32caab7b, 0x40c72493),
            new int64(0x3c9ebe0a, 0x15c9bebc), new int64(0x431d67c4, -1676669620),
            new int64(0x4cc5d4be, -885112138), new int64(0x597f299c, -60457430),
            new int64(0x5fcb6fab, 0x3ad6faec), new int64(0x6c44198c, 0x4a475817)
          ];
        }

        for (i = 0; i < 80; i += 1) {
          W[i] = new int64(0, 0);
        }

        // append padding to the source string. The format is described in the FIPS.
        x[len >> 5] |= 0x80 << (24 - (len & 0x1f));
        x[((len + 128 >> 10) << 5) + 31] = len;
        l = x.length;
        for (i = 0; i < l; i += 32) { //32 dwords is the block size
          int64copy(a, H[0]);
          int64copy(b, H[1]);
          int64copy(c, H[2]);
          int64copy(d, H[3]);
          int64copy(e, H[4]);
          int64copy(f, H[5]);
          int64copy(g, H[6]);
          int64copy(h, H[7]);

          for (j = 0; j < 16; j += 1) {
            W[j].h = x[i + 2 * j];
            W[j].l = x[i + 2 * j + 1];
          }

          for (j = 16; j < 80; j += 1) {
            //sigma1
            int64rrot(r1, W[j - 2], 19);
            int64revrrot(r2, W[j - 2], 29);
            int64shr(r3, W[j - 2], 6);
            s1.l = r1.l ^ r2.l ^ r3.l;
            s1.h = r1.h ^ r2.h ^ r3.h;
            //sigma0
            int64rrot(r1, W[j - 15], 1);
            int64rrot(r2, W[j - 15], 8);
            int64shr(r3, W[j - 15], 7);
            s0.l = r1.l ^ r2.l ^ r3.l;
            s0.h = r1.h ^ r2.h ^ r3.h;

            int64add4(W[j], s1, W[j - 7], s0, W[j - 16]);
          }

          for (j = 0; j < 80; j += 1) {
            //Ch
            Ch.l = (e.l & f.l) ^ (~e.l & g.l);
            Ch.h = (e.h & f.h) ^ (~e.h & g.h);

            //Sigma1
            int64rrot(r1, e, 14);
            int64rrot(r2, e, 18);
            int64revrrot(r3, e, 9);
            s1.l = r1.l ^ r2.l ^ r3.l;
            s1.h = r1.h ^ r2.h ^ r3.h;

            //Sigma0
            int64rrot(r1, a, 28);
            int64revrrot(r2, a, 2);
            int64revrrot(r3, a, 7);
            s0.l = r1.l ^ r2.l ^ r3.l;
            s0.h = r1.h ^ r2.h ^ r3.h;

            //Maj
            Maj.l = (a.l & b.l) ^ (a.l & c.l) ^ (b.l & c.l);
            Maj.h = (a.h & b.h) ^ (a.h & c.h) ^ (b.h & c.h);

            int64add5(T1, h, s1, Ch, sha512_k[j], W[j]);
            int64add(T2, s0, Maj);

            int64copy(h, g);
            int64copy(g, f);
            int64copy(f, e);
            int64add(e, d, T1);
            int64copy(d, c);
            int64copy(c, b);
            int64copy(b, a);
            int64add(a, T1, T2);
          }
          int64add(H[0], H[0], a);
          int64add(H[1], H[1], b);
          int64add(H[2], H[2], c);
          int64add(H[3], H[3], d);
          int64add(H[4], H[4], e);
          int64add(H[5], H[5], f);
          int64add(H[6], H[6], g);
          int64add(H[7], H[7], h);
        }

        //represent the hash as an array of 32-bit dwords
        for (i = 0; i < 8; i += 1) {
          hash[2 * i] = H[i].h;
          hash[2 * i + 1] = H[i].l;
        }
        return hash;
      }

      //A constructor for 64-bit numbers

      function int64(h, l) {
        this.h = h;
        this.l = l;
        //this.toString = int64toString;
      }

      //Copies src into dst, assuming both are 64-bit numbers

      function int64copy(dst, src) {
        dst.h = src.h;
        dst.l = src.l;
      }

      //Right-rotates a 64-bit number by shift
      //Won't handle cases of shift>=32
      //The function revrrot() is for that

      function int64rrot(dst, x, shift) {
        dst.l = (x.l >>> shift) | (x.h << (32 - shift));
        dst.h = (x.h >>> shift) | (x.l << (32 - shift));
      }

      //Reverses the dwords of the source and then rotates right by shift.
      //This is equivalent to rotation by 32+shift

      function int64revrrot(dst, x, shift) {
        dst.l = (x.h >>> shift) | (x.l << (32 - shift));
        dst.h = (x.l >>> shift) | (x.h << (32 - shift));
      }

      //Bitwise-shifts right a 64-bit number by shift
      //Won't handle shift>=32, but it's never needed in SHA512

      function int64shr(dst, x, shift) {
        dst.l = (x.l >>> shift) | (x.h << (32 - shift));
        dst.h = (x.h >>> shift);
      }

      //Adds two 64-bit numbers
      //Like the original implementation, does not rely on 32-bit operations

      function int64add(dst, x, y) {
        var w0 = (x.l & 0xffff) + (y.l & 0xffff);
        var w1 = (x.l >>> 16) + (y.l >>> 16) + (w0 >>> 16);
        var w2 = (x.h & 0xffff) + (y.h & 0xffff) + (w1 >>> 16);
        var w3 = (x.h >>> 16) + (y.h >>> 16) + (w2 >>> 16);
        dst.l = (w0 & 0xffff) | (w1 << 16);
        dst.h = (w2 & 0xffff) | (w3 << 16);
      }

      //Same, except with 4 addends. Works faster than adding them one by one.

      function int64add4(dst, a, b, c, d) {
        var w0 = (a.l & 0xffff) + (b.l & 0xffff) + (c.l & 0xffff) + (d.l & 0xffff);
        var w1 = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (w0 >>> 16);
        var w2 = (a.h & 0xffff) + (b.h & 0xffff) + (c.h & 0xffff) + (d.h & 0xffff) + (w1 >>> 16);
        var w3 = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (w2 >>> 16);
        dst.l = (w0 & 0xffff) | (w1 << 16);
        dst.h = (w2 & 0xffff) | (w3 << 16);
      }

      //Same, except with 5 addends

      function int64add5(dst, a, b, c, d, e) {
        var w0 = (a.l & 0xffff) + (b.l & 0xffff) + (c.l & 0xffff) + (d.l & 0xffff) + (e.l & 0xffff),
          w1 = (a.l >>> 16) + (b.l >>> 16) + (c.l >>> 16) + (d.l >>> 16) + (e.l >>> 16) + (w0 >>> 16),
          w2 = (a.h & 0xffff) + (b.h & 0xffff) + (c.h & 0xffff) + (d.h & 0xffff) + (e.h & 0xffff) + (w1 >>> 16),
          w3 = (a.h >>> 16) + (b.h >>> 16) + (c.h >>> 16) + (d.h >>> 16) + (e.h >>> 16) + (w2 >>> 16);
        dst.l = (w0 & 0xffff) | (w1 << 16);
        dst.h = (w2 & 0xffff) | (w3 << 16);
      }
    },
    /**
     * @class Hashes.RMD160
     * @constructor
     * @param {Object} [config]
     *
     * A JavaScript implementation of the RIPEMD-160 Algorithm
     * Version 2.2 Copyright Jeremy Lin, Paul Johnston 2000 - 2009.
     * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
     * See http://pajhome.org.uk/crypt/md5 for details.
     * Also http://www.ocf.berkeley.edu/~jjlin/jsotp/
     */
    RMD160: function(options) {
      /**
       * Private properties configuration variables. You may need to tweak these to be compatible with
       * the server-side, but the defaults work in most cases.
       * @see this.setUpperCase() method
       * @see this.setPad() method
       */
      var hexcase = (options && typeof options.uppercase === 'boolean') ? options.uppercase : false,
        /* hexadecimal output case format. false - lowercase; true - uppercase  */
        b64pad = (options && typeof options.pad === 'string') ? options.pa : '=',
        /* base-64 pad character. Default '=' for strict RFC compliance   */
        utf8 = (options && typeof options.utf8 === 'boolean') ? options.utf8 : true,
        /* enable/disable utf8 encoding */
        rmd160_r1 = [
          0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
          7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
          3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
          1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
          4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
        ],
        rmd160_r2 = [
          5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
          6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
          15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
          8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
          12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
        ],
        rmd160_s1 = [
          11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
          7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
          11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
          11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
          9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
        ],
        rmd160_s2 = [
          8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
          9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
          9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
          15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
          8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
        ];

      /* privileged (public) methods */
      this.hex = function(s) {
        return rstr2hex(rstr(s, utf8));
      };
      this.b64 = function(s) {
        return rstr2b64(rstr(s, utf8), b64pad);
      };
      this.any = function(s, e) {
        return rstr2any(rstr(s, utf8), e);
      };
      this.raw = function(s) {
        return rstr(s, utf8);
      };
      this.hex_hmac = function(k, d) {
        return rstr2hex(rstr_hmac(k, d));
      };
      this.b64_hmac = function(k, d) {
        return rstr2b64(rstr_hmac(k, d), b64pad);
      };
      this.any_hmac = function(k, d, e) {
        return rstr2any(rstr_hmac(k, d), e);
      };
      /**
       * Perform a simple self-test to see if the VM is working
       * @return {String} Hexadecimal hash sample
       * @public
       */
      this.vm_test = function() {
        return hex('abc').toLowerCase() === '900150983cd24fb0d6963f7d28e17f72';
      };
      /**
       * @description Enable/disable uppercase hexadecimal returned string
       * @param {boolean}
       * @return {Object} this
       * @public
       */
      this.setUpperCase = function(a) {
        if (typeof a === 'boolean') {
          hexcase = a;
        }
        return this;
      };
      /**
       * @description Defines a base64 pad string
       * @param {string} Pad
       * @return {Object} this
       * @public
       */
      this.setPad = function(a) {
        if (typeof a !== 'undefined') {
          b64pad = a;
        }
        return this;
      };
      /**
       * @description Defines a base64 pad string
       * @param {boolean}
       * @return {Object} this
       * @public
       */
      this.setUTF8 = function(a) {
        if (typeof a === 'boolean') {
          utf8 = a;
        }
        return this;
      };

      /* private methods */

      /**
       * Calculate the rmd160 of a raw string
       */

      function rstr(s) {
        s = (utf8) ? utf8Encode(s) : s;
        return binl2rstr(binl(rstr2binl(s), s.length * 8));
      }

      /**
       * Calculate the HMAC-rmd160 of a key and some data (raw strings)
       */

      function rstr_hmac(key, data) {
        key = (utf8) ? utf8Encode(key) : key;
        data = (utf8) ? utf8Encode(data) : data;
        var i, hash,
          bkey = rstr2binl(key),
          ipad = Array(16),
          opad = Array(16);

        if (bkey.length > 16) {
          bkey = binl(bkey, key.length * 8);
        }

        for (i = 0; i < 16; i += 1) {
          ipad[i] = bkey[i] ^ 0x36363636;
          opad[i] = bkey[i] ^ 0x5C5C5C5C;
        }
        hash = binl(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
        return binl2rstr(binl(opad.concat(hash), 512 + 160));
      }

      /**
       * Convert an array of little-endian words to a string
       */

      function binl2rstr(input) {
        var i, output = '',
          l = input.length * 32;
        for (i = 0; i < l; i += 8) {
          output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF);
        }
        return output;
      }

      /**
       * Calculate the RIPE-MD160 of an array of little-endian words, and a bit length.
       */

      function binl(x, len) {
        var T, j, i, l,
          h0 = 0x67452301,
          h1 = 0xefcdab89,
          h2 = 0x98badcfe,
          h3 = 0x10325476,
          h4 = 0xc3d2e1f0,
          A1, B1, C1, D1, E1,
          A2, B2, C2, D2, E2;

        /* append padding */
        x[len >> 5] |= 0x80 << (len % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;
        l = x.length;

        for (i = 0; i < l; i += 16) {
          A1 = A2 = h0;
          B1 = B2 = h1;
          C1 = C2 = h2;
          D1 = D2 = h3;
          E1 = E2 = h4;
          for (j = 0; j <= 79; j += 1) {
            T = safe_add(A1, rmd160_f(j, B1, C1, D1));
            T = safe_add(T, x[i + rmd160_r1[j]]);
            T = safe_add(T, rmd160_K1(j));
            T = safe_add(bit_rol(T, rmd160_s1[j]), E1);
            A1 = E1;
            E1 = D1;
            D1 = bit_rol(C1, 10);
            C1 = B1;
            B1 = T;
            T = safe_add(A2, rmd160_f(79 - j, B2, C2, D2));
            T = safe_add(T, x[i + rmd160_r2[j]]);
            T = safe_add(T, rmd160_K2(j));
            T = safe_add(bit_rol(T, rmd160_s2[j]), E2);
            A2 = E2;
            E2 = D2;
            D2 = bit_rol(C2, 10);
            C2 = B2;
            B2 = T;
          }

          T = safe_add(h1, safe_add(C1, D2));
          h1 = safe_add(h2, safe_add(D1, E2));
          h2 = safe_add(h3, safe_add(E1, A2));
          h3 = safe_add(h4, safe_add(A1, B2));
          h4 = safe_add(h0, safe_add(B1, C2));
          h0 = T;
        }
        return [h0, h1, h2, h3, h4];
      }

      // specific algorithm methods

      function rmd160_f(j, x, y, z) {
        return (0 <= j && j <= 15) ? (x ^ y ^ z) :
          (16 <= j && j <= 31) ? (x & y) | (~x & z) :
          (32 <= j && j <= 47) ? (x | ~y) ^ z :
          (48 <= j && j <= 63) ? (x & z) | (y & ~z) :
          (64 <= j && j <= 79) ? x ^ (y | ~z) :
          'rmd160_f: j out of range';
      }

      function rmd160_K1(j) {
        return (0 <= j && j <= 15) ? 0x00000000 :
          (16 <= j && j <= 31) ? 0x5a827999 :
          (32 <= j && j <= 47) ? 0x6ed9eba1 :
          (48 <= j && j <= 63) ? 0x8f1bbcdc :
          (64 <= j && j <= 79) ? 0xa953fd4e :
          'rmd160_K1: j out of range';
      }

      function rmd160_K2(j) {
        return (0 <= j && j <= 15) ? 0x50a28be6 :
          (16 <= j && j <= 31) ? 0x5c4dd124 :
          (32 <= j && j <= 47) ? 0x6d703ef3 :
          (48 <= j && j <= 63) ? 0x7a6d76e9 :
          (64 <= j && j <= 79) ? 0x00000000 :
          'rmd160_K2: j out of range';
      }
    }
  };

  // exposes Hashes
  (function(window, undefined) {
    var freeExports = false;
    if (typeof exports === 'object') {
      freeExports = exports;
      if (exports && typeof global === 'object' && global && global === global.global) {
        window = global;
      }
    }

    if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {
      // define as an anonymous module, so, through path mapping, it can be aliased
      define(function() {
        return Hashes;
      });
    } else if (freeExports) {
      // in Node.js or RingoJS v0.8.0+
      if (typeof module === 'object' && module && module.exports === freeExports) {
        module.exports = Hashes;
      }
      // in Narwhal or RingoJS v0.7.0-
      else {
        freeExports.Hashes = Hashes;
      }
    } else {
      // in a browser or Rhino
      window.Hashes = Hashes;
    }
  }(this));
}()); // IIFE

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],3:[function(_dereq_,module,exports){
function Agent() {
  this._defaults = [];
}

["use", "on", "once", "set", "query", "type", "accept", "auth", "withCredentials", "sortQuery", "retry", "ok", "redirects",
 "timeout", "buffer", "serialize", "parse", "ca", "key", "pfx", "cert"].forEach(function(fn) {
  /** Default setting for all requests from this agent */
  Agent.prototype[fn] = function(/*varargs*/) {
    this._defaults.push({fn:fn, arguments:arguments});
    return this;
  }
});

Agent.prototype._setDefaults = function(req) {
    this._defaults.forEach(function(def) {
      req[def.fn].apply(req, def.arguments);
    });
};

module.exports = Agent;

},{}],4:[function(_dereq_,module,exports){
/**
 * Root reference for iframes.
 */

var root;
if (typeof window !== 'undefined') { // Browser window
  root = window;
} else if (typeof self !== 'undefined') { // Web Worker
  root = self;
} else { // Other environments
  console.warn("Using browser-only version of superagent in non-browser environment");
  root = this;
}

var Emitter = _dereq_('component-emitter');
var RequestBase = _dereq_('./request-base');
var isObject = _dereq_('./is-object');
var ResponseBase = _dereq_('./response-base');
var Agent = _dereq_('./agent-base');

/**
 * Noop.
 */

function noop(){};

/**
 * Expose `request`.
 */

var request = exports = module.exports = function(method, url) {
  // callback
  if ('function' == typeof url) {
    return new exports.Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new exports.Request('GET', method);
  }

  return new exports.Request(method, url);
}

exports.Request = Request;

/**
 * Determine XHR.
 */

request.getXHR = function () {
  if (root.XMLHttpRequest
      && (!root.location || 'file:' != root.location.protocol
          || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  throw Error("Browser-only version of superagent could not find XHR");
};

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    pushEncodedKeyValuePair(pairs, key, obj[key]);
  }
  return pairs.join('&');
}

/**
 * Helps 'serialize' with serializing arrays.
 * Mutates the pairs array.
 *
 * @param {Array} pairs
 * @param {String} key
 * @param {Mixed} val
 */

function pushEncodedKeyValuePair(pairs, key, val) {
  if (val != null) {
    if (Array.isArray(val)) {
      val.forEach(function(v) {
        pushEncodedKeyValuePair(pairs, key, v);
      });
    } else if (isObject(val)) {
      for(var subkey in val) {
        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);
      }
    } else {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(val));
    }
  } else if (val === null) {
    pairs.push(encodeURIComponent(key));
  }
}

/**
 * Expose serialization method.
 */

request.serializeObject = serialize;

/**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var pair;
  var pos;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    pos = pair.indexOf('=');
    if (pos == -1) {
      obj[decodeURIComponent(pair)] = '';
    } else {
      obj[decodeURIComponent(pair.slice(0, pos))] =
        decodeURIComponent(pair.slice(pos + 1));
    }
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'text/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

request.serialize = {
  'application/x-www-form-urlencoded': serialize,
  'application/json': JSON.stringify,
};

/**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse,
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    if (index === -1) { // could be empty line, just skip it
      continue;
    }
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Check if `mime` is json or has +json structured syntax suffix.
 *
 * @param {String} mime
 * @return {Boolean}
 * @api private
 */

function isJSON(mime) {
  // should match /json or +json
  // but not /json-seq
  return /[\/+]json($|[^-\w])/.test(mime);
}

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req) {
  this.req = req;
  this.xhr = this.req.xhr;
  // responseText is accessible only if responseType is '' or 'text' and on older browsers
  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
     ? this.xhr.responseText
     : null;
  this.statusText = this.req.xhr.statusText;
  var status = this.xhr.status;
  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
  if (status === 1223) {
    status = 204;
  }
  this._setStatusProperties(status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this._setHeaderProperties(this.header);

  if (null === this.text && req._responseType) {
    this.body = this.xhr.response;
  } else {
    this.body = this.req.method != 'HEAD'
      ? this._parseBody(this.text ? this.text : this.xhr.response)
      : null;
  }
}

ResponseBase(Response.prototype);

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype._parseBody = function(str) {
  var parse = request.parse[this.type];
  if (this.req._parser) {
    return this.req._parser(this, str);
  }
  if (!parse && isJSON(this.type)) {
    parse = request.parse['application/json'];
  }
  return parse && str && (str.length || str instanceof Object)
    ? parse(str)
    : null;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var url = req.url;

  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.url = url;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {}; // preserves header name case
  this._header = {}; // coerces header names to lowercase
  this.on('end', function(){
    var err = null;
    var res = null;

    try {
      res = new Response(self);
    } catch(e) {
      err = new Error('Parser is unable to parse the response');
      err.parse = true;
      err.original = e;
      // issue #675: return the raw response if the response parsing fails
      if (self.xhr) {
        // ie9 doesn't have 'response' property
        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;
        // issue #876: return the http status code if the response parsing fails
        err.status = self.xhr.status ? self.xhr.status : null;
        err.statusCode = err.status; // backwards-compat only
      } else {
        err.rawResponse = null;
        err.status = null;
      }

      return self.callback(err);
    }

    self.emit('response', res);

    var new_err;
    try {
      if (!self._isResponseOK(res)) {
        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
      }
    } catch(custom_err) {
      new_err = custom_err; // ok() callback can throw
    }

    // #1000 don't catch errors from the callback to avoid double calling it
    if (new_err) {
      new_err.original = err;
      new_err.response = res;
      new_err.status = res.status;
      self.callback(new_err, res);
    } else {
      self.callback(null, res);
    }
  });
}

/**
 * Mixin `Emitter` and `RequestBase`.
 */

Emitter(Request.prototype);
RequestBase(Request.prototype);

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} [pass] optional in case of using 'bearer' as type
 * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass, options){
  if (1 === arguments.length) pass = '';
  if (typeof pass === 'object' && pass !== null) { // pass is optional and can be replaced with options
    options = pass;
    pass = '';
  }
  if (!options) {
    options = {
      type: 'function' === typeof btoa ? 'basic' : 'auto',
    };
  }

  var encoder = function(string) {
    if ('function' === typeof btoa) {
      return btoa(string);
    }
    throw new Error('Cannot use basic auth, btoa is not a function');
  };

  return this._auth(user, pass, options, encoder);
};

/**
 * Add query-string `val`.
 *
 * Examples:
 *
 *   request.get('/shoes')
 *     .query('size=10')
 *     .query({ color: 'blue' })
 *
 * @param {Object|String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Queue the given `file` as an attachment to the specified `field`,
 * with optional `options` (or filename).
 *
 * ``` js
 * request.post('/upload')
 *   .attach('content', new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
 *   .end(callback);
 * ```
 *
 * @param {String} field
 * @param {Blob|File} file
 * @param {String|Object} options
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.attach = function(field, file, options){
  if (file) {
    if (this._data) {
      throw Error("superagent can't mix .send() and .attach()");
    }

    this._getFormData().append(field, file, options || file.name);
  }
  return this;
};

Request.prototype._getFormData = function(){
  if (!this._formData) {
    this._formData = new root.FormData();
  }
  return this._formData;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  if (this._shouldRetry(err, res)) {
    return this._retry();
  }

  var fn = this._callback;
  this.clearTimeout();

  if (err) {
    if (this._maxRetries) err.retries = this._retries - 1;
    this.emit('error', err);
  }

  fn(err, res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');
  err.crossDomain = true;

  err.status = this.status;
  err.method = this.method;
  err.url = this.url;

  this.callback(err);
};

// This only warns, because the request is still likely to work
Request.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){
  console.warn("This is not supported in browser version of superagent");
  return this;
};

// This throws, because it can't send/receive data as expected
Request.prototype.pipe = Request.prototype.write = function(){
  throw Error("Streaming is not supported in browser version of superagent");
};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */
Request.prototype._isHost = function _isHost(obj) {
  // Native objects stringify to [object File], [object Blob], [object FormData], etc.
  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';
}

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  if (this._endCalled) {
    console.warn("Warning: .end() was called twice. This is not supported in superagent");
  }
  this._endCalled = true;

  // store callback
  this._callback = fn || noop;

  // querystring
  this._finalizeQueryString();

  return this._end();
};

Request.prototype._end = function() {
  var self = this;
  var xhr = (this.xhr = request.getXHR());
  var data = this._formData || this._data;

  this._setTimeouts();

  // state change
  xhr.onreadystatechange = function(){
    var readyState = xhr.readyState;
    if (readyState >= 2 && self._responseTimeoutTimer) {
      clearTimeout(self._responseTimeoutTimer);
    }
    if (4 != readyState) {
      return;
    }

    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
    // result in the error "Could not complete the operation due to error c00c023f"
    var status;
    try { status = xhr.status } catch(e) { status = 0; }

    if (!status) {
      if (self.timedout || self._aborted) return;
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  var handleProgress = function(direction, e) {
    if (e.total > 0) {
      e.percent = e.loaded / e.total * 100;
    }
    e.direction = direction;
    self.emit('progress', e);
  };
  if (this.hasListeners('progress')) {
    try {
      xhr.onprogress = handleProgress.bind(null, 'download');
      if (xhr.upload) {
        xhr.upload.onprogress = handleProgress.bind(null, 'upload');
      }
    } catch(e) {
      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
      // Reported here:
      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
    }
  }

  // initiate request
  try {
    if (this.username && this.password) {
      xhr.open(this.method, this.url, true, this.username, this.password);
    } else {
      xhr.open(this.method, this.url, true);
    }
  } catch (err) {
    // see #1149
    return this.callback(err);
  }

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {
    // serialize stuff
    var contentType = this._header['content-type'];
    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];
    if (!serialize && isJSON(contentType)) {
      serialize = request.serialize['application/json'];
    }
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;

    if (this.header.hasOwnProperty(field))
      xhr.setRequestHeader(field, this.header[field]);
  }

  if (this._responseType) {
    xhr.responseType = this._responseType;
  }

  // send stuff
  this.emit('request', this);

  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
  // We need null here if data is undefined
  xhr.send(typeof data !== 'undefined' ? data : null);
  return this;
};

request.agent = function() {
  return new Agent();
};

["GET", "POST", "OPTIONS", "PATCH", "PUT", "DELETE"].forEach(function(method) {
  Agent.prototype[method.toLowerCase()] = function(url, fn) {
    var req = new request.Request(method, url);
    this._setDefaults(req);
    if (fn) {
      req.end(fn);
    }
    return req;
  };
});

Agent.prototype.del = Agent.prototype['delete'];

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn) {
  var req = request('GET', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn) {
  var req = request('HEAD', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * OPTIONS query to `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.options = function(url, data, fn) {
  var req = request('OPTIONS', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

function del(url, data, fn) {
  var req = request('DELETE', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
}

request['del'] = del;
request['delete'] = del;

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn) {
  var req = request('PATCH', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} [data]
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn) {
  var req = request('POST', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} [data] or fn
 * @param {Function} [fn]
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn) {
  var req = request('PUT', url);
  if ('function' == typeof data) (fn = data), (data = null);
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

},{"./agent-base":3,"./is-object":5,"./request-base":6,"./response-base":7,"component-emitter":1}],5:[function(_dereq_,module,exports){
'use strict';

/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return null !== obj && 'object' === typeof obj;
}

module.exports = isObject;

},{}],6:[function(_dereq_,module,exports){
'use strict';

/**
 * Module of mixed-in functions shared between node and client code
 */
var isObject = _dereq_('./is-object');

/**
 * Expose `RequestBase`.
 */

module.exports = RequestBase;

/**
 * Initialize a new `RequestBase`.
 *
 * @api public
 */

function RequestBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in RequestBase.prototype) {
    obj[key] = RequestBase.prototype[key];
  }
  return obj;
}

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.clearTimeout = function _clearTimeout(){
  clearTimeout(this._timer);
  clearTimeout(this._responseTimeoutTimer);
  delete this._timer;
  delete this._responseTimeoutTimer;
  return this;
};

/**
 * Override default response body parser
 *
 * This function will be called to convert incoming data into request.body
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.parse = function parse(fn){
  this._parser = fn;
  return this;
};

/**
 * Set format of binary response body.
 * In browser valid formats are 'blob' and 'arraybuffer',
 * which return Blob and ArrayBuffer, respectively.
 *
 * In Node all values result in Buffer.
 *
 * Examples:
 *
 *      req.get('/')
 *        .responseType('blob')
 *        .end(callback);
 *
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.responseType = function(val){
  this._responseType = val;
  return this;
};

/**
 * Override default request body serializer
 *
 * This function will be called to convert data set via .send or .attach into payload to send
 *
 * @param {Function}
 * @api public
 */

RequestBase.prototype.serialize = function serialize(fn){
  this._serializer = fn;
  return this;
};

/**
 * Set timeouts.
 *
 * - response timeout is time between sending request and receiving the first byte of the response. Includes DNS and connection time.
 * - deadline is the time from start of the request to receiving response body in full. If the deadline is too short large files may not load at all on slow connections.
 *
 * Value of 0 or false means no timeout.
 *
 * @param {Number|Object} ms or {response, deadline}
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.timeout = function timeout(options){
  if (!options || 'object' !== typeof options) {
    this._timeout = options;
    this._responseTimeout = 0;
    return this;
  }

  for(var option in options) {
    switch(option) {
      case 'deadline':
        this._timeout = options.deadline;
        break;
      case 'response':
        this._responseTimeout = options.response;
        break;
      default:
        console.warn("Unknown timeout option", option);
    }
  }
  return this;
};

/**
 * Set number of retry attempts on error.
 *
 * Failed requests will be retried 'count' times if timeout or err.code >= 500.
 *
 * @param {Number} count
 * @param {Function} [fn]
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.retry = function retry(count, fn){
  // Default to 1 if no count passed or true
  if (arguments.length === 0 || count === true) count = 1;
  if (count <= 0) count = 0;
  this._maxRetries = count;
  this._retries = 0;
  this._retryCallback = fn;
  return this;
};

var ERROR_CODES = [
  'ECONNRESET',
  'ETIMEDOUT',
  'EADDRINFO',
  'ESOCKETTIMEDOUT'
];

/**
 * Determine if a request should be retried.
 * (Borrowed from segmentio/superagent-retry)
 *
 * @param {Error} err
 * @param {Response} [res]
 * @returns {Boolean}
 */
RequestBase.prototype._shouldRetry = function(err, res) {
  if (!this._maxRetries || this._retries++ >= this._maxRetries) {
    return false;
  }
  if (this._retryCallback) {
    try {
      var override = this._retryCallback(err, res);
      if (override === true) return true;
      if (override === false) return false;
      // undefined falls back to defaults
    } catch(e) {
      console.error(e);
    }
  }
  if (res && res.status && res.status >= 500 && res.status != 501) return true;
  if (err) {
    if (err.code && ~ERROR_CODES.indexOf(err.code)) return true;
    // Superagent timeout
    if (err.timeout && err.code == 'ECONNABORTED') return true;
    if (err.crossDomain) return true;
  }
  return false;
};

/**
 * Retry request
 *
 * @return {Request} for chaining
 * @api private
 */

RequestBase.prototype._retry = function() {

  this.clearTimeout();

  // node
  if (this.req) {
    this.req = null;
    this.req = this.request();
  }

  this._aborted = false;
  this.timedout = false;

  return this._end();
};

/**
 * Promise support
 *
 * @param {Function} resolve
 * @param {Function} [reject]
 * @return {Request}
 */

RequestBase.prototype.then = function then(resolve, reject) {
  if (!this._fullfilledPromise) {
    var self = this;
    if (this._endCalled) {
      console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises");
    }
    this._fullfilledPromise = new Promise(function(innerResolve, innerReject) {
      self.end(function(err, res) {
        if (err) innerReject(err);
        else innerResolve(res);
      });
    });
  }
  return this._fullfilledPromise.then(resolve, reject);
};

RequestBase.prototype.catch = function(cb) {
  return this.then(undefined, cb);
};

/**
 * Allow for extension
 */

RequestBase.prototype.use = function use(fn) {
  fn(this);
  return this;
};

RequestBase.prototype.ok = function(cb) {
  if ('function' !== typeof cb) throw Error("Callback required");
  this._okCallback = cb;
  return this;
};

RequestBase.prototype._isResponseOK = function(res) {
  if (!res) {
    return false;
  }

  if (this._okCallback) {
    return this._okCallback(res);
  }

  return res.status >= 200 && res.status < 300;
};

/**
 * Get request header `field`.
 * Case-insensitive.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

RequestBase.prototype.get = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Get case-insensitive header `field` value.
 * This is a deprecated internal API. Use `.get(field)` instead.
 *
 * (getHeader is no longer used internally by the superagent code base)
 *
 * @param {String} field
 * @return {String}
 * @api private
 * @deprecated
 */

RequestBase.prototype.getHeader = RequestBase.prototype.get;

/**
 * Set header `field` to `val`, or multiple fields with one object.
 * Case-insensitive.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Remove header `field`.
 * Case-insensitive.
 *
 * Example:
 *
 *      req.get('/')
 *        .unset('User-Agent')
 *        .end(callback);
 *
 * @param {String} field
 */
RequestBase.prototype.unset = function(field){
  delete this._header[field.toLowerCase()];
  delete this.header[field];
  return this;
};

/**
 * Write the field `name` and `val`, or multiple fields with one object
 * for "multipart/form-data" request bodies.
 *
 * ``` js
 * request.post('/upload')
 *   .field('foo', 'bar')
 *   .end(callback);
 *
 * request.post('/upload')
 *   .field({ foo: 'bar', baz: 'qux' })
 *   .end(callback);
 * ```
 *
 * @param {String|Object} name
 * @param {String|Blob|File|Buffer|fs.ReadStream} val
 * @return {Request} for chaining
 * @api public
 */
RequestBase.prototype.field = function(name, val) {
  // name should be either a string or an object.
  if (null === name || undefined === name) {
    throw new Error('.field(name, val) name can not be empty');
  }

  if (this._data) {
    console.error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObject(name)) {
    for (var key in name) {
      this.field(key, name[key]);
    }
    return this;
  }

  if (Array.isArray(val)) {
    for (var i in val) {
      this.field(name, val[i]);
    }
    return this;
  }

  // val should be defined now
  if (null === val || undefined === val) {
    throw new Error('.field(name, val) val can not be empty');
  }
  if ('boolean' === typeof val) {
    val = '' + val;
  }
  this._getFormData().append(name, val);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */
RequestBase.prototype.abort = function(){
  if (this._aborted) {
    return this;
  }
  this._aborted = true;
  this.xhr && this.xhr.abort(); // browser
  this.req && this.req.abort(); // node
  this.clearTimeout();
  this.emit('abort');
  return this;
};

RequestBase.prototype._auth = function(user, pass, options, base64Encoder) {
  switch (options.type) {
    case 'basic':
      this.set('Authorization', 'Basic ' + base64Encoder(user + ':' + pass));
      break;

    case 'auto':
      this.username = user;
      this.password = pass;
      break;

    case 'bearer': // usage would be .auth(accessToken, { type: 'bearer' })
      this.set('Authorization', 'Bearer ' + user);
      break;
  }
  return this;
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

RequestBase.prototype.withCredentials = function(on) {
  // This is browser-only functionality. Node side is no-op.
  if (on == undefined) on = true;
  this._withCredentials = on;
  return this;
};

/**
 * Set the max redirects to `n`. Does noting in browser XHR implementation.
 *
 * @param {Number} n
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.redirects = function(n){
  this._maxRedirects = n;
  return this;
};

/**
 * Maximum size of buffered response body, in bytes. Counts uncompressed size.
 * Default 200MB.
 *
 * @param {Number} n
 * @return {Request} for chaining
 */
RequestBase.prototype.maxResponseSize = function(n){
  if ('number' !== typeof n) {
    throw TypeError("Invalid argument");
  }
  this._maxResponseSize = n;
  return this;
};

/**
 * Convert to a plain javascript object (not JSON string) of scalar properties.
 * Note as this method is designed to return a useful non-this value,
 * it cannot be chained.
 *
 * @return {Object} describing method, url, and data of this request
 * @api public
 */

RequestBase.prototype.toJSON = function() {
  return {
    method: this.method,
    url: this.url,
    data: this._data,
    headers: this._header,
  };
};

/**
 * Send `data` as the request body, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"}')
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
 *      request.post('/user')
 *        .send('name=tobi')
 *        .send('species=ferret')
 *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.send = function(data){
  var isObj = isObject(data);
  var type = this._header['content-type'];

  if (this._formData) {
    console.error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");
  }

  if (isObj && !this._data) {
    if (Array.isArray(data)) {
      this._data = [];
    } else if (!this._isHost(data)) {
      this._data = {};
    }
  } else if (data && this._data && this._isHost(this._data)) {
    throw Error("Can't merge these send calls");
  }

  // merge
  if (isObj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    // default to x-www-form-urlencoded
    if (!type) this.type('form');
    type = this._header['content-type'];
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!isObj || this._isHost(data)) {
    return this;
  }

  // default to json
  if (!type) this.type('json');
  return this;
};

/**
 * Sort `querystring` by the sort function
 *
 *
 * Examples:
 *
 *       // default order
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery()
 *         .end(callback)
 *
 *       // customized sort function
 *       request.get('/user')
 *         .query('name=Nick')
 *         .query('search=Manny')
 *         .sortQuery(function(a, b){
 *           return a.length - b.length;
 *         })
 *         .end(callback)
 *
 *
 * @param {Function} sort
 * @return {Request} for chaining
 * @api public
 */

RequestBase.prototype.sortQuery = function(sort) {
  // _sort default to true but otherwise can be a function or boolean
  this._sort = typeof sort === 'undefined' ? true : sort;
  return this;
};

/**
 * Compose querystring to append to req.url
 *
 * @api private
 */
RequestBase.prototype._finalizeQueryString = function(){
  var query = this._query.join('&');
  if (query) {
    this.url += (this.url.indexOf('?') >= 0 ? '&' : '?') + query;
  }
  this._query.length = 0; // Makes the call idempotent

  if (this._sort) {
    var index = this.url.indexOf('?');
    if (index >= 0) {
      var queryArr = this.url.substring(index + 1).split('&');
      if ('function' === typeof this._sort) {
        queryArr.sort(this._sort);
      } else {
        queryArr.sort();
      }
      this.url = this.url.substring(0, index) + '?' + queryArr.join('&');
    }
  }
};

// For backwards compat only
RequestBase.prototype._appendQueryString = function() {console.trace("Unsupported");}

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

RequestBase.prototype._timeoutError = function(reason, timeout, errno){
  if (this._aborted) {
    return;
  }
  var err = new Error(reason + timeout + 'ms exceeded');
  err.timeout = timeout;
  err.code = 'ECONNABORTED';
  err.errno = errno;
  this.timedout = true;
  this.abort();
  this.callback(err);
};

RequestBase.prototype._setTimeouts = function() {
  var self = this;

  // deadline
  if (this._timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self._timeoutError('Timeout of ', self._timeout, 'ETIME');
    }, this._timeout);
  }
  // response timeout
  if (this._responseTimeout && !this._responseTimeoutTimer) {
    this._responseTimeoutTimer = setTimeout(function(){
      self._timeoutError('Response timeout of ', self._responseTimeout, 'ETIMEDOUT');
    }, this._responseTimeout);
  }
};

},{"./is-object":5}],7:[function(_dereq_,module,exports){
'use strict';

/**
 * Module dependencies.
 */

var utils = _dereq_('./utils');

/**
 * Expose `ResponseBase`.
 */

module.exports = ResponseBase;

/**
 * Initialize a new `ResponseBase`.
 *
 * @api public
 */

function ResponseBase(obj) {
  if (obj) return mixin(obj);
}

/**
 * Mixin the prototype properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in ResponseBase.prototype) {
    obj[key] = ResponseBase.prototype[key];
  }
  return obj;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

ResponseBase.prototype.get = function(field) {
  return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

ResponseBase.prototype._setHeaderProperties = function(header){
    // TODO: moar!
    // TODO: make this a util

    // content-type
    var ct = header['content-type'] || '';
    this.type = utils.type(ct);

    // params
    var params = utils.params(ct);
    for (var key in params) this[key] = params[key];

    this.links = {};

    // links
    try {
        if (header.link) {
            this.links = utils.parseLinks(header.link);
        }
    } catch (err) {
        // ignore
    }
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

ResponseBase.prototype._setStatusProperties = function(status){
    var type = status / 100 | 0;

    // status / class
    this.status = this.statusCode = status;
    this.statusType = type;

    // basics
    this.info = 1 == type;
    this.ok = 2 == type;
    this.redirect = 3 == type;
    this.clientError = 4 == type;
    this.serverError = 5 == type;
    this.error = (4 == type || 5 == type)
        ? this.toError()
        : false;

    // sugar
    this.accepted = 202 == status;
    this.noContent = 204 == status;
    this.badRequest = 400 == status;
    this.unauthorized = 401 == status;
    this.notAcceptable = 406 == status;
    this.forbidden = 403 == status;
    this.notFound = 404 == status;
};

},{"./utils":8}],8:[function(_dereq_,module,exports){
'use strict';

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.type = function(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.params = function(str){
  return str.split(/ *; */).reduce(function(obj, str){
    var parts = str.split(/ *= */);
    var key = parts.shift();
    var val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Parse Link header fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

exports.parseLinks = function(str){
  return str.split(/ *, */).reduce(function(obj, str){
    var parts = str.split(/ *; */);
    var url = parts[0].slice(1, -1);
    var rel = parts[1].split(/ *= */)[1].slice(1, -1);
    obj[rel] = url;
    return obj;
  }, {});
};

/**
 * Strip content related fields from `header`.
 *
 * @param {Object} header
 * @return {Object} header
 * @api private
 */

exports.cleanHeader = function(header, changesOrigin){
  delete header['content-type'];
  delete header['content-length'];
  delete header['transfer-encoding'];
  delete header['host'];
  // secuirty
  if (changesOrigin) {
    delete header['authorization'];
    delete header['cookie'];
  }
  return header;
};

},{}],9:[function(_dereq_,module,exports){
module.exports={
  "name": "wtf_wikipedia",
  "description": "parse wikiscript into json",
  "version": "2.6.3",
  "author": "Spencer Kelly <spencermountain@gmail.com> (http://spencermounta.in)",
  "repository": {
    "type": "git",
    "url": "git://github.com/spencermountain/wtf_wikipedia.git"
  },
  "main": "./src/index.js",
  "scripts": {
    "start": "node ./scripts/demo.js",
    "test": "node ./scripts/test.js",
    "postpublish": "node ./scripts/coverage.js",
    "coverage": "node ./scripts/coverage.js",
    "testb": "TESTENV=prod node ./scripts/test.js",
    "watch": "amble ./scratch.js",
    "build": "node ./scripts/build.js"
  },
  "bin": {
    "wikipedia": "./bin/parse.js",
    "wikipedia_plaintext": "./bin/plaintext.js"
  },
  "files": [
    "builds",
    "src",
    "bin"
  ],
  "keywords": [
    "wikipedia",
    "wikimedia",
    "wikipedia markup",
    "wikiscript"
  ],
  "dependencies": {
    "jshashes": "^1.0.6",
    "superagent": "^3.8.2"
  },
  "devDependencies": {
    "amble": "0.0.5",
    "babel-cli": "^6.10.1",
    "babel-plugin-transform-object-assign": "^6.8.0",
    "babel-preset-es2015": "6.24.1",
    "babelify": "8.0.0",
    "browserify": "14.4.0",
    "codacy-coverage": "^2.0.0",
    "derequire": "^2.0.3",
    "doctoc": "^1.3.0",
    "eslint": "^4.17.0",
    "gaze": "^1.1.1",
    "nyc": "^8.4.0",
    "shelljs": "^0.8.1",
    "tap-min": "^1.2.1",
    "tap-spec": "4.1.1",
    "tape": "4.8.0",
    "uglify-js": "3.3.9"
  },
  "license": "MIT"
}

},{}],10:[function(_dereq_,module,exports){
'use strict';

//these are used for the sentence-splitter
module.exports = ['jr', 'mr', 'mrs', 'ms', 'dr', 'prof', 'sr', 'sen', 'corp', 'calif', 'rep', 'gov', 'atty', 'supt', 'det', 'rev', 'col', 'gen', 'lt', 'cmdr', 'adm', 'capt', 'sgt', 'cpl', 'maj', 'dept', 'univ', 'assn', 'bros', 'inc', 'ltd', 'co', 'corp', 'arc', 'al', 'ave', 'blvd', 'cl', 'ct', 'cres', 'exp', 'rd', 'st', 'dist', 'mt', 'ft', 'fy', 'hwy', 'la', 'pd', 'pl', 'plz', 'tce', 'Ala', 'Ariz', 'Ark', 'Cal', 'Calif', 'Col', 'Colo', 'Conn', 'Del', 'Fed', 'Fla', 'Ga', 'Ida', 'Id', 'Ill', 'Ind', 'Ia', 'Kan', 'Kans', 'Ken', 'Ky', 'La', 'Me', 'Md', 'Mass', 'Mich', 'Minn', 'Miss', 'Mo', 'Mont', 'Neb', 'Nebr', 'Nev', 'Mex', 'Okla', 'Ok', 'Ore', 'Penna', 'Penn', 'Pa', 'Dak', 'Tenn', 'Tex', 'Ut', 'Vt', 'Va', 'Wash', 'Wis', 'Wisc', 'Wy', 'Wyo', 'USAFA', 'Alta', 'Ont', 'QuÔøΩ', 'Sask', 'Yuk', 'jan', 'feb', 'mar', 'apr', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec', 'sept', 'vs', 'etc', 'esp', 'llb', 'md', 'bl', 'phd', 'ma', 'ba', 'miss', 'misses', 'mister', 'sir', 'esq', 'mstr', 'lit', 'fl', 'ex', 'eg', 'sep', 'sept', '..'];

},{}],11:[function(_dereq_,module,exports){
'use strict';

// wikipedia special terms lifted and augmented from parsoid parser april 2015
// (not even close to being complete)
var i18n = {
  files: ['файл', 'fitxer', 'soubor', 'datei', 'file', 'archivo', 'پرونده', 'tiedosto', 'mynd', "su'wret", 'fichier', 'bestand', 'датотека', 'dosya', 'fil'],
  images: ['image'],
  templates: ['шаблён', 'plantilla', 'šablona', 'vorlage', 'template', 'الگو', 'malline', 'snið', 'shablon', 'modèle', 'sjabloon', 'шаблон', 'şablon'],
  categories: ['катэгорыя', 'categoria', 'kategorie', 'category', 'categoría', 'رده', 'luokka', 'flokkur', 'kategoriya', 'catégorie', 'categorie', 'категорија', 'kategori', 'kategoria', 'تصنيف'],
  redirects: ['перанакіраваньне', 'redirect', 'přesměruj', 'weiterleitung', 'redirección', 'redireccion', 'تغییر_مسیر', 'تغییرمسیر', 'ohjaus', 'uudelleenohjaus', 'tilvísun', 'aýdaw', 'айдау', 'redirection', 'doorverwijzing', 'преусмери', 'преусмјери', 'yönlendi̇rme', 'yönlendi̇r', '重定向', 'redirección', 'redireccion', '重定向', 'yönlendirm?e?', 'تغییر_مسیر', 'تغییرمسیر', 'перанакіраваньне', 'yönlendirme'],
  specials: ['спэцыяльныя', 'especial', 'speciální', 'spezial', 'special', 'ویژه', 'toiminnot', 'kerfissíða', 'arnawlı', 'spécial', 'speciaal', 'посебно', 'özel'],
  users: ['удзельнік', 'usuari', 'uživatel', 'benutzer', 'user', 'usuario', 'کاربر', 'käyttäjä', 'notandi', 'paydalanıwshı', 'utilisateur', 'gebruiker', 'корисник', 'kullanıcı'],
  disambigs: ['disambig', //en
  'disambiguation', //en
  'dab', //en
  'disamb', //en
  'begriffsklärung', //de
  'ujednoznacznienie', //pl
  'doorverwijspagina', //nl
  '消歧义', //zh
  'desambiguación', //es
  'dubbelsinnig', //af
  'disambigua', //it
  'desambiguação', //pt
  'homonymie', //fr
  'неоднозначность', //ru
  'anlam ayrımı' //tr
  ],
  infoboxes: ['infobox', 'ficha', 'канадский', 'inligtingskas', 'inligtingskas3', //af
  'لغة', 'bilgi kutusu', //tr
  'yerleşim bilgi kutusu', 'infoboks' //nn, no
  ],
  sources: [
  //blacklist these headings, as they're not plain-text
  'references', 'see also', 'external links', 'further reading', 'notes et références', 'voir aussi', 'liens externes']
};

var dictionary = {};
Object.keys(i18n).forEach(function (k) {
  i18n[k].forEach(function (w) {
    dictionary[w] = true;
  });
});
i18n.dictionary = dictionary;

if (typeof module !== 'undefined' && module.exports) {
  module.exports = i18n;
}

},{}],12:[function(_dereq_,module,exports){
'use strict';

module.exports = {
  aa: {
    english_title: 'Afar',
    direction: 'ltr',
    local_title: 'Afar'
  },
  ab: {
    english_title: 'Abkhazian',
    direction: 'ltr',
    local_title: 'Аҧсуа'
  },
  af: {
    english_title: 'Afrikaans',
    direction: 'ltr',
    local_title: 'Afrikaans'
  },
  ak: {
    english_title: 'Akan',
    direction: 'ltr',
    local_title: 'Akana'
  },
  als: {
    english_title: 'Alemannic',
    direction: 'ltr',
    local_title: 'Alemannisch'
  },
  am: {
    english_title: 'Amharic',
    direction: 'ltr',
    local_title: 'አማርኛ'
  },
  an: {
    english_title: 'Aragonese',
    direction: 'ltr',
    local_title: 'Aragonés'
  },
  ang: {
    english_title: 'Anglo-Saxon',
    direction: 'ltr',
    local_title: 'Englisc'
  },
  ar: {
    english_title: 'Arabic',
    direction: 'rtl',
    local_title: 'العربية'
  },
  arc: {
    english_title: 'Aramaic',
    direction: 'rtl',
    local_title: 'ܣܘܪܬ'
  },
  as: {
    english_title: 'Assamese',
    direction: 'ltr',
    local_title: 'অসমীয়া'
  },
  ast: {
    english_title: 'Asturian',
    direction: 'ltr',
    local_title: 'Asturianu'
  },
  av: {
    english_title: 'Avar',
    direction: 'ltr',
    local_title: 'Авар'
  },
  ay: {
    english_title: 'Aymara',
    direction: 'ltr',
    local_title: 'Aymar'
  },
  az: {
    english_title: 'Azerbaijani',
    direction: 'ltr',
    local_title: 'Azərbaycanca'
  },
  ba: {
    english_title: 'Bashkir',
    direction: 'ltr',
    local_title: 'Башҡорт'
  },
  bar: {
    english_title: 'Bavarian',
    direction: 'ltr',
    local_title: 'Boarisch'
  },
  'bat-smg': {
    english_title: 'Samogitian',
    direction: 'ltr',
    local_title: 'Žemaitėška'
  },
  bcl: {
    english_title: 'Bikol',
    direction: 'ltr',
    local_title: 'Bikol'
  },
  be: {
    english_title: 'Belarusian',
    direction: 'ltr',
    local_title: 'Беларуская'
  },
  'be-x-old': {
    english_title: 'Belarusian',
    direction: '(Taraškievica)',
    local_title: 'ltr'
  },
  bg: {
    english_title: 'Bulgarian',
    direction: 'ltr',
    local_title: 'Български'
  },
  bh: {
    english_title: 'Bihari',
    direction: 'ltr',
    local_title: 'भोजपुरी'
  },
  bi: {
    english_title: 'Bislama',
    direction: 'ltr',
    local_title: 'Bislama'
  },
  bm: {
    english_title: 'Bambara',
    direction: 'ltr',
    local_title: 'Bamanankan'
  },
  bn: {
    english_title: 'Bengali',
    direction: 'ltr',
    local_title: 'বাংলা'
  },
  bo: {
    english_title: 'Tibetan',
    direction: 'ltr',
    local_title: 'བོད་ཡིག'
  },
  bpy: {
    english_title: 'Bishnupriya',
    direction: 'Manipuri',
    local_title: 'ltr'
  },
  br: {
    english_title: 'Breton',
    direction: 'ltr',
    local_title: 'Brezhoneg'
  },
  bs: {
    english_title: 'Bosnian',
    direction: 'ltr',
    local_title: 'Bosanski'
  },
  bug: {
    english_title: 'Buginese',
    direction: 'ltr',
    local_title: 'ᨅᨔ'
  },
  bxr: {
    english_title: 'Buriat',
    direction: '(Russia)',
    local_title: 'ltr'
  },
  ca: {
    english_title: 'Catalan',
    direction: 'ltr',
    local_title: 'Català'
  },
  cdo: {
    english_title: 'Min',
    direction: 'Dong',
    local_title: 'Chinese'
  },
  ce: {
    english_title: 'Chechen',
    direction: 'ltr',
    local_title: 'Нохчийн'
  },
  ceb: {
    english_title: 'Cebuano',
    direction: 'ltr',
    local_title: 'Sinugboanong'
  },
  ch: {
    english_title: 'Chamorro',
    direction: 'ltr',
    local_title: 'Chamoru'
  },
  cho: {
    english_title: 'Choctaw',
    direction: 'ltr',
    local_title: 'Choctaw'
  },
  chr: {
    english_title: 'Cherokee',
    direction: 'ltr',
    local_title: 'ᏣᎳᎩ'
  },
  chy: {
    english_title: 'Cheyenne',
    direction: 'ltr',
    local_title: 'Tsetsêhestâhese'
  },
  co: {
    english_title: 'Corsican',
    direction: 'ltr',
    local_title: 'Corsu'
  },
  cr: {
    english_title: 'Cree',
    direction: 'ltr',
    local_title: 'Nehiyaw'
  },
  cs: {
    english_title: 'Czech',
    direction: 'ltr',
    local_title: 'Česky'
  },
  csb: {
    english_title: 'Kashubian',
    direction: 'ltr',
    local_title: 'Kaszëbsczi'
  },
  cu: {
    english_title: 'Old',
    direction: 'Church',
    local_title: 'Slavonic'
  },
  cv: {
    english_title: 'Chuvash',
    direction: 'ltr',
    local_title: 'Чăваш'
  },
  cy: {
    english_title: 'Welsh',
    direction: 'ltr',
    local_title: 'Cymraeg'
  },
  da: {
    english_title: 'Danish',
    direction: 'ltr',
    local_title: 'Dansk'
  },
  de: {
    english_title: 'German',
    direction: 'ltr',
    local_title: 'Deutsch'
  },
  diq: {
    english_title: 'Dimli',
    direction: 'ltr',
    local_title: 'Zazaki'
  },
  dsb: {
    english_title: 'Lower',
    direction: 'Sorbian',
    local_title: 'ltr'
  },
  dv: {
    english_title: 'Divehi',
    direction: 'rtl',
    local_title: 'ދިވެހިބަސް'
  },
  dz: {
    english_title: 'Dzongkha',
    direction: 'ltr',
    local_title: 'ཇོང་ཁ'
  },
  ee: {
    english_title: 'Ewe',
    direction: 'ltr',
    local_title: 'Ɛʋɛ'
  },
  far: {
    english_title: 'Farsi',
    direction: 'ltr',
    local_title: 'فارسی'
  },
  el: {
    english_title: 'Greek',
    direction: 'ltr',
    local_title: 'Ελληνικά'
  },
  en: {
    english_title: 'English',
    direction: 'ltr',
    local_title: 'English'
  },
  eo: {
    english_title: 'Esperanto',
    direction: 'ltr',
    local_title: 'Esperanto'
  },
  es: {
    english_title: 'Spanish',
    direction: 'ltr',
    local_title: 'Español'
  },
  et: {
    english_title: 'Estonian',
    direction: 'ltr',
    local_title: 'Eesti'
  },
  eu: {
    english_title: 'Basque',
    direction: 'ltr',
    local_title: 'Euskara'
  },
  ext: {
    english_title: 'Extremaduran',
    direction: 'ltr',
    local_title: 'Estremeñu'
  },
  ff: {
    english_title: 'Peul',
    direction: 'ltr',
    local_title: 'Fulfulde'
  },
  fi: {
    english_title: 'Finnish',
    direction: 'ltr',
    local_title: 'Suomi'
  },
  'fiu-vro': {
    english_title: 'Võro',
    direction: 'ltr',
    local_title: 'Võro'
  },
  fj: {
    english_title: 'Fijian',
    direction: 'ltr',
    local_title: 'Na'
  },
  fo: {
    english_title: 'Faroese',
    direction: 'ltr',
    local_title: 'Føroyskt'
  },
  fr: {
    english_title: 'French',
    direction: 'ltr',
    local_title: 'Français'
  },
  frp: {
    english_title: 'Arpitan',
    direction: 'ltr',
    local_title: 'Arpitan'
  },
  fur: {
    english_title: 'Friulian',
    direction: 'ltr',
    local_title: 'Furlan'
  },
  fy: {
    english_title: 'West',
    direction: 'Frisian',
    local_title: 'ltr'
  },
  ga: {
    english_title: 'Irish',
    direction: 'ltr',
    local_title: 'Gaeilge'
  },
  gan: {
    english_title: 'Gan',
    direction: 'Chinese',
    local_title: 'ltr'
  },
  gd: {
    english_title: 'Scottish',
    direction: 'Gaelic',
    local_title: 'ltr'
  },
  gil: {
    english_title: 'Gilbertese',
    direction: 'ltr',
    local_title: 'Taetae'
  },
  gl: {
    english_title: 'Galician',
    direction: 'ltr',
    local_title: 'Galego'
  },
  gn: {
    english_title: 'Guarani',
    direction: 'ltr',
    local_title: "Avañe'ẽ"
  },
  got: {
    english_title: 'Gothic',
    direction: 'ltr',
    local_title: 'gutisk'
  },
  gu: {
    english_title: 'Gujarati',
    direction: 'ltr',
    local_title: 'ગુજરાતી'
  },
  gv: {
    english_title: 'Manx',
    direction: 'ltr',
    local_title: 'Gaelg'
  },
  ha: {
    english_title: 'Hausa',
    direction: 'rtl',
    local_title: 'هَوُسَ'
  },
  hak: {
    english_title: 'Hakka',
    direction: 'Chinese',
    local_title: 'ltr'
  },
  haw: {
    english_title: 'Hawaiian',
    direction: 'ltr',
    local_title: 'Hawai`i'
  },
  he: {
    english_title: 'Hebrew',
    direction: 'rtl',
    local_title: 'עברית'
  },
  hi: {
    english_title: 'Hindi',
    direction: 'ltr',
    local_title: 'हिन्दी'
  },
  ho: {
    english_title: 'Hiri',
    direction: 'Motu',
    local_title: 'ltr'
  },
  hr: {
    english_title: 'Croatian',
    direction: 'ltr',
    local_title: 'Hrvatski'
  },
  ht: {
    english_title: 'Haitian',
    direction: 'ltr',
    local_title: 'Krèyol'
  },
  hu: {
    english_title: 'Hungarian',
    direction: 'ltr',
    local_title: 'Magyar'
  },
  hy: {
    english_title: 'Armenian',
    direction: 'ltr',
    local_title: 'Հայերեն'
  },
  hz: {
    english_title: 'Herero',
    direction: 'ltr',
    local_title: 'Otsiherero'
  },
  ia: {
    english_title: 'Interlingua',
    direction: 'ltr',
    local_title: 'Interlingua'
  },
  id: {
    english_title: 'Indonesian',
    direction: 'ltr',
    local_title: 'Bahasa'
  },
  ie: {
    english_title: 'Interlingue',
    direction: 'ltr',
    local_title: 'Interlingue'
  },
  ig: {
    english_title: 'Igbo',
    direction: 'ltr',
    local_title: 'Igbo'
  },
  ii: {
    english_title: 'Sichuan',
    direction: 'Yi',
    local_title: 'ltr'
  },
  ik: {
    english_title: 'Inupiak',
    direction: 'ltr',
    local_title: 'Iñupiak'
  },
  ilo: {
    english_title: 'Ilokano',
    direction: 'ltr',
    local_title: 'Ilokano'
  },
  io: {
    english_title: 'Ido',
    direction: 'ltr',
    local_title: 'Ido'
  },
  is: {
    english_title: 'Icelandic',
    direction: 'ltr',
    local_title: 'Íslenska'
  },
  it: {
    english_title: 'Italian',
    direction: 'ltr',
    local_title: 'Italiano'
  },
  iu: {
    english_title: 'Inuktitut',
    direction: 'ltr',
    local_title: 'ᐃᓄᒃᑎᑐᑦ'
  },
  ja: {
    english_title: 'Japanese',
    direction: 'ltr',
    local_title: '日本語'
  },
  jbo: {
    english_title: 'Lojban',
    direction: 'ltr',
    local_title: 'Lojban'
  },
  jv: {
    english_title: 'Javanese',
    direction: 'ltr',
    local_title: 'Basa'
  },
  ka: {
    english_title: 'Georgian',
    direction: 'ltr',
    local_title: 'ქართული'
  },
  kg: {
    english_title: 'Kongo',
    direction: 'ltr',
    local_title: 'KiKongo'
  },
  ki: {
    english_title: 'Kikuyu',
    direction: 'ltr',
    local_title: 'Gĩkũyũ'
  },
  kj: {
    english_title: 'Kuanyama',
    direction: 'ltr',
    local_title: 'Kuanyama'
  },
  kk: {
    english_title: 'Kazakh',
    direction: 'ltr',
    local_title: 'Қазақша'
  },
  kl: {
    english_title: 'Greenlandic',
    direction: 'ltr',
    local_title: 'Kalaallisut'
  },
  km: {
    english_title: 'Cambodian',
    direction: 'ltr',
    local_title: 'ភាសាខ្មែរ'
  },
  kn: {
    english_title: 'Kannada',
    direction: 'ltr',
    local_title: 'ಕನ್ನಡ'
  },
  khw: {
    english_title: 'Khowar',
    direction: 'rtl',
    local_title: 'کھوار'
  },
  ko: {
    english_title: 'Korean',
    direction: 'ltr',
    local_title: '한국어'
  },
  kr: {
    english_title: 'Kanuri',
    direction: 'ltr',
    local_title: 'Kanuri'
  },
  ks: {
    english_title: 'Kashmiri',
    direction: 'rtl',
    local_title: 'कश्मीरी'
  },
  ksh: {
    english_title: 'Ripuarian',
    direction: 'ltr',
    local_title: 'Ripoarisch'
  },
  ku: {
    english_title: 'Kurdish',
    direction: 'rtl',
    local_title: 'Kurdî'
  },
  kv: {
    english_title: 'Komi',
    direction: 'ltr',
    local_title: 'Коми'
  },
  kw: {
    english_title: 'Cornish',
    direction: 'ltr',
    local_title: 'Kernewek'
  },
  ky: {
    english_title: 'Kirghiz',
    direction: 'ltr',
    local_title: 'Kırgızca'
  },
  la: {
    english_title: 'Latin',
    direction: 'ltr',
    local_title: 'Latina'
  },
  lad: {
    english_title: 'Ladino',
    direction: 'ltr',
    local_title: 'Dzhudezmo'
  },
  lan: {
    english_title: 'Lango',
    direction: 'ltr',
    local_title: 'Leb'
  },
  lb: {
    english_title: 'Luxembourgish',
    direction: 'ltr',
    local_title: 'Lëtzebuergesch'
  },
  lg: {
    english_title: 'Ganda',
    direction: 'ltr',
    local_title: 'Luganda'
  },
  li: {
    english_title: 'Limburgian',
    direction: 'ltr',
    local_title: 'Limburgs'
  },
  lij: {
    english_title: 'Ligurian',
    direction: 'ltr',
    local_title: 'Líguru'
  },
  lmo: {
    english_title: 'Lombard',
    direction: 'ltr',
    local_title: 'Lumbaart'
  },
  ln: {
    english_title: 'Lingala',
    direction: 'ltr',
    local_title: 'Lingála'
  },
  lo: {
    english_title: 'Laotian',
    direction: 'ltr',
    local_title: 'ລາວ'
  },
  lt: {
    english_title: 'Lithuanian',
    direction: 'ltr',
    local_title: 'Lietuvių'
  },
  lv: {
    english_title: 'Latvian',
    direction: 'ltr',
    local_title: 'Latviešu'
  },
  'map-bms': {
    english_title: 'Banyumasan',
    direction: 'ltr',
    local_title: 'Basa'
  },
  mg: {
    english_title: 'Malagasy',
    direction: 'ltr',
    local_title: 'Malagasy'
  },
  man: {
    english_title: 'Mandarin',
    direction: 'ltr',
    local_title: '官話'
  },
  mh: {
    english_title: 'Marshallese',
    direction: 'ltr',
    local_title: 'Kajin'
  },
  mi: {
    english_title: 'Maori',
    direction: 'ltr',
    local_title: 'Māori'
  },
  min: {
    english_title: 'Minangkabau',
    direction: 'ltr',
    local_title: 'Minangkabau'
  },
  mk: {
    english_title: 'Macedonian',
    direction: 'ltr',
    local_title: 'Македонски'
  },
  ml: {
    english_title: 'Malayalam',
    direction: 'ltr',
    local_title: 'മലയാളം'
  },
  mn: {
    english_title: 'Mongolian',
    direction: 'ltr',
    local_title: 'Монгол'
  },
  mo: {
    english_title: 'Moldovan',
    direction: 'ltr',
    local_title: 'Moldovenească'
  },
  mr: {
    english_title: 'Marathi',
    direction: 'ltr',
    local_title: 'मराठी'
  },
  ms: {
    english_title: 'Malay',
    direction: 'ltr',
    local_title: 'Bahasa'
  },
  mt: {
    english_title: 'Maltese',
    direction: 'ltr',
    local_title: 'bil-Malti'
  },
  mus: {
    english_title: 'Creek',
    direction: 'ltr',
    local_title: 'Muskogee'
  },
  my: {
    english_title: 'Burmese',
    direction: 'ltr',
    local_title: 'Myanmasa'
  },
  na: {
    english_title: 'Nauruan',
    direction: 'ltr',
    local_title: 'Dorerin'
  },
  nah: {
    english_title: 'Nahuatl',
    direction: 'ltr',
    local_title: 'Nahuatl'
  },
  nap: {
    english_title: 'Neapolitan',
    direction: 'ltr',
    local_title: 'Nnapulitano'
  },
  nd: {
    english_title: 'North',
    direction: 'Ndebele',
    local_title: 'ltr'
  },
  nds: {
    english_title: 'Low German',
    direction: 'ltr',
    local_title: 'Plattdüütsch'
  },
  'nds-nl': {
    english_title: 'Dutch',
    direction: 'Low',
    local_title: 'Saxon'
  },
  ne: {
    english_title: 'Nepali',
    direction: 'ltr',
    local_title: 'नेपाली'
  },
  new: {
    english_title: 'Newar',
    direction: 'ltr',
    local_title: 'नेपालभाषा'
  },
  ng: {
    english_title: 'Ndonga',
    direction: 'ltr',
    local_title: 'Oshiwambo'
  },
  nl: {
    english_title: 'Dutch',
    direction: 'ltr',
    local_title: 'Nederlands'
  },
  nn: {
    english_title: 'Norwegian',
    direction: 'Nynorsk',
    local_title: 'ltr'
  },
  no: {
    english_title: 'Norwegian',
    direction: 'ltr',
    local_title: 'Norsk'
  },
  nr: {
    english_title: 'South',
    direction: 'Ndebele',
    local_title: 'ltr'
  },
  nso: {
    english_title: 'Northern',
    direction: 'Sotho',
    local_title: 'ltr'
  },
  nrm: {
    english_title: 'Norman',
    direction: 'ltr',
    local_title: 'Nouormand'
  },
  nv: {
    english_title: 'Navajo',
    direction: 'ltr',
    local_title: 'Diné'
  },
  ny: {
    english_title: 'Chichewa',
    direction: 'ltr',
    local_title: 'Chi-Chewa'
  },
  oc: {
    english_title: 'Occitan',
    direction: 'ltr',
    local_title: 'Occitan'
  },
  oj: {
    english_title: 'Ojibwa',
    direction: 'ltr',
    local_title: 'ᐊᓂᔑᓈᐯᒧᐎᓐ'
  },
  om: {
    english_title: 'Oromo',
    direction: 'ltr',
    local_title: 'Oromoo'
  },
  or: {
    english_title: 'Oriya',
    direction: 'ltr',
    local_title: 'ଓଡ଼ିଆ'
  },
  os: {
    english_title: 'Ossetian',
    direction: 'ltr',
    local_title: 'Иронау'
  },
  pa: {
    english_title: 'Panjabi',
    direction: 'ltr',
    local_title: 'ਪੰਜਾਬੀ'
  },
  pag: {
    english_title: 'Pangasinan',
    direction: 'ltr',
    local_title: 'Pangasinan'
  },
  pam: {
    english_title: 'Kapampangan',
    direction: 'ltr',
    local_title: 'Kapampangan'
  },
  pap: {
    english_title: 'Papiamentu',
    direction: 'ltr',
    local_title: 'Papiamentu'
  },
  pdc: {
    english_title: 'Pennsylvania',
    direction: 'German',
    local_title: 'ltr'
  },
  pi: {
    english_title: 'Pali',
    direction: 'ltr',
    local_title: 'Pāli'
  },
  pih: {
    english_title: 'Norfolk',
    direction: 'ltr',
    local_title: 'Norfuk'
  },
  pl: {
    english_title: 'Polish',
    direction: 'ltr',
    local_title: 'Polski'
  },
  pms: {
    english_title: 'Piedmontese',
    direction: 'ltr',
    local_title: 'Piemontèis'
  },
  ps: {
    english_title: 'Pashto',
    direction: 'rtl',
    local_title: 'پښتو'
  },
  pt: {
    english_title: 'Portuguese',
    direction: 'ltr',
    local_title: 'Português'
  },
  qu: {
    english_title: 'Quechua',
    direction: 'ltr',
    local_title: 'Runa'
  },
  rm: {
    english_title: 'Raeto',
    direction: 'Romance',
    local_title: 'ltr'
  },
  rmy: {
    english_title: 'Romani',
    direction: 'ltr',
    local_title: 'Romani'
  },
  rn: {
    english_title: 'Kirundi',
    direction: 'ltr',
    local_title: 'Kirundi'
  },
  ro: {
    english_title: 'Romanian',
    direction: 'ltr',
    local_title: 'Română'
  },
  'roa-rup': {
    english_title: 'Aromanian',
    direction: 'ltr',
    local_title: 'Armâneashti'
  },
  ru: {
    english_title: 'Russian',
    direction: 'ltr',
    local_title: 'Русский'
  },
  rw: {
    english_title: 'Rwandi',
    direction: 'ltr',
    local_title: 'Kinyarwandi'
  },
  sa: {
    english_title: 'Sanskrit',
    direction: 'ltr',
    local_title: 'संस्कृतम्'
  },
  sc: {
    english_title: 'Sardinian',
    direction: 'ltr',
    local_title: 'Sardu'
  },
  scn: {
    english_title: 'Sicilian',
    direction: 'ltr',
    local_title: 'Sicilianu'
  },
  sco: {
    english_title: 'Scots',
    direction: 'ltr',
    local_title: 'Scots'
  },
  sd: {
    english_title: 'Sindhi',
    direction: 'ltr',
    local_title: 'सिनधि'
  },
  se: {
    english_title: 'Northern',
    direction: 'Sami',
    local_title: 'ltr'
  },
  sg: {
    english_title: 'Sango',
    direction: 'ltr',
    local_title: 'Sängö'
  },
  sh: {
    english_title: 'Serbo-Croatian',
    direction: 'ltr',
    local_title: 'Srpskohrvatski'
  },
  si: {
    english_title: 'Sinhalese',
    direction: 'ltr',
    local_title: 'සිංහල'
  },
  simple: {
    english_title: 'Simple',
    direction: 'English',
    local_title: 'ltr'
  },
  sk: {
    english_title: 'Slovak',
    direction: 'ltr',
    local_title: 'Slovenčina'
  },
  sl: {
    english_title: 'Slovenian',
    direction: 'ltr',
    local_title: 'Slovenščina'
  },
  sm: {
    english_title: 'Samoan',
    direction: 'ltr',
    local_title: 'Gagana'
  },
  sn: {
    english_title: 'Shona',
    direction: 'ltr',
    local_title: 'chiShona'
  },
  so: {
    english_title: 'Somalia',
    direction: 'ltr',
    local_title: 'Soomaaliga'
  },
  sq: {
    english_title: 'Albanian',
    direction: 'ltr',
    local_title: 'Shqip'
  },
  sr: {
    english_title: 'Serbian',
    direction: 'ltr',
    local_title: 'Српски'
  },
  ss: {
    english_title: 'Swati',
    direction: 'ltr',
    local_title: 'SiSwati'
  },
  st: {
    english_title: 'Southern',
    direction: 'Sotho',
    local_title: 'ltr'
  },
  su: {
    english_title: 'Sundanese',
    direction: 'ltr',
    local_title: 'Basa'
  },
  sv: {
    english_title: 'Swedish',
    direction: 'ltr',
    local_title: 'Svenska'
  },
  sw: {
    english_title: 'Swahili',
    direction: 'ltr',
    local_title: 'Kiswahili'
  },
  ta: {
    english_title: 'Tamil',
    direction: 'ltr',
    local_title: 'தமிழ்'
  },
  te: {
    english_title: 'Telugu',
    direction: 'ltr',
    local_title: 'తెలుగు'
  },
  tet: {
    english_title: 'Tetum',
    direction: 'ltr',
    local_title: 'Tetun'
  },
  tg: {
    english_title: 'Tajik',
    direction: 'ltr',
    local_title: 'Тоҷикӣ'
  },
  th: {
    english_title: 'Thai',
    direction: 'ltr',
    local_title: 'ไทย'
  },
  ti: {
    english_title: 'Tigrinya',
    direction: 'ltr',
    local_title: 'ትግርኛ'
  },
  tk: {
    english_title: 'Turkmen',
    direction: 'ltr',
    local_title: 'Туркмен'
  },
  tl: {
    english_title: 'Tagalog',
    direction: 'ltr',
    local_title: 'Tagalog'
  },
  tlh: {
    english_title: 'Klingon',
    direction: 'ltr',
    local_title: 'tlhIngan-Hol'
  },
  tn: {
    english_title: 'Tswana',
    direction: 'ltr',
    local_title: 'Setswana'
  },
  to: {
    english_title: 'Tonga',
    direction: 'ltr',
    local_title: 'Lea'
  },
  tpi: {
    english_title: 'Tok',
    direction: 'Pisin',
    local_title: 'ltr'
  },
  tr: {
    english_title: 'Turkish',
    direction: 'ltr',
    local_title: 'Türkçe'
  },
  ts: {
    english_title: 'Tsonga',
    direction: 'ltr',
    local_title: 'Xitsonga'
  },
  tt: {
    english_title: 'Tatar',
    direction: 'ltr',
    local_title: 'Tatarça'
  },
  tum: {
    english_title: 'Tumbuka',
    direction: 'ltr',
    local_title: 'chiTumbuka'
  },
  tw: {
    english_title: 'Twi',
    direction: 'ltr',
    local_title: 'Twi'
  },
  ty: {
    english_title: 'Tahitian',
    direction: 'ltr',
    local_title: 'Reo'
  },
  udm: {
    english_title: 'Udmurt',
    direction: 'ltr',
    local_title: 'Удмурт'
  },
  ug: {
    english_title: 'Uyghur',
    direction: 'ltr',
    local_title: 'Uyƣurqə'
  },
  uk: {
    english_title: 'Ukrainian',
    direction: 'ltr',
    local_title: 'Українська'
  },
  ur: {
    english_title: 'Urdu',
    direction: 'rtl',
    local_title: 'اردو'
  },
  uz: {
    english_title: 'Uzbek',
    direction: 'ltr',
    local_title: 'Ўзбек'
  },
  ve: {
    english_title: 'Venda',
    direction: 'ltr',
    local_title: 'Tshivenḓa'
  },
  vi: {
    english_title: 'Vietnamese',
    direction: 'ltr',
    local_title: 'Việtnam'
  },
  vec: {
    english_title: 'Venetian',
    direction: 'ltr',
    local_title: 'Vèneto'
  },
  vls: {
    english_title: 'West',
    direction: 'Flemish',
    local_title: 'ltr'
  },
  vo: {
    english_title: 'Volapük',
    direction: 'ltr',
    local_title: 'Volapük'
  },
  wa: {
    english_title: 'Walloon',
    direction: 'ltr',
    local_title: 'Walon'
  },
  war: {
    english_title: 'Waray-Waray',
    direction: 'ltr',
    local_title: 'Winaray'
  },
  wo: {
    english_title: 'Wolof',
    direction: 'ltr',
    local_title: 'Wollof'
  },
  xal: {
    english_title: 'Kalmyk',
    direction: 'ltr',
    local_title: 'Хальмг'
  },
  xh: {
    english_title: 'Xhosa',
    direction: 'ltr',
    local_title: 'isiXhosa'
  },
  yi: {
    english_title: 'Yiddish',
    direction: 'rtl',
    local_title: 'ייִדיש'
  },
  yo: {
    english_title: 'Yoruba',
    direction: 'ltr',
    local_title: 'Yorùbá'
  },
  za: {
    english_title: 'Zhuang',
    direction: 'ltr',
    local_title: 'Cuengh'
  },
  zh: {
    english_title: 'Chinese',
    direction: 'ltr',
    local_title: '中文'
  },
  'zh-classical': {
    english_title: 'Classical',
    direction: 'Chinese',
    local_title: 'ltr'
  },
  'zh-min-nan': {
    english_title: 'Minnan',
    direction: 'ltr',
    local_title: 'Bân-lâm-gú'
  },
  'zh-yue': {
    english_title: 'Cantonese',
    direction: 'ltr',
    local_title: '粵語'
  },
  zu: {
    english_title: 'Zulu',
    direction: 'ltr',
    local_title: 'isiZulu'
  }
};

},{}],13:[function(_dereq_,module,exports){
'use strict';

var _site_map;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

//from https://en.wikipedia.org/w/api.php?action=sitematrix&format=json
var site_map = (_site_map = {
  aawiki: 'https://aa.wikipedia.org',
  aawikipedia: 'https://aa.wikipedia.org',
  aawiktionary: 'https://aa.wiktionary.org',
  aawikibooks: 'https://aa.wikibooks.org',
  abwiki: 'https://ab.wikipedia.org',
  abwikipedia: 'https://ab.wikipedia.org',
  abwiktionary: 'https://ab.wiktionary.org',
  acewiki: 'https://ace.wikipedia.org',
  acewikipedia: 'https://ace.wikipedia.org',
  afwiki: 'https://af.wikipedia.org',
  afwikipedia: 'https://af.wikipedia.org',
  afwiktionary: 'https://af.wiktionary.org',
  afwikibooks: 'https://af.wikibooks.org',
  afwikiquote: 'https://af.wikiquote.org',
  akwiki: 'https://ak.wikipedia.org',
  akwikipedia: 'https://ak.wikipedia.org',
  akwiktionary: 'https://ak.wiktionary.org',
  akwikibooks: 'https://ak.wikibooks.org',
  alswiki: 'https://als.wikipedia.org',
  alswikipedia: 'https://als.wikipedia.org',
  alswiktionary: 'https://als.wiktionary.org',
  alswikibooks: 'https://als.wikibooks.org',
  alswikiquote: 'https://als.wikiquote.org',
  amwiki: 'https://am.wikipedia.org',
  amwikipedia: 'https://am.wikipedia.org',
  amwiktionary: 'https://am.wiktionary.org',
  amwikiquote: 'https://am.wikiquote.org',
  anwiki: 'https://an.wikipedia.org',
  anwikipedia: 'https://an.wikipedia.org',
  anwiktionary: 'https://an.wiktionary.org',
  angwiki: 'https://ang.wikipedia.org',
  angwikipedia: 'https://ang.wikipedia.org',
  angwiktionary: 'https://ang.wiktionary.org',
  angwikibooks: 'https://ang.wikibooks.org',
  angwikiquote: 'https://ang.wikiquote.org',
  angwikisource: 'https://ang.wikisource.org',
  arwiki: 'https://ar.wikipedia.org',
  arwikipedia: 'https://ar.wikipedia.org',
  arwiktionary: 'https://ar.wiktionary.org',
  arwikibooks: 'https://ar.wikibooks.org',
  arwikinews: 'https://ar.wikinews.org',
  arwikiquote: 'https://ar.wikiquote.org',
  arwikisource: 'https://ar.wikisource.org',
  arwikiversity: 'https://ar.wikiversity.org',
  arcwiki: 'https://arc.wikipedia.org',
  arcwikipedia: 'https://arc.wikipedia.org',
  arzwiki: 'https://arz.wikipedia.org',
  arzwikipedia: 'https://arz.wikipedia.org',
  aswiki: 'https://as.wikipedia.org',
  aswikipedia: 'https://as.wikipedia.org'
}, _defineProperty(_site_map, 'aswikipedia', 'https://ar.wikipedia.org'), _defineProperty(_site_map, 'aswiktionary', 'https://as.wiktionary.org'), _defineProperty(_site_map, 'aswikibooks', 'https://as.wikibooks.org'), _defineProperty(_site_map, 'aswikisource', 'https://as.wikisource.org'), _defineProperty(_site_map, 'astwiki', 'https://ast.wikipedia.org'), _defineProperty(_site_map, 'astwikipedia', 'https://ast.wikipedia.org'), _defineProperty(_site_map, 'astwiktionary', 'https://ast.wiktionary.org'), _defineProperty(_site_map, 'astwikibooks', 'https://ast.wikibooks.org'), _defineProperty(_site_map, 'astwikiquote', 'https://ast.wikiquote.org'), _defineProperty(_site_map, 'avwiki', 'https://av.wikipedia.org'), _defineProperty(_site_map, 'avwikipedia', 'https://av.wikipedia.org'), _defineProperty(_site_map, 'avwiktionary', 'https://av.wiktionary.org'), _defineProperty(_site_map, 'aywiki', 'https://ay.wikipedia.org'), _defineProperty(_site_map, 'aywikipedia', 'https://ay.wikipedia.org'), _defineProperty(_site_map, 'aywiktionary', 'https://ay.wiktionary.org'), _defineProperty(_site_map, 'aywikibooks', 'https://ay.wikibooks.org'), _defineProperty(_site_map, 'azwiki', 'https://az.wikipedia.org'), _defineProperty(_site_map, 'azwikipedia', 'https://az.wikipedia.org'), _defineProperty(_site_map, 'azwikipedia', 'https://ar.wikipedia.org'), _defineProperty(_site_map, 'azwiktionary', 'https://az.wiktionary.org'), _defineProperty(_site_map, 'azwikibooks', 'https://az.wikibooks.org'), _defineProperty(_site_map, 'azwikiquote', 'https://az.wikiquote.org'), _defineProperty(_site_map, 'azwikisource', 'https://az.wikisource.org'), _defineProperty(_site_map, 'bawiki', 'https://ba.wikipedia.org'), _defineProperty(_site_map, 'bawikipedia', 'https://ba.wikipedia.org'), _defineProperty(_site_map, 'bawikipedia', 'https://ar.wikipedia.org'), _defineProperty(_site_map, 'bawikibooks', 'https://ba.wikibooks.org'), _defineProperty(_site_map, 'barwiki', 'https://bar.wikipedia.org'), _defineProperty(_site_map, 'barwikipedia', 'https://bar.wikipedia.org'), _defineProperty(_site_map, 'bat_smgwiki', 'https://bat-smg.wikipedia.org'), _defineProperty(_site_map, 'bat_smgwikipedia', 'https://bat-smg.wikipedia.org'), _defineProperty(_site_map, 'bclwiki', 'https://bcl.wikipedia.org'), _defineProperty(_site_map, 'bclwikipedia', 'https://bcl.wikipedia.org'), _defineProperty(_site_map, 'bewiki', 'https://be.wikipedia.org'), _defineProperty(_site_map, 'bewikipedia', 'https://be.wikipedia.org'), _defineProperty(_site_map, 'bewiktionary', 'https://be.wiktionary.org'), _defineProperty(_site_map, 'bewikibooks', 'https://be.wikibooks.org'), _defineProperty(_site_map, 'bewikiquote', 'https://be.wikiquote.org'), _defineProperty(_site_map, 'bewikisource', 'https://be.wikisource.org'), _defineProperty(_site_map, 'be_x_oldwiki', 'https://be-x-old.wikipedia.org'), _defineProperty(_site_map, 'be_x_oldwikipedia', 'https://be-x-old.wikipedia.org'), _defineProperty(_site_map, 'bgwiki', 'https://bg.wikipedia.org'), _defineProperty(_site_map, 'bgwikipedia', 'https://bg.wikipedia.org'), _defineProperty(_site_map, 'bgwikipedia', 'https://ar.wikipedia.org'), _defineProperty(_site_map, 'bgwiktionary', 'https://bg.wiktionary.org'), _defineProperty(_site_map, 'bgwikibooks', 'https://bg.wikibooks.org'), _defineProperty(_site_map, 'bgwikinews', 'https://bg.wikinews.org'), _defineProperty(_site_map, 'bgwikiquote', 'https://bg.wikiquote.org'), _defineProperty(_site_map, 'bgwikisource', 'https://bg.wikisource.org'), _defineProperty(_site_map, 'bhwiki', 'https://bh.wikipedia.org'), _defineProperty(_site_map, 'bhwikipedia', 'https://bh.wikipedia.org'), _defineProperty(_site_map, 'bhwikipedia', 'https://ar.wikipedia.org'), _defineProperty(_site_map, 'bhwiktionary', 'https://bh.wiktionary.org'), _defineProperty(_site_map, 'biwiki', 'https://bi.wikipedia.org'), _defineProperty(_site_map, 'biwikipedia', 'https://bi.wikipedia.org'), _defineProperty(_site_map, 'biwiktionary', 'https://bi.wiktionary.org'), _defineProperty(_site_map, 'biwikibooks', 'https://bi.wikibooks.org'), _defineProperty(_site_map, 'bjnwiki', 'https://bjn.wikipedia.org'), _defineProperty(_site_map, 'bjnwikipedia', 'https://bjn.wikipedia.org'), _defineProperty(_site_map, 'bmwiki', 'https://bm.wikipedia.org'), _defineProperty(_site_map, 'bmwikipedia', 'https://bm.wikipedia.org'), _defineProperty(_site_map, 'bmwiktionary', 'https://bm.wiktionary.org'), _defineProperty(_site_map, 'bmwikibooks', 'https://bm.wikibooks.org'), _defineProperty(_site_map, 'bmwikiquote', 'https://bm.wikiquote.org'), _defineProperty(_site_map, 'bnwiki', 'https://bn.wikipedia.org'), _defineProperty(_site_map, 'bnwikipedia', 'https://bn.wikipedia.org'), _defineProperty(_site_map, 'bnwiktionary', 'https://bn.wiktionary.org'), _defineProperty(_site_map, 'bnwikibooks', 'https://bn.wikibooks.org'), _defineProperty(_site_map, 'bnwikisource', 'https://bn.wikisource.org'), _defineProperty(_site_map, 'bowiki', 'https://bo.wikipedia.org'), _defineProperty(_site_map, 'bowikipedia', 'https://bo.wikipedia.org'), _defineProperty(_site_map, 'bowiktionary', 'https://bo.wiktionary.org'), _defineProperty(_site_map, 'bowikibooks', 'https://bo.wikibooks.org'), _defineProperty(_site_map, 'bpywiki', 'https://bpy.wikipedia.org'), _defineProperty(_site_map, 'bpywikipedia', 'https://bpy.wikipedia.org'), _defineProperty(_site_map, 'brwiki', 'https://br.wikipedia.org'), _defineProperty(_site_map, 'brwikipedia', 'https://br.wikipedia.org'), _defineProperty(_site_map, 'brwiktionary', 'https://br.wiktionary.org'), _defineProperty(_site_map, 'brwikiquote', 'https://br.wikiquote.org'), _defineProperty(_site_map, 'brwikisource', 'https://br.wikisource.org'), _defineProperty(_site_map, 'bswiki', 'https://bs.wikipedia.org'), _defineProperty(_site_map, 'bswikipedia', 'https://bs.wikipedia.org'), _defineProperty(_site_map, 'bswiktionary', 'https://bs.wiktionary.org'), _defineProperty(_site_map, 'bswikibooks', 'https://bs.wikibooks.org'), _defineProperty(_site_map, 'bswikinews', 'https://bs.wikinews.org'), _defineProperty(_site_map, 'bswikiquote', 'https://bs.wikiquote.org'), _defineProperty(_site_map, 'bswikisource', 'https://bs.wikisource.org'), _defineProperty(_site_map, 'bugwiki', 'https://bug.wikipedia.org'), _defineProperty(_site_map, 'bugwikipedia', 'https://bug.wikipedia.org'), _defineProperty(_site_map, 'bxrwiki', 'https://bxr.wikipedia.org'), _defineProperty(_site_map, 'bxrwikipedia', 'https://bxr.wikipedia.org'), _defineProperty(_site_map, 'cawiki', 'https://ca.wikipedia.org'), _defineProperty(_site_map, 'cawikipedia', 'https://ca.wikipedia.org'), _defineProperty(_site_map, 'cawiktionary', 'https://ca.wiktionary.org'), _defineProperty(_site_map, 'cawikibooks', 'https://ca.wikibooks.org'), _defineProperty(_site_map, 'cawikinews', 'https://ca.wikinews.org'), _defineProperty(_site_map, 'cawikiquote', 'https://ca.wikiquote.org'), _defineProperty(_site_map, 'cawikisource', 'https://ca.wikisource.org'), _defineProperty(_site_map, 'cbk_zamwiki', 'https://cbk-zam.wikipedia.org'), _defineProperty(_site_map, 'cbk_zamwikipedia', 'https://cbk-zam.wikipedia.org'), _defineProperty(_site_map, 'cdowiki', 'https://cdo.wikipedia.org'), _defineProperty(_site_map, 'cdowikipedia', 'https://cdo.wikipedia.org'), _defineProperty(_site_map, 'cewiki', 'https://ce.wikipedia.org'), _defineProperty(_site_map, 'cewikipedia', 'https://ce.wikipedia.org'), _defineProperty(_site_map, 'cebwiki', 'https://ceb.wikipedia.org'), _defineProperty(_site_map, 'cebwikipedia', 'https://ceb.wikipedia.org'), _defineProperty(_site_map, 'chwiki', 'https://ch.wikipedia.org'), _defineProperty(_site_map, 'chwikipedia', 'https://ch.wikipedia.org'), _defineProperty(_site_map, 'chwiktionary', 'https://ch.wiktionary.org'), _defineProperty(_site_map, 'chwikibooks', 'https://ch.wikibooks.org'), _defineProperty(_site_map, 'chowiki', 'https://cho.wikipedia.org'), _defineProperty(_site_map, 'chowikipedia', 'https://cho.wikipedia.org'), _defineProperty(_site_map, 'chrwiki', 'https://chr.wikipedia.org'), _defineProperty(_site_map, 'chrwikipedia', 'https://chr.wikipedia.org'), _defineProperty(_site_map, 'chrwiktionary', 'https://chr.wiktionary.org'), _defineProperty(_site_map, 'chywiki', 'https://chy.wikipedia.org'), _defineProperty(_site_map, 'chywikipedia', 'https://chy.wikipedia.org'), _defineProperty(_site_map, 'ckbwiki', 'https://ckb.wikipedia.org'), _defineProperty(_site_map, 'ckbwikipedia', 'https://ckb.wikipedia.org'), _defineProperty(_site_map, 'cowiki', 'https://co.wikipedia.org'), _defineProperty(_site_map, 'cowikipedia', 'https://co.wikipedia.org'), _defineProperty(_site_map, 'cowiktionary', 'https://co.wiktionary.org'), _defineProperty(_site_map, 'cowikibooks', 'https://co.wikibooks.org'), _defineProperty(_site_map, 'cowikiquote', 'https://co.wikiquote.org'), _defineProperty(_site_map, 'crwiki', 'https://cr.wikipedia.org'), _defineProperty(_site_map, 'crwikipedia', 'https://cr.wikipedia.org'), _defineProperty(_site_map, 'crwiktionary', 'https://cr.wiktionary.org'), _defineProperty(_site_map, 'crwikiquote', 'https://cr.wikiquote.org'), _defineProperty(_site_map, 'crhwiki', 'https://crh.wikipedia.org'), _defineProperty(_site_map, 'crhwikipedia', 'https://crh.wikipedia.org'), _defineProperty(_site_map, 'cswiki', 'https://cs.wikipedia.org'), _defineProperty(_site_map, 'cswikipedia', 'https://cs.wikipedia.org'), _defineProperty(_site_map, 'cswiktionary', 'https://cs.wiktionary.org'), _defineProperty(_site_map, 'cswikibooks', 'https://cs.wikibooks.org'), _defineProperty(_site_map, 'cswikinews', 'https://cs.wikinews.org'), _defineProperty(_site_map, 'cswikiquote', 'https://cs.wikiquote.org'), _defineProperty(_site_map, 'cswikisource', 'https://cs.wikisource.org'), _defineProperty(_site_map, 'cswikiversity', 'https://cs.wikiversity.org'), _defineProperty(_site_map, 'csbwiki', 'https://csb.wikipedia.org'), _defineProperty(_site_map, 'csbwikipedia', 'https://csb.wikipedia.org'), _defineProperty(_site_map, 'csbwiktionary', 'https://csb.wiktionary.org'), _defineProperty(_site_map, 'cuwiki', 'https://cu.wikipedia.org'), _defineProperty(_site_map, 'cuwikipedia', 'https://cu.wikipedia.org'), _defineProperty(_site_map, 'cvwiki', 'https://cv.wikipedia.org'), _defineProperty(_site_map, 'cvwikipedia', 'https://cv.wikipedia.org'), _defineProperty(_site_map, 'cvwikibooks', 'https://cv.wikibooks.org'), _defineProperty(_site_map, 'cywiki', 'https://cy.wikipedia.org'), _defineProperty(_site_map, 'cywikipedia', 'https://cy.wikipedia.org'), _defineProperty(_site_map, 'cywiktionary', 'https://cy.wiktionary.org'), _defineProperty(_site_map, 'cywikibooks', 'https://cy.wikibooks.org'), _defineProperty(_site_map, 'cywikiquote', 'https://cy.wikiquote.org'), _defineProperty(_site_map, 'cywikisource', 'https://cy.wikisource.org'), _defineProperty(_site_map, 'dawiki', 'https://da.wikipedia.org'), _defineProperty(_site_map, 'dawikipedia', 'https://da.wikipedia.org'), _defineProperty(_site_map, 'dawiktionary', 'https://da.wiktionary.org'), _defineProperty(_site_map, 'dawikibooks', 'https://da.wikibooks.org'), _defineProperty(_site_map, 'dawikiquote', 'https://da.wikiquote.org'), _defineProperty(_site_map, 'dawikisource', 'https://da.wikisource.org'), _defineProperty(_site_map, 'dewiki', 'https://de.wikipedia.org'), _defineProperty(_site_map, 'dewikipedia', 'https://de.wikipedia.org'), _defineProperty(_site_map, 'dewiktionary', 'https://de.wiktionary.org'), _defineProperty(_site_map, 'dewikibooks', 'https://de.wikibooks.org'), _defineProperty(_site_map, 'dewikinews', 'https://de.wikinews.org'), _defineProperty(_site_map, 'dewikiquote', 'https://de.wikiquote.org'), _defineProperty(_site_map, 'dewikisource', 'https://de.wikisource.org'), _defineProperty(_site_map, 'dewikiversity', 'https://de.wikiversity.org'), _defineProperty(_site_map, 'dewikivoyage', 'https://de.wikivoyage.org'), _defineProperty(_site_map, 'diqwiki', 'https://diq.wikipedia.org'), _defineProperty(_site_map, 'diqwikipedia', 'https://diq.wikipedia.org'), _defineProperty(_site_map, 'dsbwiki', 'https://dsb.wikipedia.org'), _defineProperty(_site_map, 'dsbwikipedia', 'https://dsb.wikipedia.org'), _defineProperty(_site_map, 'dvwiki', 'https://dv.wikipedia.org'), _defineProperty(_site_map, 'dvwikipedia', 'https://dv.wikipedia.org'), _defineProperty(_site_map, 'dvwiktionary', 'https://dv.wiktionary.org'), _defineProperty(_site_map, 'dzwiki', 'https://dz.wikipedia.org'), _defineProperty(_site_map, 'dzwikipedia', 'https://dz.wikipedia.org'), _defineProperty(_site_map, 'dzwiktionary', 'https://dz.wiktionary.org'), _defineProperty(_site_map, 'eewiki', 'https://ee.wikipedia.org'), _defineProperty(_site_map, 'eewikipedia', 'https://ee.wikipedia.org'), _defineProperty(_site_map, 'elwiki', 'https://el.wikipedia.org'), _defineProperty(_site_map, 'elwikipedia', 'https://el.wikipedia.org'), _defineProperty(_site_map, 'elwiktionary', 'https://el.wiktionary.org'), _defineProperty(_site_map, 'elwikibooks', 'https://el.wikibooks.org'), _defineProperty(_site_map, 'elwikinews', 'https://el.wikinews.org'), _defineProperty(_site_map, 'elwikiquote', 'https://el.wikiquote.org'), _defineProperty(_site_map, 'elwikisource', 'https://el.wikisource.org'), _defineProperty(_site_map, 'elwikiversity', 'https://el.wikiversity.org'), _defineProperty(_site_map, 'elwikivoyage', 'https://el.wikivoyage.org'), _defineProperty(_site_map, 'emlwiki', 'https://eml.wikipedia.org'), _defineProperty(_site_map, 'emlwikipedia', 'https://eml.wikipedia.org'), _defineProperty(_site_map, 'enwiki', 'https://en.wikipedia.org'), _defineProperty(_site_map, 'enwikipedia', 'https://en.wikipedia.org'), _defineProperty(_site_map, 'enwiktionary', 'https://en.wiktionary.org'), _defineProperty(_site_map, 'enwikibooks', 'https://en.wikibooks.org'), _defineProperty(_site_map, 'enwikinews', 'https://en.wikinews.org'), _defineProperty(_site_map, 'enwikiquote', 'https://en.wikiquote.org'), _defineProperty(_site_map, 'enwikisource', 'https://en.wikisource.org'), _defineProperty(_site_map, 'enwikiversity', 'https://en.wikiversity.org'), _defineProperty(_site_map, 'enwikivoyage', 'https://en.wikivoyage.org'), _defineProperty(_site_map, 'eowiki', 'https://eo.wikipedia.org'), _defineProperty(_site_map, 'eowikipedia', 'https://eo.wikipedia.org'), _defineProperty(_site_map, 'eowiktionary', 'https://eo.wiktionary.org'), _defineProperty(_site_map, 'eowikibooks', 'https://eo.wikibooks.org'), _defineProperty(_site_map, 'eowikinews', 'https://eo.wikinews.org'), _defineProperty(_site_map, 'eowikiquote', 'https://eo.wikiquote.org'), _defineProperty(_site_map, 'eowikisource', 'https://eo.wikisource.org'), _defineProperty(_site_map, 'eswiki', 'https://es.wikipedia.org'), _defineProperty(_site_map, 'eswikipedia', 'https://es.wikipedia.org'), _defineProperty(_site_map, 'eswiktionary', 'https://es.wiktionary.org'), _defineProperty(_site_map, 'eswikibooks', 'https://es.wikibooks.org'), _defineProperty(_site_map, 'eswikinews', 'https://es.wikinews.org'), _defineProperty(_site_map, 'eswikiquote', 'https://es.wikiquote.org'), _defineProperty(_site_map, 'eswikisource', 'https://es.wikisource.org'), _defineProperty(_site_map, 'eswikiversity', 'https://es.wikiversity.org'), _defineProperty(_site_map, 'eswikivoyage', 'https://es.wikivoyage.org'), _defineProperty(_site_map, 'etwiki', 'https://et.wikipedia.org'), _defineProperty(_site_map, 'etwikipedia', 'https://et.wikipedia.org'), _defineProperty(_site_map, 'etwiktionary', 'https://et.wiktionary.org'), _defineProperty(_site_map, 'etwikibooks', 'https://et.wikibooks.org'), _defineProperty(_site_map, 'etwikiquote', 'https://et.wikiquote.org'), _defineProperty(_site_map, 'etwikisource', 'https://et.wikisource.org'), _defineProperty(_site_map, 'euwiki', 'https://eu.wikipedia.org'), _defineProperty(_site_map, 'euwikipedia', 'https://eu.wikipedia.org'), _defineProperty(_site_map, 'euwiktionary', 'https://eu.wiktionary.org'), _defineProperty(_site_map, 'euwikibooks', 'https://eu.wikibooks.org'), _defineProperty(_site_map, 'euwikiquote', 'https://eu.wikiquote.org'), _defineProperty(_site_map, 'extwiki', 'https://ext.wikipedia.org'), _defineProperty(_site_map, 'extwikipedia', 'https://ext.wikipedia.org'), _defineProperty(_site_map, 'fawiki', 'https://fa.wikipedia.org'), _defineProperty(_site_map, 'fawikipedia', 'https://fa.wikipedia.org'), _defineProperty(_site_map, 'fawiktionary', 'https://fa.wiktionary.org'), _defineProperty(_site_map, 'fawikibooks', 'https://fa.wikibooks.org'), _defineProperty(_site_map, 'fawikinews', 'https://fa.wikinews.org'), _defineProperty(_site_map, 'fawikiquote', 'https://fa.wikiquote.org'), _defineProperty(_site_map, 'fawikisource', 'https://fa.wikisource.org'), _defineProperty(_site_map, 'fawikivoyage', 'https://fa.wikivoyage.org'), _defineProperty(_site_map, 'ffwiki', 'https://ff.wikipedia.org'), _defineProperty(_site_map, 'ffwikipedia', 'https://ff.wikipedia.org'), _defineProperty(_site_map, 'fiwiki', 'https://fi.wikipedia.org'), _defineProperty(_site_map, 'fiwikipedia', 'https://fi.wikipedia.org'), _defineProperty(_site_map, 'fiwiktionary', 'https://fi.wiktionary.org'), _defineProperty(_site_map, 'fiwikibooks', 'https://fi.wikibooks.org'), _defineProperty(_site_map, 'fiwikinews', 'https://fi.wikinews.org'), _defineProperty(_site_map, 'fiwikiquote', 'https://fi.wikiquote.org'), _defineProperty(_site_map, 'fiwikisource', 'https://fi.wikisource.org'), _defineProperty(_site_map, 'fiwikiversity', 'https://fi.wikiversity.org'), _defineProperty(_site_map, 'fiu_vrowiki', 'https://fiu-vro.wikipedia.org'), _defineProperty(_site_map, 'fiu_vrowikipedia', 'https://fiu-vro.wikipedia.org'), _defineProperty(_site_map, 'fjwiki', 'https://fj.wikipedia.org'), _defineProperty(_site_map, 'fjwikipedia', 'https://fj.wikipedia.org'), _defineProperty(_site_map, 'fjwiktionary', 'https://fj.wiktionary.org'), _defineProperty(_site_map, 'fowiki', 'https://fo.wikipedia.org'), _defineProperty(_site_map, 'fowikipedia', 'https://fo.wikipedia.org'), _defineProperty(_site_map, 'fowiktionary', 'https://fo.wiktionary.org'), _defineProperty(_site_map, 'fowikisource', 'https://fo.wikisource.org'), _defineProperty(_site_map, 'frwiki', 'https://fr.wikipedia.org'), _defineProperty(_site_map, 'frwikipedia', 'https://fr.wikipedia.org'), _defineProperty(_site_map, 'frwiktionary', 'https://fr.wiktionary.org'), _defineProperty(_site_map, 'frwikibooks', 'https://fr.wikibooks.org'), _defineProperty(_site_map, 'frwikinews', 'https://fr.wikinews.org'), _defineProperty(_site_map, 'frwikiquote', 'https://fr.wikiquote.org'), _defineProperty(_site_map, 'frwikisource', 'https://fr.wikisource.org'), _defineProperty(_site_map, 'frwikiversity', 'https://fr.wikiversity.org'), _defineProperty(_site_map, 'frwikivoyage', 'https://fr.wikivoyage.org'), _defineProperty(_site_map, 'frpwiki', 'https://frp.wikipedia.org'), _defineProperty(_site_map, 'frpwikipedia', 'https://frp.wikipedia.org'), _defineProperty(_site_map, 'frrwiki', 'https://frr.wikipedia.org'), _defineProperty(_site_map, 'frrwikipedia', 'https://frr.wikipedia.org'), _defineProperty(_site_map, 'furwiki', 'https://fur.wikipedia.org'), _defineProperty(_site_map, 'furwikipedia', 'https://fur.wikipedia.org'), _defineProperty(_site_map, 'fywiki', 'https://fy.wikipedia.org'), _defineProperty(_site_map, 'fywikipedia', 'https://fy.wikipedia.org'), _defineProperty(_site_map, 'fywiktionary', 'https://fy.wiktionary.org'), _defineProperty(_site_map, 'fywikibooks', 'https://fy.wikibooks.org'), _defineProperty(_site_map, 'gawiki', 'https://ga.wikipedia.org'), _defineProperty(_site_map, 'gawikipedia', 'https://ga.wikipedia.org'), _defineProperty(_site_map, 'gawiktionary', 'https://ga.wiktionary.org'), _defineProperty(_site_map, 'gawikibooks', 'https://ga.wikibooks.org'), _defineProperty(_site_map, 'gawikiquote', 'https://ga.wikiquote.org'), _defineProperty(_site_map, 'gagwiki', 'https://gag.wikipedia.org'), _defineProperty(_site_map, 'gagwikipedia', 'https://gag.wikipedia.org'), _defineProperty(_site_map, 'ganwiki', 'https://gan.wikipedia.org'), _defineProperty(_site_map, 'ganwikipedia', 'https://gan.wikipedia.org'), _defineProperty(_site_map, 'gdwiki', 'https://gd.wikipedia.org'), _defineProperty(_site_map, 'gdwikipedia', 'https://gd.wikipedia.org'), _defineProperty(_site_map, 'gdwiktionary', 'https://gd.wiktionary.org'), _defineProperty(_site_map, 'glwiki', 'https://gl.wikipedia.org'), _defineProperty(_site_map, 'glwikipedia', 'https://gl.wikipedia.org'), _defineProperty(_site_map, 'glwiktionary', 'https://gl.wiktionary.org'), _defineProperty(_site_map, 'glwikibooks', 'https://gl.wikibooks.org'), _defineProperty(_site_map, 'glwikiquote', 'https://gl.wikiquote.org'), _defineProperty(_site_map, 'glwikisource', 'https://gl.wikisource.org'), _defineProperty(_site_map, 'glkwiki', 'https://glk.wikipedia.org'), _defineProperty(_site_map, 'glkwikipedia', 'https://glk.wikipedia.org'), _defineProperty(_site_map, 'gnwiki', 'https://gn.wikipedia.org'), _defineProperty(_site_map, 'gnwikipedia', 'https://gn.wikipedia.org'), _defineProperty(_site_map, 'gnwiktionary', 'https://gn.wiktionary.org'), _defineProperty(_site_map, 'gnwikibooks', 'https://gn.wikibooks.org'), _defineProperty(_site_map, 'gotwiki', 'https://got.wikipedia.org'), _defineProperty(_site_map, 'gotwikipedia', 'https://got.wikipedia.org'), _defineProperty(_site_map, 'gotwikibooks', 'https://got.wikibooks.org'), _defineProperty(_site_map, 'guwiki', 'https://gu.wikipedia.org'), _defineProperty(_site_map, 'guwikipedia', 'https://gu.wikipedia.org'), _defineProperty(_site_map, 'guwiktionary', 'https://gu.wiktionary.org'), _defineProperty(_site_map, 'guwikibooks', 'https://gu.wikibooks.org'), _defineProperty(_site_map, 'guwikiquote', 'https://gu.wikiquote.org'), _defineProperty(_site_map, 'guwikisource', 'https://gu.wikisource.org'), _defineProperty(_site_map, 'gvwiki', 'https://gv.wikipedia.org'), _defineProperty(_site_map, 'gvwikipedia', 'https://gv.wikipedia.org'), _defineProperty(_site_map, 'gvwiktionary', 'https://gv.wiktionary.org'), _defineProperty(_site_map, 'hawiki', 'https://ha.wikipedia.org'), _defineProperty(_site_map, 'hawikipedia', 'https://ha.wikipedia.org'), _defineProperty(_site_map, 'hawiktionary', 'https://ha.wiktionary.org'), _defineProperty(_site_map, 'hakwiki', 'https://hak.wikipedia.org'), _defineProperty(_site_map, 'hakwikipedia', 'https://hak.wikipedia.org'), _defineProperty(_site_map, 'hawwiki', 'https://haw.wikipedia.org'), _defineProperty(_site_map, 'hawwikipedia', 'https://haw.wikipedia.org'), _defineProperty(_site_map, 'hewiki', 'https://he.wikipedia.org'), _defineProperty(_site_map, 'hewikipedia', 'https://he.wikipedia.org'), _defineProperty(_site_map, 'hewiktionary', 'https://he.wiktionary.org'), _defineProperty(_site_map, 'hewikibooks', 'https://he.wikibooks.org'), _defineProperty(_site_map, 'hewikinews', 'https://he.wikinews.org'), _defineProperty(_site_map, 'hewikiquote', 'https://he.wikiquote.org'), _defineProperty(_site_map, 'hewikisource', 'https://he.wikisource.org'), _defineProperty(_site_map, 'hewikivoyage', 'https://he.wikivoyage.org'), _defineProperty(_site_map, 'hiwiki', 'https://hi.wikipedia.org'), _defineProperty(_site_map, 'hiwikipedia', 'https://hi.wikipedia.org'), _defineProperty(_site_map, 'hiwiktionary', 'https://hi.wiktionary.org'), _defineProperty(_site_map, 'hiwikibooks', 'https://hi.wikibooks.org'), _defineProperty(_site_map, 'hiwikiquote', 'https://hi.wikiquote.org'), _defineProperty(_site_map, 'hifwiki', 'https://hif.wikipedia.org'), _defineProperty(_site_map, 'hifwikipedia', 'https://hif.wikipedia.org'), _defineProperty(_site_map, 'howiki', 'https://ho.wikipedia.org'), _defineProperty(_site_map, 'howikipedia', 'https://ho.wikipedia.org'), _defineProperty(_site_map, 'hrwiki', 'https://hr.wikipedia.org'), _defineProperty(_site_map, 'hrwikipedia', 'https://hr.wikipedia.org'), _defineProperty(_site_map, 'hrwiktionary', 'https://hr.wiktionary.org'), _defineProperty(_site_map, 'hrwikibooks', 'https://hr.wikibooks.org'), _defineProperty(_site_map, 'hrwikiquote', 'https://hr.wikiquote.org'), _defineProperty(_site_map, 'hrwikisource', 'https://hr.wikisource.org'), _defineProperty(_site_map, 'hsbwiki', 'https://hsb.wikipedia.org'), _defineProperty(_site_map, 'hsbwikipedia', 'https://hsb.wikipedia.org'), _defineProperty(_site_map, 'hsbwiktionary', 'https://hsb.wiktionary.org'), _defineProperty(_site_map, 'htwiki', 'https://ht.wikipedia.org'), _defineProperty(_site_map, 'htwikipedia', 'https://ht.wikipedia.org'), _defineProperty(_site_map, 'htwikisource', 'https://ht.wikisource.org'), _defineProperty(_site_map, 'huwiki', 'https://hu.wikipedia.org'), _defineProperty(_site_map, 'huwikipedia', 'https://hu.wikipedia.org'), _defineProperty(_site_map, 'huwiktionary', 'https://hu.wiktionary.org'), _defineProperty(_site_map, 'huwikibooks', 'https://hu.wikibooks.org'), _defineProperty(_site_map, 'huwikinews', 'https://hu.wikinews.org'), _defineProperty(_site_map, 'huwikiquote', 'https://hu.wikiquote.org'), _defineProperty(_site_map, 'huwikisource', 'https://hu.wikisource.org'), _defineProperty(_site_map, 'hywiki', 'https://hy.wikipedia.org'), _defineProperty(_site_map, 'hywikipedia', 'https://hy.wikipedia.org'), _defineProperty(_site_map, 'hywiktionary', 'https://hy.wiktionary.org'), _defineProperty(_site_map, 'hywikibooks', 'https://hy.wikibooks.org'), _defineProperty(_site_map, 'hywikiquote', 'https://hy.wikiquote.org'), _defineProperty(_site_map, 'hywikisource', 'https://hy.wikisource.org'), _defineProperty(_site_map, 'hzwiki', 'https://hz.wikipedia.org'), _defineProperty(_site_map, 'hzwikipedia', 'https://hz.wikipedia.org'), _defineProperty(_site_map, 'iawiki', 'https://ia.wikipedia.org'), _defineProperty(_site_map, 'iawikipedia', 'https://ia.wikipedia.org'), _defineProperty(_site_map, 'iawiktionary', 'https://ia.wiktionary.org'), _defineProperty(_site_map, 'iawikibooks', 'https://ia.wikibooks.org'), _defineProperty(_site_map, 'idwiki', 'https://id.wikipedia.org'), _defineProperty(_site_map, 'idwikipedia', 'https://id.wikipedia.org'), _defineProperty(_site_map, 'idwiktionary', 'https://id.wiktionary.org'), _defineProperty(_site_map, 'idwikibooks', 'https://id.wikibooks.org'), _defineProperty(_site_map, 'idwikiquote', 'https://id.wikiquote.org'), _defineProperty(_site_map, 'idwikisource', 'https://id.wikisource.org'), _defineProperty(_site_map, 'iewiki', 'https://ie.wikipedia.org'), _defineProperty(_site_map, 'iewikipedia', 'https://ie.wikipedia.org'), _defineProperty(_site_map, 'iewiktionary', 'https://ie.wiktionary.org'), _defineProperty(_site_map, 'iewikibooks', 'https://ie.wikibooks.org'), _defineProperty(_site_map, 'igwiki', 'https://ig.wikipedia.org'), _defineProperty(_site_map, 'igwikipedia', 'https://ig.wikipedia.org'), _defineProperty(_site_map, 'iiwiki', 'https://ii.wikipedia.org'), _defineProperty(_site_map, 'iiwikipedia', 'https://ii.wikipedia.org'), _defineProperty(_site_map, 'ikwiki', 'https://ik.wikipedia.org'), _defineProperty(_site_map, 'ikwikipedia', 'https://ik.wikipedia.org'), _defineProperty(_site_map, 'ikwiktionary', 'https://ik.wiktionary.org'), _defineProperty(_site_map, 'ilowiki', 'https://ilo.wikipedia.org'), _defineProperty(_site_map, 'ilowikipedia', 'https://ilo.wikipedia.org'), _defineProperty(_site_map, 'iowiki', 'https://io.wikipedia.org'), _defineProperty(_site_map, 'iowikipedia', 'https://io.wikipedia.org'), _defineProperty(_site_map, 'iowiktionary', 'https://io.wiktionary.org'), _defineProperty(_site_map, 'iswiki', 'https://is.wikipedia.org'), _defineProperty(_site_map, 'iswikipedia', 'https://is.wikipedia.org'), _defineProperty(_site_map, 'iswiktionary', 'https://is.wiktionary.org'), _defineProperty(_site_map, 'iswikibooks', 'https://is.wikibooks.org'), _defineProperty(_site_map, 'iswikiquote', 'https://is.wikiquote.org'), _defineProperty(_site_map, 'iswikisource', 'https://is.wikisource.org'), _defineProperty(_site_map, 'itwiki', 'https://it.wikipedia.org'), _defineProperty(_site_map, 'itwikipedia', 'https://it.wikipedia.org'), _defineProperty(_site_map, 'itwiktionary', 'https://it.wiktionary.org'), _defineProperty(_site_map, 'itwikibooks', 'https://it.wikibooks.org'), _defineProperty(_site_map, 'itwikinews', 'https://it.wikinews.org'), _defineProperty(_site_map, 'itwikiquote', 'https://it.wikiquote.org'), _defineProperty(_site_map, 'itwikisource', 'https://it.wikisource.org'), _defineProperty(_site_map, 'itwikiversity', 'https://it.wikiversity.org'), _defineProperty(_site_map, 'itwikivoyage', 'https://it.wikivoyage.org'), _defineProperty(_site_map, 'iuwiki', 'https://iu.wikipedia.org'), _defineProperty(_site_map, 'iuwikipedia', 'https://iu.wikipedia.org'), _defineProperty(_site_map, 'iuwiktionary', 'https://iu.wiktionary.org'), _defineProperty(_site_map, 'jawiki', 'https://ja.wikipedia.org'), _defineProperty(_site_map, 'jawikipedia', 'https://ja.wikipedia.org'), _defineProperty(_site_map, 'jawiktionary', 'https://ja.wiktionary.org'), _defineProperty(_site_map, 'jawikibooks', 'https://ja.wikibooks.org'), _defineProperty(_site_map, 'jawikinews', 'https://ja.wikinews.org'), _defineProperty(_site_map, 'jawikiquote', 'https://ja.wikiquote.org'), _defineProperty(_site_map, 'jawikisource', 'https://ja.wikisource.org'), _defineProperty(_site_map, 'jawikiversity', 'https://ja.wikiversity.org'), _defineProperty(_site_map, 'jbowiki', 'https://jbo.wikipedia.org'), _defineProperty(_site_map, 'jbowikipedia', 'https://jbo.wikipedia.org'), _defineProperty(_site_map, 'jbowiktionary', 'https://jbo.wiktionary.org'), _defineProperty(_site_map, 'jvwiki', 'https://jv.wikipedia.org'), _defineProperty(_site_map, 'jvwikipedia', 'https://jv.wikipedia.org'), _defineProperty(_site_map, 'jvwiktionary', 'https://jv.wiktionary.org'), _defineProperty(_site_map, 'kawiki', 'https://ka.wikipedia.org'), _defineProperty(_site_map, 'kawikipedia', 'https://ka.wikipedia.org'), _defineProperty(_site_map, 'kawiktionary', 'https://ka.wiktionary.org'), _defineProperty(_site_map, 'kawikibooks', 'https://ka.wikibooks.org'), _defineProperty(_site_map, 'kawikiquote', 'https://ka.wikiquote.org'), _defineProperty(_site_map, 'kaawiki', 'https://kaa.wikipedia.org'), _defineProperty(_site_map, 'kaawikipedia', 'https://kaa.wikipedia.org'), _defineProperty(_site_map, 'kabwiki', 'https://kab.wikipedia.org'), _defineProperty(_site_map, 'kabwikipedia', 'https://kab.wikipedia.org'), _defineProperty(_site_map, 'kbdwiki', 'https://kbd.wikipedia.org'), _defineProperty(_site_map, 'kbdwikipedia', 'https://kbd.wikipedia.org'), _defineProperty(_site_map, 'kgwiki', 'https://kg.wikipedia.org'), _defineProperty(_site_map, 'kgwikipedia', 'https://kg.wikipedia.org'), _defineProperty(_site_map, 'kiwiki', 'https://ki.wikipedia.org'), _defineProperty(_site_map, 'kiwikipedia', 'https://ki.wikipedia.org'), _defineProperty(_site_map, 'kjwiki', 'https://kj.wikipedia.org'), _defineProperty(_site_map, 'kjwikipedia', 'https://kj.wikipedia.org'), _defineProperty(_site_map, 'kkwiki', 'https://kk.wikipedia.org'), _defineProperty(_site_map, 'kkwikipedia', 'https://kk.wikipedia.org'), _defineProperty(_site_map, 'kkwiktionary', 'https://kk.wiktionary.org'), _defineProperty(_site_map, 'kkwikibooks', 'https://kk.wikibooks.org'), _defineProperty(_site_map, 'kkwikiquote', 'https://kk.wikiquote.org'), _defineProperty(_site_map, 'klwiki', 'https://kl.wikipedia.org'), _defineProperty(_site_map, 'klwikipedia', 'https://kl.wikipedia.org'), _defineProperty(_site_map, 'klwiktionary', 'https://kl.wiktionary.org'), _defineProperty(_site_map, 'kmwiki', 'https://km.wikipedia.org'), _defineProperty(_site_map, 'kmwikipedia', 'https://km.wikipedia.org'), _defineProperty(_site_map, 'kmwiktionary', 'https://km.wiktionary.org'), _defineProperty(_site_map, 'kmwikibooks', 'https://km.wikibooks.org'), _defineProperty(_site_map, 'knwiki', 'https://kn.wikipedia.org'), _defineProperty(_site_map, 'knwikipedia', 'https://kn.wikipedia.org'), _defineProperty(_site_map, 'knwiktionary', 'https://kn.wiktionary.org'), _defineProperty(_site_map, 'knwikibooks', 'https://kn.wikibooks.org'), _defineProperty(_site_map, 'knwikiquote', 'https://kn.wikiquote.org'), _defineProperty(_site_map, 'knwikisource', 'https://kn.wikisource.org'), _defineProperty(_site_map, 'kowiki', 'https://ko.wikipedia.org'), _defineProperty(_site_map, 'kowikipedia', 'https://ko.wikipedia.org'), _defineProperty(_site_map, 'kowiktionary', 'https://ko.wiktionary.org'), _defineProperty(_site_map, 'kowikibooks', 'https://ko.wikibooks.org'), _defineProperty(_site_map, 'kowikinews', 'https://ko.wikinews.org'), _defineProperty(_site_map, 'kowikiquote', 'https://ko.wikiquote.org'), _defineProperty(_site_map, 'kowikisource', 'https://ko.wikisource.org'), _defineProperty(_site_map, 'kowikiversity', 'https://ko.wikiversity.org'), _defineProperty(_site_map, 'koiwiki', 'https://koi.wikipedia.org'), _defineProperty(_site_map, 'koiwikipedia', 'https://koi.wikipedia.org'), _defineProperty(_site_map, 'krwiki', 'https://kr.wikipedia.org'), _defineProperty(_site_map, 'krwikipedia', 'https://kr.wikipedia.org'), _defineProperty(_site_map, 'krwikiquote', 'https://kr.wikiquote.org'), _defineProperty(_site_map, 'krcwiki', 'https://krc.wikipedia.org'), _defineProperty(_site_map, 'krcwikipedia', 'https://krc.wikipedia.org'), _defineProperty(_site_map, 'kswiki', 'https://ks.wikipedia.org'), _defineProperty(_site_map, 'kswikipedia', 'https://ks.wikipedia.org'), _defineProperty(_site_map, 'kswiktionary', 'https://ks.wiktionary.org'), _defineProperty(_site_map, 'kswikibooks', 'https://ks.wikibooks.org'), _defineProperty(_site_map, 'kswikiquote', 'https://ks.wikiquote.org'), _defineProperty(_site_map, 'kshwiki', 'https://ksh.wikipedia.org'), _defineProperty(_site_map, 'kshwikipedia', 'https://ksh.wikipedia.org'), _defineProperty(_site_map, 'kuwiki', 'https://ku.wikipedia.org'), _defineProperty(_site_map, 'kuwikipedia', 'https://ku.wikipedia.org'), _defineProperty(_site_map, 'kuwiktionary', 'https://ku.wiktionary.org'), _defineProperty(_site_map, 'kuwikibooks', 'https://ku.wikibooks.org'), _defineProperty(_site_map, 'kuwikiquote', 'https://ku.wikiquote.org'), _defineProperty(_site_map, 'kvwiki', 'https://kv.wikipedia.org'), _defineProperty(_site_map, 'kvwikipedia', 'https://kv.wikipedia.org'), _defineProperty(_site_map, 'kwwiki', 'https://kw.wikipedia.org'), _defineProperty(_site_map, 'kwwikipedia', 'https://kw.wikipedia.org'), _defineProperty(_site_map, 'kwwiktionary', 'https://kw.wiktionary.org'), _defineProperty(_site_map, 'kwwikiquote', 'https://kw.wikiquote.org'), _defineProperty(_site_map, 'kywiki', 'https://ky.wikipedia.org'), _defineProperty(_site_map, 'kywikipedia', 'https://ky.wikipedia.org'), _defineProperty(_site_map, 'kywiktionary', 'https://ky.wiktionary.org'), _defineProperty(_site_map, 'kywikibooks', 'https://ky.wikibooks.org'), _defineProperty(_site_map, 'kywikiquote', 'https://ky.wikiquote.org'), _defineProperty(_site_map, 'lawiki', 'https://la.wikipedia.org'), _defineProperty(_site_map, 'lawikipedia', 'https://la.wikipedia.org'), _defineProperty(_site_map, 'lawiktionary', 'https://la.wiktionary.org'), _defineProperty(_site_map, 'lawikibooks', 'https://la.wikibooks.org'), _defineProperty(_site_map, 'lawikiquote', 'https://la.wikiquote.org'), _defineProperty(_site_map, 'lawikisource', 'https://la.wikisource.org'), _defineProperty(_site_map, 'ladwiki', 'https://lad.wikipedia.org'), _defineProperty(_site_map, 'ladwikipedia', 'https://lad.wikipedia.org'), _defineProperty(_site_map, 'lbwiki', 'https://lb.wikipedia.org'), _defineProperty(_site_map, 'lbwikipedia', 'https://lb.wikipedia.org'), _defineProperty(_site_map, 'lbwiktionary', 'https://lb.wiktionary.org'), _defineProperty(_site_map, 'lbwikibooks', 'https://lb.wikibooks.org'), _defineProperty(_site_map, 'lbwikiquote', 'https://lb.wikiquote.org'), _defineProperty(_site_map, 'lbewiki', 'https://lbe.wikipedia.org'), _defineProperty(_site_map, 'lbewikipedia', 'https://lbe.wikipedia.org'), _defineProperty(_site_map, 'lezwiki', 'https://lez.wikipedia.org'), _defineProperty(_site_map, 'lezwikipedia', 'https://lez.wikipedia.org'), _defineProperty(_site_map, 'lgwiki', 'https://lg.wikipedia.org'), _defineProperty(_site_map, 'lgwikipedia', 'https://lg.wikipedia.org'), _defineProperty(_site_map, 'liwiki', 'https://li.wikipedia.org'), _defineProperty(_site_map, 'liwikipedia', 'https://li.wikipedia.org'), _defineProperty(_site_map, 'liwiktionary', 'https://li.wiktionary.org'), _defineProperty(_site_map, 'liwikibooks', 'https://li.wikibooks.org'), _defineProperty(_site_map, 'liwikiquote', 'https://li.wikiquote.org'), _defineProperty(_site_map, 'liwikisource', 'https://li.wikisource.org'), _defineProperty(_site_map, 'lijwiki', 'https://lij.wikipedia.org'), _defineProperty(_site_map, 'lijwikipedia', 'https://lij.wikipedia.org'), _defineProperty(_site_map, 'lmowiki', 'https://lmo.wikipedia.org'), _defineProperty(_site_map, 'lmowikipedia', 'https://lmo.wikipedia.org'), _defineProperty(_site_map, 'lnwiki', 'https://ln.wikipedia.org'), _defineProperty(_site_map, 'lnwikipedia', 'https://ln.wikipedia.org'), _defineProperty(_site_map, 'lnwiktionary', 'https://ln.wiktionary.org'), _defineProperty(_site_map, 'lnwikibooks', 'https://ln.wikibooks.org'), _defineProperty(_site_map, 'lowiki', 'https://lo.wikipedia.org'), _defineProperty(_site_map, 'lowikipedia', 'https://lo.wikipedia.org'), _defineProperty(_site_map, 'lowiktionary', 'https://lo.wiktionary.org'), _defineProperty(_site_map, 'ltwiki', 'https://lt.wikipedia.org'), _defineProperty(_site_map, 'ltwikipedia', 'https://lt.wikipedia.org'), _defineProperty(_site_map, 'ltwiktionary', 'https://lt.wiktionary.org'), _defineProperty(_site_map, 'ltwikibooks', 'https://lt.wikibooks.org'), _defineProperty(_site_map, 'ltwikiquote', 'https://lt.wikiquote.org'), _defineProperty(_site_map, 'ltwikisource', 'https://lt.wikisource.org'), _defineProperty(_site_map, 'ltgwiki', 'https://ltg.wikipedia.org'), _defineProperty(_site_map, 'ltgwikipedia', 'https://ltg.wikipedia.org'), _defineProperty(_site_map, 'lvwiki', 'https://lv.wikipedia.org'), _defineProperty(_site_map, 'lvwikipedia', 'https://lv.wikipedia.org'), _defineProperty(_site_map, 'lvwiktionary', 'https://lv.wiktionary.org'), _defineProperty(_site_map, 'lvwikibooks', 'https://lv.wikibooks.org'), _defineProperty(_site_map, 'maiwiki', 'https://mai.wikipedia.org'), _defineProperty(_site_map, 'maiwikipedia', 'https://mai.wikipedia.org'), _defineProperty(_site_map, 'map_bmswiki', 'https://map-bms.wikipedia.org'), _defineProperty(_site_map, 'map_bmswikipedia', 'https://map-bms.wikipedia.org'), _defineProperty(_site_map, 'mdfwiki', 'https://mdf.wikipedia.org'), _defineProperty(_site_map, 'mdfwikipedia', 'https://mdf.wikipedia.org'), _defineProperty(_site_map, 'mgwiki', 'https://mg.wikipedia.org'), _defineProperty(_site_map, 'mgwikipedia', 'https://mg.wikipedia.org'), _defineProperty(_site_map, 'mgwiktionary', 'https://mg.wiktionary.org'), _defineProperty(_site_map, 'mgwikibooks', 'https://mg.wikibooks.org'), _defineProperty(_site_map, 'mhwiki', 'https://mh.wikipedia.org'), _defineProperty(_site_map, 'mhwikipedia', 'https://mh.wikipedia.org'), _defineProperty(_site_map, 'mhwiktionary', 'https://mh.wiktionary.org'), _defineProperty(_site_map, 'mhrwiki', 'https://mhr.wikipedia.org'), _defineProperty(_site_map, 'mhrwikipedia', 'https://mhr.wikipedia.org'), _defineProperty(_site_map, 'miwiki', 'https://mi.wikipedia.org'), _defineProperty(_site_map, 'miwikipedia', 'https://mi.wikipedia.org'), _defineProperty(_site_map, 'miwiktionary', 'https://mi.wiktionary.org'), _defineProperty(_site_map, 'miwikibooks', 'https://mi.wikibooks.org'), _defineProperty(_site_map, 'minwiki', 'https://min.wikipedia.org'), _defineProperty(_site_map, 'minwikipedia', 'https://min.wikipedia.org'), _defineProperty(_site_map, 'mkwiki', 'https://mk.wikipedia.org'), _defineProperty(_site_map, 'mkwikipedia', 'https://mk.wikipedia.org'), _defineProperty(_site_map, 'mkwiktionary', 'https://mk.wiktionary.org'), _defineProperty(_site_map, 'mkwikibooks', 'https://mk.wikibooks.org'), _defineProperty(_site_map, 'mkwikisource', 'https://mk.wikisource.org'), _defineProperty(_site_map, 'mlwiki', 'https://ml.wikipedia.org'), _defineProperty(_site_map, 'mlwikipedia', 'https://ml.wikipedia.org'), _defineProperty(_site_map, 'mlwiktionary', 'https://ml.wiktionary.org'), _defineProperty(_site_map, 'mlwikibooks', 'https://ml.wikibooks.org'), _defineProperty(_site_map, 'mlwikiquote', 'https://ml.wikiquote.org'), _defineProperty(_site_map, 'mlwikisource', 'https://ml.wikisource.org'), _defineProperty(_site_map, 'mnwiki', 'https://mn.wikipedia.org'), _defineProperty(_site_map, 'mnwikipedia', 'https://mn.wikipedia.org'), _defineProperty(_site_map, 'mnwiktionary', 'https://mn.wiktionary.org'), _defineProperty(_site_map, 'mnwikibooks', 'https://mn.wikibooks.org'), _defineProperty(_site_map, 'mowiki', 'https://mo.wikipedia.org'), _defineProperty(_site_map, 'mowikipedia', 'https://mo.wikipedia.org'), _defineProperty(_site_map, 'mowiktionary', 'https://mo.wiktionary.org'), _defineProperty(_site_map, 'mrwiki', 'https://mr.wikipedia.org'), _defineProperty(_site_map, 'mrwikipedia', 'https://mr.wikipedia.org'), _defineProperty(_site_map, 'mrwiktionary', 'https://mr.wiktionary.org'), _defineProperty(_site_map, 'mrwikibooks', 'https://mr.wikibooks.org'), _defineProperty(_site_map, 'mrwikiquote', 'https://mr.wikiquote.org'), _defineProperty(_site_map, 'mrwikisource', 'https://mr.wikisource.org'), _defineProperty(_site_map, 'mrjwiki', 'https://mrj.wikipedia.org'), _defineProperty(_site_map, 'mrjwikipedia', 'https://mrj.wikipedia.org'), _defineProperty(_site_map, 'mswiki', 'https://ms.wikipedia.org'), _defineProperty(_site_map, 'mswikipedia', 'https://ms.wikipedia.org'), _defineProperty(_site_map, 'mswiktionary', 'https://ms.wiktionary.org'), _defineProperty(_site_map, 'mswikibooks', 'https://ms.wikibooks.org'), _defineProperty(_site_map, 'mtwiki', 'https://mt.wikipedia.org'), _defineProperty(_site_map, 'mtwikipedia', 'https://mt.wikipedia.org'), _defineProperty(_site_map, 'mtwiktionary', 'https://mt.wiktionary.org'), _defineProperty(_site_map, 'muswiki', 'https://mus.wikipedia.org'), _defineProperty(_site_map, 'muswikipedia', 'https://mus.wikipedia.org'), _defineProperty(_site_map, 'mwlwiki', 'https://mwl.wikipedia.org'), _defineProperty(_site_map, 'mwlwikipedia', 'https://mwl.wikipedia.org'), _defineProperty(_site_map, 'mywiki', 'https://my.wikipedia.org'), _defineProperty(_site_map, 'mywikipedia', 'https://my.wikipedia.org'), _defineProperty(_site_map, 'mywiktionary', 'https://my.wiktionary.org'), _defineProperty(_site_map, 'mywikibooks', 'https://my.wikibooks.org'), _defineProperty(_site_map, 'myvwiki', 'https://myv.wikipedia.org'), _defineProperty(_site_map, 'myvwikipedia', 'https://myv.wikipedia.org'), _defineProperty(_site_map, 'mznwiki', 'https://mzn.wikipedia.org'), _defineProperty(_site_map, 'mznwikipedia', 'https://mzn.wikipedia.org'), _defineProperty(_site_map, 'nawiki', 'https://na.wikipedia.org'), _defineProperty(_site_map, 'nawikipedia', 'https://na.wikipedia.org'), _defineProperty(_site_map, 'nawiktionary', 'https://na.wiktionary.org'), _defineProperty(_site_map, 'nawikibooks', 'https://na.wikibooks.org'), _defineProperty(_site_map, 'nawikiquote', 'https://na.wikiquote.org'), _defineProperty(_site_map, 'nahwiki', 'https://nah.wikipedia.org'), _defineProperty(_site_map, 'nahwikipedia', 'https://nah.wikipedia.org'), _defineProperty(_site_map, 'nahwiktionary', 'https://nah.wiktionary.org'), _defineProperty(_site_map, 'nahwikibooks', 'https://nah.wikibooks.org'), _defineProperty(_site_map, 'napwiki', 'https://nap.wikipedia.org'), _defineProperty(_site_map, 'napwikipedia', 'https://nap.wikipedia.org'), _defineProperty(_site_map, 'ndswiki', 'https://nds.wikipedia.org'), _defineProperty(_site_map, 'ndswikipedia', 'https://nds.wikipedia.org'), _defineProperty(_site_map, 'ndswiktionary', 'https://nds.wiktionary.org'), _defineProperty(_site_map, 'ndswikibooks', 'https://nds.wikibooks.org'), _defineProperty(_site_map, 'ndswikiquote', 'https://nds.wikiquote.org'), _defineProperty(_site_map, 'nds_nlwiki', 'https://nds-nl.wikipedia.org'), _defineProperty(_site_map, 'nds_nlwikipedia', 'https://nds-nl.wikipedia.org'), _defineProperty(_site_map, 'newiki', 'https://ne.wikipedia.org'), _defineProperty(_site_map, 'newikipedia', 'https://ne.wikipedia.org'), _defineProperty(_site_map, 'newiktionary', 'https://ne.wiktionary.org'), _defineProperty(_site_map, 'newikibooks', 'https://ne.wikibooks.org'), _defineProperty(_site_map, 'newwiki', 'https://new.wikipedia.org'), _defineProperty(_site_map, 'newwikipedia', 'https://new.wikipedia.org'), _defineProperty(_site_map, 'ngwiki', 'https://ng.wikipedia.org'), _defineProperty(_site_map, 'ngwikipedia', 'https://ng.wikipedia.org'), _defineProperty(_site_map, 'nlwiki', 'https://nl.wikipedia.org'), _defineProperty(_site_map, 'nlwikipedia', 'https://nl.wikipedia.org'), _defineProperty(_site_map, 'nlwiktionary', 'https://nl.wiktionary.org'), _defineProperty(_site_map, 'nlwikibooks', 'https://nl.wikibooks.org'), _defineProperty(_site_map, 'nlwikinews', 'https://nl.wikinews.org'), _defineProperty(_site_map, 'nlwikiquote', 'https://nl.wikiquote.org'), _defineProperty(_site_map, 'nlwikisource', 'https://nl.wikisource.org'), _defineProperty(_site_map, 'nlwikivoyage', 'https://nl.wikivoyage.org'), _defineProperty(_site_map, 'nnwiki', 'https://nn.wikipedia.org'), _defineProperty(_site_map, 'nnwikipedia', 'https://nn.wikipedia.org'), _defineProperty(_site_map, 'nnwiktionary', 'https://nn.wiktionary.org'), _defineProperty(_site_map, 'nnwikiquote', 'https://nn.wikiquote.org'), _defineProperty(_site_map, 'nowiki', 'https://no.wikipedia.org'), _defineProperty(_site_map, 'nowikipedia', 'https://no.wikipedia.org'), _defineProperty(_site_map, 'nowiktionary', 'https://no.wiktionary.org'), _defineProperty(_site_map, 'nowikibooks', 'https://no.wikibooks.org'), _defineProperty(_site_map, 'nowikinews', 'https://no.wikinews.org'), _defineProperty(_site_map, 'nowikiquote', 'https://no.wikiquote.org'), _defineProperty(_site_map, 'nowikisource', 'https://no.wikisource.org'), _defineProperty(_site_map, 'novwiki', 'https://nov.wikipedia.org'), _defineProperty(_site_map, 'novwikipedia', 'https://nov.wikipedia.org'), _defineProperty(_site_map, 'nrmwiki', 'https://nrm.wikipedia.org'), _defineProperty(_site_map, 'nrmwikipedia', 'https://nrm.wikipedia.org'), _defineProperty(_site_map, 'nsowiki', 'https://nso.wikipedia.org'), _defineProperty(_site_map, 'nsowikipedia', 'https://nso.wikipedia.org'), _defineProperty(_site_map, 'nvwiki', 'https://nv.wikipedia.org'), _defineProperty(_site_map, 'nvwikipedia', 'https://nv.wikipedia.org'), _defineProperty(_site_map, 'nywiki', 'https://ny.wikipedia.org'), _defineProperty(_site_map, 'nywikipedia', 'https://ny.wikipedia.org'), _defineProperty(_site_map, 'ocwiki', 'https://oc.wikipedia.org'), _defineProperty(_site_map, 'ocwikipedia', 'https://oc.wikipedia.org'), _defineProperty(_site_map, 'ocwiktionary', 'https://oc.wiktionary.org'), _defineProperty(_site_map, 'ocwikibooks', 'https://oc.wikibooks.org'), _defineProperty(_site_map, 'omwiki', 'https://om.wikipedia.org'), _defineProperty(_site_map, 'omwikipedia', 'https://om.wikipedia.org'), _defineProperty(_site_map, 'omwiktionary', 'https://om.wiktionary.org'), _defineProperty(_site_map, 'orwiki', 'https://or.wikipedia.org'), _defineProperty(_site_map, 'orwikipedia', 'https://or.wikipedia.org'), _defineProperty(_site_map, 'orwiktionary', 'https://or.wiktionary.org'), _defineProperty(_site_map, 'orwikisource', 'https://or.wikisource.org'), _defineProperty(_site_map, 'oswiki', 'https://os.wikipedia.org'), _defineProperty(_site_map, 'oswikipedia', 'https://os.wikipedia.org'), _defineProperty(_site_map, 'pawiki', 'https://pa.wikipedia.org'), _defineProperty(_site_map, 'pawikipedia', 'https://pa.wikipedia.org'), _defineProperty(_site_map, 'pawiktionary', 'https://pa.wiktionary.org'), _defineProperty(_site_map, 'pawikibooks', 'https://pa.wikibooks.org'), _defineProperty(_site_map, 'pagwiki', 'https://pag.wikipedia.org'), _defineProperty(_site_map, 'pagwikipedia', 'https://pag.wikipedia.org'), _defineProperty(_site_map, 'pamwiki', 'https://pam.wikipedia.org'), _defineProperty(_site_map, 'pamwikipedia', 'https://pam.wikipedia.org'), _defineProperty(_site_map, 'papwiki', 'https://pap.wikipedia.org'), _defineProperty(_site_map, 'papwikipedia', 'https://pap.wikipedia.org'), _defineProperty(_site_map, 'pcdwiki', 'https://pcd.wikipedia.org'), _defineProperty(_site_map, 'pcdwikipedia', 'https://pcd.wikipedia.org'), _defineProperty(_site_map, 'pdcwiki', 'https://pdc.wikipedia.org'), _defineProperty(_site_map, 'pdcwikipedia', 'https://pdc.wikipedia.org'), _defineProperty(_site_map, 'pflwiki', 'https://pfl.wikipedia.org'), _defineProperty(_site_map, 'pflwikipedia', 'https://pfl.wikipedia.org'), _defineProperty(_site_map, 'piwiki', 'https://pi.wikipedia.org'), _defineProperty(_site_map, 'piwikipedia', 'https://pi.wikipedia.org'), _defineProperty(_site_map, 'piwiktionary', 'https://pi.wiktionary.org'), _defineProperty(_site_map, 'pihwiki', 'https://pih.wikipedia.org'), _defineProperty(_site_map, 'pihwikipedia', 'https://pih.wikipedia.org'), _defineProperty(_site_map, 'plwiki', 'https://pl.wikipedia.org'), _defineProperty(_site_map, 'plwikipedia', 'https://pl.wikipedia.org'), _defineProperty(_site_map, 'plwiktionary', 'https://pl.wiktionary.org'), _defineProperty(_site_map, 'plwikibooks', 'https://pl.wikibooks.org'), _defineProperty(_site_map, 'plwikinews', 'https://pl.wikinews.org'), _defineProperty(_site_map, 'plwikiquote', 'https://pl.wikiquote.org'), _defineProperty(_site_map, 'plwikisource', 'https://pl.wikisource.org'), _defineProperty(_site_map, 'plwikivoyage', 'https://pl.wikivoyage.org'), _defineProperty(_site_map, 'pmswiki', 'https://pms.wikipedia.org'), _defineProperty(_site_map, 'pmswikipedia', 'https://pms.wikipedia.org'), _defineProperty(_site_map, 'pnbwiki', 'https://pnb.wikipedia.org'), _defineProperty(_site_map, 'pnbwikipedia', 'https://pnb.wikipedia.org'), _defineProperty(_site_map, 'pnbwiktionary', 'https://pnb.wiktionary.org'), _defineProperty(_site_map, 'pntwiki', 'https://pnt.wikipedia.org'), _defineProperty(_site_map, 'pntwikipedia', 'https://pnt.wikipedia.org'), _defineProperty(_site_map, 'pswiki', 'https://ps.wikipedia.org'), _defineProperty(_site_map, 'pswikipedia', 'https://ps.wikipedia.org'), _defineProperty(_site_map, 'pswiktionary', 'https://ps.wiktionary.org'), _defineProperty(_site_map, 'pswikibooks', 'https://ps.wikibooks.org'), _defineProperty(_site_map, 'ptwiki', 'https://pt.wikipedia.org'), _defineProperty(_site_map, 'ptwikipedia', 'https://pt.wikipedia.org'), _defineProperty(_site_map, 'ptwiktionary', 'https://pt.wiktionary.org'), _defineProperty(_site_map, 'ptwikibooks', 'https://pt.wikibooks.org'), _defineProperty(_site_map, 'ptwikinews', 'https://pt.wikinews.org'), _defineProperty(_site_map, 'ptwikiquote', 'https://pt.wikiquote.org'), _defineProperty(_site_map, 'ptwikisource', 'https://pt.wikisource.org'), _defineProperty(_site_map, 'ptwikiversity', 'https://pt.wikiversity.org'), _defineProperty(_site_map, 'ptwikivoyage', 'https://pt.wikivoyage.org'), _defineProperty(_site_map, 'quwiki', 'https://qu.wikipedia.org'), _defineProperty(_site_map, 'quwikipedia', 'https://qu.wikipedia.org'), _defineProperty(_site_map, 'quwiktionary', 'https://qu.wiktionary.org'), _defineProperty(_site_map, 'quwikibooks', 'https://qu.wikibooks.org'), _defineProperty(_site_map, 'quwikiquote', 'https://qu.wikiquote.org'), _defineProperty(_site_map, 'rmwiki', 'https://rm.wikipedia.org'), _defineProperty(_site_map, 'rmwikipedia', 'https://rm.wikipedia.org'), _defineProperty(_site_map, 'rmwiktionary', 'https://rm.wiktionary.org'), _defineProperty(_site_map, 'rmwikibooks', 'https://rm.wikibooks.org'), _defineProperty(_site_map, 'rmywiki', 'https://rmy.wikipedia.org'), _defineProperty(_site_map, 'rmywikipedia', 'https://rmy.wikipedia.org'), _defineProperty(_site_map, 'rnwiki', 'https://rn.wikipedia.org'), _defineProperty(_site_map, 'rnwikipedia', 'https://rn.wikipedia.org'), _defineProperty(_site_map, 'rnwiktionary', 'https://rn.wiktionary.org'), _defineProperty(_site_map, 'rowiki', 'https://ro.wikipedia.org'), _defineProperty(_site_map, 'rowikipedia', 'https://ro.wikipedia.org'), _defineProperty(_site_map, 'rowiktionary', 'https://ro.wiktionary.org'), _defineProperty(_site_map, 'rowikibooks', 'https://ro.wikibooks.org'), _defineProperty(_site_map, 'rowikinews', 'https://ro.wikinews.org'), _defineProperty(_site_map, 'rowikiquote', 'https://ro.wikiquote.org'), _defineProperty(_site_map, 'rowikisource', 'https://ro.wikisource.org'), _defineProperty(_site_map, 'rowikivoyage', 'https://ro.wikivoyage.org'), _defineProperty(_site_map, 'roa_rupwiki', 'https://roa-rup.wikipedia.org'), _defineProperty(_site_map, 'roa_rupwikipedia', 'https://roa-rup.wikipedia.org'), _defineProperty(_site_map, 'roa_rupwiktionary', 'https://roa-rup.wiktionary.org'), _defineProperty(_site_map, 'roa_tarawiki', 'https://roa-tara.wikipedia.org'), _defineProperty(_site_map, 'roa_tarawikipedia', 'https://roa-tara.wikipedia.org'), _defineProperty(_site_map, 'ruwiki', 'https://ru.wikipedia.org'), _defineProperty(_site_map, 'ruwikipedia', 'https://ru.wikipedia.org'), _defineProperty(_site_map, 'ruwiktionary', 'https://ru.wiktionary.org'), _defineProperty(_site_map, 'ruwikibooks', 'https://ru.wikibooks.org'), _defineProperty(_site_map, 'ruwikinews', 'https://ru.wikinews.org'), _defineProperty(_site_map, 'ruwikiquote', 'https://ru.wikiquote.org'), _defineProperty(_site_map, 'ruwikisource', 'https://ru.wikisource.org'), _defineProperty(_site_map, 'ruwikiversity', 'https://ru.wikiversity.org'), _defineProperty(_site_map, 'ruwikivoyage', 'https://ru.wikivoyage.org'), _defineProperty(_site_map, 'ruewiki', 'https://rue.wikipedia.org'), _defineProperty(_site_map, 'ruewikipedia', 'https://rue.wikipedia.org'), _defineProperty(_site_map, 'rwwiki', 'https://rw.wikipedia.org'), _defineProperty(_site_map, 'rwwikipedia', 'https://rw.wikipedia.org'), _defineProperty(_site_map, 'rwwiktionary', 'https://rw.wiktionary.org'), _defineProperty(_site_map, 'sawiki', 'https://sa.wikipedia.org'), _defineProperty(_site_map, 'sawikipedia', 'https://sa.wikipedia.org'), _defineProperty(_site_map, 'sawiktionary', 'https://sa.wiktionary.org'), _defineProperty(_site_map, 'sawikibooks', 'https://sa.wikibooks.org'), _defineProperty(_site_map, 'sawikiquote', 'https://sa.wikiquote.org'), _defineProperty(_site_map, 'sawikisource', 'https://sa.wikisource.org'), _defineProperty(_site_map, 'sahwiki', 'https://sah.wikipedia.org'), _defineProperty(_site_map, 'sahwikipedia', 'https://sah.wikipedia.org'), _defineProperty(_site_map, 'sahwikisource', 'https://sah.wikisource.org'), _defineProperty(_site_map, 'scwiki', 'https://sc.wikipedia.org'), _defineProperty(_site_map, 'scwikipedia', 'https://sc.wikipedia.org'), _defineProperty(_site_map, 'scwiktionary', 'https://sc.wiktionary.org'), _defineProperty(_site_map, 'scnwiki', 'https://scn.wikipedia.org'), _defineProperty(_site_map, 'scnwikipedia', 'https://scn.wikipedia.org'), _defineProperty(_site_map, 'scnwiktionary', 'https://scn.wiktionary.org'), _defineProperty(_site_map, 'scowiki', 'https://sco.wikipedia.org'), _defineProperty(_site_map, 'scowikipedia', 'https://sco.wikipedia.org'), _defineProperty(_site_map, 'sdwiki', 'https://sd.wikipedia.org'), _defineProperty(_site_map, 'sdwikipedia', 'https://sd.wikipedia.org'), _defineProperty(_site_map, 'sdwiktionary', 'https://sd.wiktionary.org'), _defineProperty(_site_map, 'sdwikinews', 'https://sd.wikinews.org'), _defineProperty(_site_map, 'sewiki', 'https://se.wikipedia.org'), _defineProperty(_site_map, 'sewikipedia', 'https://se.wikipedia.org'), _defineProperty(_site_map, 'sewikibooks', 'https://se.wikibooks.org'), _defineProperty(_site_map, 'sgwiki', 'https://sg.wikipedia.org'), _defineProperty(_site_map, 'sgwikipedia', 'https://sg.wikipedia.org'), _defineProperty(_site_map, 'sgwiktionary', 'https://sg.wiktionary.org'), _defineProperty(_site_map, 'shwiki', 'https://sh.wikipedia.org'), _defineProperty(_site_map, 'shwikipedia', 'https://sh.wikipedia.org'), _defineProperty(_site_map, 'shwiktionary', 'https://sh.wiktionary.org'), _defineProperty(_site_map, 'siwiki', 'https://si.wikipedia.org'), _defineProperty(_site_map, 'siwikipedia', 'https://si.wikipedia.org'), _defineProperty(_site_map, 'siwiktionary', 'https://si.wiktionary.org'), _defineProperty(_site_map, 'siwikibooks', 'https://si.wikibooks.org'), _defineProperty(_site_map, 'simplewiki', 'https://simple.wikipedia.org'), _defineProperty(_site_map, 'simplewikipedia', 'https://simple.wikipedia.org'), _defineProperty(_site_map, 'simplewiktionary', 'https://simple.wiktionary.org'), _defineProperty(_site_map, 'simplewikibooks', 'https://simple.wikibooks.org'), _defineProperty(_site_map, 'simplewikiquote', 'https://simple.wikiquote.org'), _defineProperty(_site_map, 'skwiki', 'https://sk.wikipedia.org'), _defineProperty(_site_map, 'skwikipedia', 'https://sk.wikipedia.org'), _defineProperty(_site_map, 'skwiktionary', 'https://sk.wiktionary.org'), _defineProperty(_site_map, 'skwikibooks', 'https://sk.wikibooks.org'), _defineProperty(_site_map, 'skwikiquote', 'https://sk.wikiquote.org'), _defineProperty(_site_map, 'skwikisource', 'https://sk.wikisource.org'), _defineProperty(_site_map, 'slwiki', 'https://sl.wikipedia.org'), _defineProperty(_site_map, 'slwikipedia', 'https://sl.wikipedia.org'), _defineProperty(_site_map, 'slwiktionary', 'https://sl.wiktionary.org'), _defineProperty(_site_map, 'slwikibooks', 'https://sl.wikibooks.org'), _defineProperty(_site_map, 'slwikiquote', 'https://sl.wikiquote.org'), _defineProperty(_site_map, 'slwikisource', 'https://sl.wikisource.org'), _defineProperty(_site_map, 'slwikiversity', 'https://sl.wikiversity.org'), _defineProperty(_site_map, 'smwiki', 'https://sm.wikipedia.org'), _defineProperty(_site_map, 'smwikipedia', 'https://sm.wikipedia.org'), _defineProperty(_site_map, 'smwiktionary', 'https://sm.wiktionary.org'), _defineProperty(_site_map, 'snwiki', 'https://sn.wikipedia.org'), _defineProperty(_site_map, 'snwikipedia', 'https://sn.wikipedia.org'), _defineProperty(_site_map, 'snwiktionary', 'https://sn.wiktionary.org'), _defineProperty(_site_map, 'sowiki', 'https://so.wikipedia.org'), _defineProperty(_site_map, 'sowikipedia', 'https://so.wikipedia.org'), _defineProperty(_site_map, 'sowiktionary', 'https://so.wiktionary.org'), _defineProperty(_site_map, 'sqwiki', 'https://sq.wikipedia.org'), _defineProperty(_site_map, 'sqwikipedia', 'https://sq.wikipedia.org'), _defineProperty(_site_map, 'sqwiktionary', 'https://sq.wiktionary.org'), _defineProperty(_site_map, 'sqwikibooks', 'https://sq.wikibooks.org'), _defineProperty(_site_map, 'sqwikinews', 'https://sq.wikinews.org'), _defineProperty(_site_map, 'sqwikiquote', 'https://sq.wikiquote.org'), _defineProperty(_site_map, 'srwiki', 'https://sr.wikipedia.org'), _defineProperty(_site_map, 'srwikipedia', 'https://sr.wikipedia.org'), _defineProperty(_site_map, 'srwiktionary', 'https://sr.wiktionary.org'), _defineProperty(_site_map, 'srwikibooks', 'https://sr.wikibooks.org'), _defineProperty(_site_map, 'srwikinews', 'https://sr.wikinews.org'), _defineProperty(_site_map, 'srwikiquote', 'https://sr.wikiquote.org'), _defineProperty(_site_map, 'srwikisource', 'https://sr.wikisource.org'), _defineProperty(_site_map, 'srnwiki', 'https://srn.wikipedia.org'), _defineProperty(_site_map, 'srnwikipedia', 'https://srn.wikipedia.org'), _defineProperty(_site_map, 'sswiki', 'https://ss.wikipedia.org'), _defineProperty(_site_map, 'sswikipedia', 'https://ss.wikipedia.org'), _defineProperty(_site_map, 'sswiktionary', 'https://ss.wiktionary.org'), _defineProperty(_site_map, 'stwiki', 'https://st.wikipedia.org'), _defineProperty(_site_map, 'stwikipedia', 'https://st.wikipedia.org'), _defineProperty(_site_map, 'stwiktionary', 'https://st.wiktionary.org'), _defineProperty(_site_map, 'stqwiki', 'https://stq.wikipedia.org'), _defineProperty(_site_map, 'stqwikipedia', 'https://stq.wikipedia.org'), _defineProperty(_site_map, 'suwiki', 'https://su.wikipedia.org'), _defineProperty(_site_map, 'suwikipedia', 'https://su.wikipedia.org'), _defineProperty(_site_map, 'suwiktionary', 'https://su.wiktionary.org'), _defineProperty(_site_map, 'suwikibooks', 'https://su.wikibooks.org'), _defineProperty(_site_map, 'suwikiquote', 'https://su.wikiquote.org'), _defineProperty(_site_map, 'svwiki', 'https://sv.wikipedia.org'), _defineProperty(_site_map, 'svwikipedia', 'https://sv.wikipedia.org'), _defineProperty(_site_map, 'svwiktionary', 'https://sv.wiktionary.org'), _defineProperty(_site_map, 'svwikibooks', 'https://sv.wikibooks.org'), _defineProperty(_site_map, 'svwikinews', 'https://sv.wikinews.org'), _defineProperty(_site_map, 'svwikiquote', 'https://sv.wikiquote.org'), _defineProperty(_site_map, 'svwikisource', 'https://sv.wikisource.org'), _defineProperty(_site_map, 'svwikiversity', 'https://sv.wikiversity.org'), _defineProperty(_site_map, 'svwikivoyage', 'https://sv.wikivoyage.org'), _defineProperty(_site_map, 'swwiki', 'https://sw.wikipedia.org'), _defineProperty(_site_map, 'swwikipedia', 'https://sw.wikipedia.org'), _defineProperty(_site_map, 'swwiktionary', 'https://sw.wiktionary.org'), _defineProperty(_site_map, 'swwikibooks', 'https://sw.wikibooks.org'), _defineProperty(_site_map, 'szlwiki', 'https://szl.wikipedia.org'), _defineProperty(_site_map, 'szlwikipedia', 'https://szl.wikipedia.org'), _defineProperty(_site_map, 'tawiki', 'https://ta.wikipedia.org'), _defineProperty(_site_map, 'tawikipedia', 'https://ta.wikipedia.org'), _defineProperty(_site_map, 'tawiktionary', 'https://ta.wiktionary.org'), _defineProperty(_site_map, 'tawikibooks', 'https://ta.wikibooks.org'), _defineProperty(_site_map, 'tawikinews', 'https://ta.wikinews.org'), _defineProperty(_site_map, 'tawikiquote', 'https://ta.wikiquote.org'), _defineProperty(_site_map, 'tawikisource', 'https://ta.wikisource.org'), _defineProperty(_site_map, 'tewiki', 'https://te.wikipedia.org'), _defineProperty(_site_map, 'tewikipedia', 'https://te.wikipedia.org'), _defineProperty(_site_map, 'tewiktionary', 'https://te.wiktionary.org'), _defineProperty(_site_map, 'tewikibooks', 'https://te.wikibooks.org'), _defineProperty(_site_map, 'tewikiquote', 'https://te.wikiquote.org'), _defineProperty(_site_map, 'tewikisource', 'https://te.wikisource.org'), _defineProperty(_site_map, 'tetwiki', 'https://tet.wikipedia.org'), _defineProperty(_site_map, 'tetwikipedia', 'https://tet.wikipedia.org'), _defineProperty(_site_map, 'tgwiki', 'https://tg.wikipedia.org'), _defineProperty(_site_map, 'tgwikipedia', 'https://tg.wikipedia.org'), _defineProperty(_site_map, 'tgwiktionary', 'https://tg.wiktionary.org'), _defineProperty(_site_map, 'tgwikibooks', 'https://tg.wikibooks.org'), _defineProperty(_site_map, 'thwiki', 'https://th.wikipedia.org'), _defineProperty(_site_map, 'thwikipedia', 'https://th.wikipedia.org'), _defineProperty(_site_map, 'thwiktionary', 'https://th.wiktionary.org'), _defineProperty(_site_map, 'thwikibooks', 'https://th.wikibooks.org'), _defineProperty(_site_map, 'thwikinews', 'https://th.wikinews.org'), _defineProperty(_site_map, 'thwikiquote', 'https://th.wikiquote.org'), _defineProperty(_site_map, 'thwikisource', 'https://th.wikisource.org'), _defineProperty(_site_map, 'tiwiki', 'https://ti.wikipedia.org'), _defineProperty(_site_map, 'tiwikipedia', 'https://ti.wikipedia.org'), _defineProperty(_site_map, 'tiwiktionary', 'https://ti.wiktionary.org'), _defineProperty(_site_map, 'tkwiki', 'https://tk.wikipedia.org'), _defineProperty(_site_map, 'tkwikipedia', 'https://tk.wikipedia.org'), _defineProperty(_site_map, 'tkwiktionary', 'https://tk.wiktionary.org'), _defineProperty(_site_map, 'tkwikibooks', 'https://tk.wikibooks.org'), _defineProperty(_site_map, 'tkwikiquote', 'https://tk.wikiquote.org'), _defineProperty(_site_map, 'tlwiki', 'https://tl.wikipedia.org'), _defineProperty(_site_map, 'tlwikipedia', 'https://tl.wikipedia.org'), _defineProperty(_site_map, 'tlwiktionary', 'https://tl.wiktionary.org'), _defineProperty(_site_map, 'tlwikibooks', 'https://tl.wikibooks.org'), _defineProperty(_site_map, 'tnwiki', 'https://tn.wikipedia.org'), _defineProperty(_site_map, 'tnwikipedia', 'https://tn.wikipedia.org'), _defineProperty(_site_map, 'tnwiktionary', 'https://tn.wiktionary.org'), _defineProperty(_site_map, 'towiki', 'https://to.wikipedia.org'), _defineProperty(_site_map, 'towikipedia', 'https://to.wikipedia.org'), _defineProperty(_site_map, 'towiktionary', 'https://to.wiktionary.org'), _defineProperty(_site_map, 'tpiwiki', 'https://tpi.wikipedia.org'), _defineProperty(_site_map, 'tpiwikipedia', 'https://tpi.wikipedia.org'), _defineProperty(_site_map, 'tpiwiktionary', 'https://tpi.wiktionary.org'), _defineProperty(_site_map, 'trwiki', 'https://tr.wikipedia.org'), _defineProperty(_site_map, 'trwikipedia', 'https://tr.wikipedia.org'), _defineProperty(_site_map, 'trwiktionary', 'https://tr.wiktionary.org'), _defineProperty(_site_map, 'trwikibooks', 'https://tr.wikibooks.org'), _defineProperty(_site_map, 'trwikinews', 'https://tr.wikinews.org'), _defineProperty(_site_map, 'trwikiquote', 'https://tr.wikiquote.org'), _defineProperty(_site_map, 'trwikisource', 'https://tr.wikisource.org'), _defineProperty(_site_map, 'tswiki', 'https://ts.wikipedia.org'), _defineProperty(_site_map, 'tswikipedia', 'https://ts.wikipedia.org'), _defineProperty(_site_map, 'tswiktionary', 'https://ts.wiktionary.org'), _defineProperty(_site_map, 'ttwiki', 'https://tt.wikipedia.org'), _defineProperty(_site_map, 'ttwikipedia', 'https://tt.wikipedia.org'), _defineProperty(_site_map, 'ttwiktionary', 'https://tt.wiktionary.org'), _defineProperty(_site_map, 'ttwikibooks', 'https://tt.wikibooks.org'), _defineProperty(_site_map, 'ttwikiquote', 'https://tt.wikiquote.org'), _defineProperty(_site_map, 'tumwiki', 'https://tum.wikipedia.org'), _defineProperty(_site_map, 'tumwikipedia', 'https://tum.wikipedia.org'), _defineProperty(_site_map, 'twwiki', 'https://tw.wikipedia.org'), _defineProperty(_site_map, 'twwikipedia', 'https://tw.wikipedia.org'), _defineProperty(_site_map, 'twwiktionary', 'https://tw.wiktionary.org'), _defineProperty(_site_map, 'tywiki', 'https://ty.wikipedia.org'), _defineProperty(_site_map, 'tywikipedia', 'https://ty.wikipedia.org'), _defineProperty(_site_map, 'tyvwiki', 'https://tyv.wikipedia.org'), _defineProperty(_site_map, 'tyvwikipedia', 'https://tyv.wikipedia.org'), _defineProperty(_site_map, 'udmwiki', 'https://udm.wikipedia.org'), _defineProperty(_site_map, 'udmwikipedia', 'https://udm.wikipedia.org'), _defineProperty(_site_map, 'ugwiki', 'https://ug.wikipedia.org'), _defineProperty(_site_map, 'ugwikipedia', 'https://ug.wikipedia.org'), _defineProperty(_site_map, 'ugwiktionary', 'https://ug.wiktionary.org'), _defineProperty(_site_map, 'ugwikibooks', 'https://ug.wikibooks.org'), _defineProperty(_site_map, 'ugwikiquote', 'https://ug.wikiquote.org'), _defineProperty(_site_map, 'ukwiki', 'https://uk.wikipedia.org'), _defineProperty(_site_map, 'ukwikipedia', 'https://uk.wikipedia.org'), _defineProperty(_site_map, 'ukwiktionary', 'https://uk.wiktionary.org'), _defineProperty(_site_map, 'ukwikibooks', 'https://uk.wikibooks.org'), _defineProperty(_site_map, 'ukwikinews', 'https://uk.wikinews.org'), _defineProperty(_site_map, 'ukwikiquote', 'https://uk.wikiquote.org'), _defineProperty(_site_map, 'ukwikisource', 'https://uk.wikisource.org'), _defineProperty(_site_map, 'ukwikivoyage', 'https://uk.wikivoyage.org'), _defineProperty(_site_map, 'urwiki', 'https://ur.wikipedia.org'), _defineProperty(_site_map, 'urwikipedia', 'https://ur.wikipedia.org'), _defineProperty(_site_map, 'urwiktionary', 'https://ur.wiktionary.org'), _defineProperty(_site_map, 'urwikibooks', 'https://ur.wikibooks.org'), _defineProperty(_site_map, 'urwikiquote', 'https://ur.wikiquote.org'), _defineProperty(_site_map, 'uzwiki', 'https://uz.wikipedia.org'), _defineProperty(_site_map, 'uzwikipedia', 'https://uz.wikipedia.org'), _defineProperty(_site_map, 'uzwiktionary', 'https://uz.wiktionary.org'), _defineProperty(_site_map, 'uzwikibooks', 'https://uz.wikibooks.org'), _defineProperty(_site_map, 'uzwikiquote', 'https://uz.wikiquote.org'), _defineProperty(_site_map, 'vewiki', 'https://ve.wikipedia.org'), _defineProperty(_site_map, 'vewikipedia', 'https://ve.wikipedia.org'), _defineProperty(_site_map, 'vecwiki', 'https://vec.wikipedia.org'), _defineProperty(_site_map, 'vecwikipedia', 'https://vec.wikipedia.org'), _defineProperty(_site_map, 'vecwiktionary', 'https://vec.wiktionary.org'), _defineProperty(_site_map, 'vecwikisource', 'https://vec.wikisource.org'), _defineProperty(_site_map, 'vepwiki', 'https://vep.wikipedia.org'), _defineProperty(_site_map, 'vepwikipedia', 'https://vep.wikipedia.org'), _defineProperty(_site_map, 'viwiki', 'https://vi.wikipedia.org'), _defineProperty(_site_map, 'viwikipedia', 'https://vi.wikipedia.org'), _defineProperty(_site_map, 'viwiktionary', 'https://vi.wiktionary.org'), _defineProperty(_site_map, 'viwikibooks', 'https://vi.wikibooks.org'), _defineProperty(_site_map, 'viwikiquote', 'https://vi.wikiquote.org'), _defineProperty(_site_map, 'viwikisource', 'https://vi.wikisource.org'), _defineProperty(_site_map, 'viwikivoyage', 'https://vi.wikivoyage.org'), _defineProperty(_site_map, 'vlswiki', 'https://vls.wikipedia.org'), _defineProperty(_site_map, 'vlswikipedia', 'https://vls.wikipedia.org'), _defineProperty(_site_map, 'vowiki', 'https://vo.wikipedia.org'), _defineProperty(_site_map, 'vowikipedia', 'https://vo.wikipedia.org'), _defineProperty(_site_map, 'vowiktionary', 'https://vo.wiktionary.org'), _defineProperty(_site_map, 'vowikibooks', 'https://vo.wikibooks.org'), _defineProperty(_site_map, 'vowikiquote', 'https://vo.wikiquote.org'), _defineProperty(_site_map, 'wawiki', 'https://wa.wikipedia.org'), _defineProperty(_site_map, 'wawikipedia', 'https://wa.wikipedia.org'), _defineProperty(_site_map, 'wawiktionary', 'https://wa.wiktionary.org'), _defineProperty(_site_map, 'wawikibooks', 'https://wa.wikibooks.org'), _defineProperty(_site_map, 'warwiki', 'https://war.wikipedia.org'), _defineProperty(_site_map, 'warwikipedia', 'https://war.wikipedia.org'), _defineProperty(_site_map, 'wowiki', 'https://wo.wikipedia.org'), _defineProperty(_site_map, 'wowikipedia', 'https://wo.wikipedia.org'), _defineProperty(_site_map, 'wowiktionary', 'https://wo.wiktionary.org'), _defineProperty(_site_map, 'wowikiquote', 'https://wo.wikiquote.org'), _defineProperty(_site_map, 'wuuwiki', 'https://wuu.wikipedia.org'), _defineProperty(_site_map, 'wuuwikipedia', 'https://wuu.wikipedia.org'), _defineProperty(_site_map, 'xalwiki', 'https://xal.wikipedia.org'), _defineProperty(_site_map, 'xalwikipedia', 'https://xal.wikipedia.org'), _defineProperty(_site_map, 'xhwiki', 'https://xh.wikipedia.org'), _defineProperty(_site_map, 'xhwikipedia', 'https://xh.wikipedia.org'), _defineProperty(_site_map, 'xhwiktionary', 'https://xh.wiktionary.org'), _defineProperty(_site_map, 'xhwikibooks', 'https://xh.wikibooks.org'), _defineProperty(_site_map, 'xmfwiki', 'https://xmf.wikipedia.org'), _defineProperty(_site_map, 'xmfwikipedia', 'https://xmf.wikipedia.org'), _defineProperty(_site_map, 'yiwiki', 'https://yi.wikipedia.org'), _defineProperty(_site_map, 'yiwikipedia', 'https://yi.wikipedia.org'), _defineProperty(_site_map, 'yiwiktionary', 'https://yi.wiktionary.org'), _defineProperty(_site_map, 'yiwikisource', 'https://yi.wikisource.org'), _defineProperty(_site_map, 'yowiki', 'https://yo.wikipedia.org'), _defineProperty(_site_map, 'yowikipedia', 'https://yo.wikipedia.org'), _defineProperty(_site_map, 'yowiktionary', 'https://yo.wiktionary.org'), _defineProperty(_site_map, 'yowikibooks', 'https://yo.wikibooks.org'), _defineProperty(_site_map, 'zawiki', 'https://za.wikipedia.org'), _defineProperty(_site_map, 'zawikipedia', 'https://za.wikipedia.org'), _defineProperty(_site_map, 'zawiktionary', 'https://za.wiktionary.org'), _defineProperty(_site_map, 'zawikibooks', 'https://za.wikibooks.org'), _defineProperty(_site_map, 'zawikiquote', 'https://za.wikiquote.org'), _defineProperty(_site_map, 'zeawiki', 'https://zea.wikipedia.org'), _defineProperty(_site_map, 'zeawikipedia', 'https://zea.wikipedia.org'), _defineProperty(_site_map, 'zhwiki', 'https://zh.wikipedia.org'), _defineProperty(_site_map, 'zhwikipedia', 'https://zh.wikipedia.org'), _defineProperty(_site_map, 'zhwiktionary', 'https://zh.wiktionary.org'), _defineProperty(_site_map, 'zhwikibooks', 'https://zh.wikibooks.org'), _defineProperty(_site_map, 'zhwikinews', 'https://zh.wikinews.org'), _defineProperty(_site_map, 'zhwikiquote', 'https://zh.wikiquote.org'), _defineProperty(_site_map, 'zhwikisource', 'https://zh.wikisource.org'), _defineProperty(_site_map, 'zhwikivoyage', 'https://zh.wikivoyage.org'), _defineProperty(_site_map, 'zh_classicalwiki', 'https://zh-classical.wikipedia.org'), _defineProperty(_site_map, 'zh_classicalwikipedia', 'https://zh-classical.wikipedia.org'), _defineProperty(_site_map, 'zh_min_nanwiki', 'https://zh-min-nan.wikipedia.org'), _defineProperty(_site_map, 'zh_min_nanwikipedia', 'https://zh-min-nan.wikipedia.org'), _defineProperty(_site_map, 'zh_min_nanwiktionary', 'https://zh-min-nan.wiktionary.org'), _defineProperty(_site_map, 'zh_min_nanwikibooks', 'https://zh-min-nan.wikibooks.org'), _defineProperty(_site_map, 'zh_min_nanwikiquote', 'https://zh-min-nan.wikiquote.org'), _defineProperty(_site_map, 'zh_min_nanwikisource', 'https://zh-min-nan.wikisource.org'), _defineProperty(_site_map, 'zh_yuewiki', 'https://zh-yue.wikipedia.org'), _defineProperty(_site_map, 'zh_yuewikipedia', 'https://zh-yue.wikipedia.org'), _defineProperty(_site_map, 'zuwiki', 'https://zu.wikipedia.org'), _defineProperty(_site_map, 'zuwikipedia', 'https://zu.wikipedia.org'), _defineProperty(_site_map, 'zuwiktionary', 'https://zu.wiktionary.org'), _defineProperty(_site_map, 'zuwikibooks', 'https://zu.wikibooks.org'), _site_map);
if (typeof module !== 'undefined' && module.exports) {
  module.exports = site_map;
}

},{}],14:[function(_dereq_,module,exports){
'use strict';

//turns wikimedia script into json
// https://github.com/spencermountain/wtf_wikipedia
//@spencermountain
var fetch = _dereq_('./lib/fetch_text');
var _parse = _dereq_('./parse');
var latex = _dereq_('./output/latex');
var markdown = _dereq_('./output/markdown');
var html = _dereq_('./output/html');
var reveal = _dereq_('./output/reveal');
var WikiConvert = _dereq_('./lib/wikiconvert');
var wikiconvert = new WikiConvert();
if (wikiconvert) {
  console.log("wikiconvert exists");
  if (wikiconvert.replaceWikiLinks) {
    console.log("wikiconvert.replaceWikiLink() exists");
  } else {
    console.log("wikiconvert does NOT exists");
  }
} else {
  console.log("wikiconvert.replaceWikiLink() does NOT exists");
}
var version = _dereq_('../package').version;

//use a global var for lazy customization
var options = {};

//from a page title or id, fetch the wikiscript
var from_api = function from_api(page_identifier, lang_or_wikiid, cb) {
  if (typeof lang_or_wikiid === 'function') {
    cb = lang_or_wikiid;
    lang_or_wikiid = 'en';
  }
  cb = cb || function () {};
  lang_or_wikiid = lang_or_wikiid || 'en';
  if (!fetch) {
    //no http method, on the client side
    return cb(null);
  };
  var markup = fetch(page_identifier, lang_or_wikiid, cb);
  var vLanguage = lang_or_wikiid.substr(0, 2);
  var vDomain = "wikipedia";
  if (lang_or_wikiid.length > 2) {
    vDomain = lang_or_wikiid.substr(2, lang_or_wikiid.length);
    if (vDomain == "wiki") {
      vDomain == "wikipedia";
    };
  };
  var vDocJSON = {};
  //wikiconvert.init("en","wikiverstiy",vDocJSON);
  console.log("Language=" + vLanguage + " Domain=" + vDomain);
  //console.log(markup);
  return markup;
};

//turn wiki-markup into a nicely-formatted text
var plaintext = function plaintext(str, optionsP) {
  optionsP = optionsP === undefined ? options : optionsP;
  var data = _parse(str, optionsP) || {};
  data.sections = data.sections || [];
  var arr = data.sections.map(function (d) {
    return d.sentences.map(function (a) {
      return a.text;
    }).join(' ');
  });
  return arr.join('\n\n');
};

var customize = function customize(obj) {
  options.custom = obj;
};

module.exports = {
  from_api: from_api,
  plaintext: plaintext,
  markdown: markdown,
  html: html,
  reveal: reveal,
  latex: latex,
  version: version,
  custom: customize,
  wikiconvert: wikiconvert,
  parse: function parse(str, obj) {
    obj = obj || {};
    obj = Object.assign(obj, options); //grab 'custom' persistent options
    return _parse(str, obj);
  }
};

},{"../package":9,"./lib/fetch_text":16,"./lib/wikiconvert":19,"./output/html":20,"./output/latex":25,"./output/markdown":31,"./output/reveal":37,"./parse":43}],15:[function(_dereq_,module,exports){
'use strict';

//converts DMS (decimal-minute-second) geo format to lat/lng format.
//major thank you to https://github.com/gmaclennan/parse-dms
//and https://github.com/WSDOT-GIS/dms-js 👏

//accepts an array of descending Degree, Minute, Second values, with a hemisphere at the end
//must have N/S/E/W as last thing
function parseDms(arr) {
  var hemisphere = arr.pop();
  var degrees = Number(arr[0] || 0);
  var minutes = Number(arr[1] || 0);
  var seconds = Number(arr[2] || 0);
  if (typeof hemisphere !== 'string' || isNaN(degrees)) {
    return null;
  }
  var sign = 1;
  if (/[SW]/i.test(hemisphere)) {
    sign = -1;
  }
  var decDeg = sign * (degrees + minutes / 60 + seconds / 3600);
  return decDeg;
}
module.exports = parseDms;
// console.log(parseDms([57, 18, 22, 'N']));
// console.log(parseDms([4, 27, 32, 'W']));

},{}],16:[function(_dereq_,module,exports){
'use strict';
//grab the content of any article, off the api

var request = _dereq_('superagent');
var site_map = _dereq_('../data/site_map');
var redirects = _dereq_('../parse/page/redirects');

var fetch = function fetch(page_identifier, lang_or_wikiid, cb) {
  lang_or_wikiid = lang_or_wikiid || 'en';
  var identifier_type = 'titles';
  if (page_identifier.match(/^[0-9]*$/) && page_identifier.length > 3) {
    identifier_type = 'curid';
  }
  var url = void 0;
  if (site_map[lang_or_wikiid]) {
    url = site_map[lang_or_wikiid] + '/w/api.php';
  } else {
    url = 'https://' + lang_or_wikiid + '.wikipedia.org/w/api.php';
  }
  //we use the 'revisions' api here, instead of the Raw api, for its CORS-rules..
  url += '?action=query&prop=revisions&rvlimit=1&rvprop=content&format=json&origin=*';
  url += '&' + identifier_type + '=' + encodeURIComponent(page_identifier);

  request.get(url).end(function (err, res) {
    if (err || !res.body.query) {
      console.warn(err);
      cb(null);
      return;
    }
    var pages = res && res.body && res.body.query ? res.body.query.pages : {};
    var id = Object.keys(pages)[0];
    if (id) {
      var page = pages[id];
      if (page && page.revisions && page.revisions[0]) {
        var text = page.revisions[0]['*'];
        if (redirects.is_redirect(text)) {
          var result = redirects.parse_redirect(text);
          fetch(result.redirect, lang_or_wikiid, cb); //recursive
          return;
        }
        cb(text, page_identifier, lang_or_wikiid);
      } else {
        cb(null);
      }
    }
  });
};

module.exports = fetch;

// fetch('On_A_Friday', 'en', function(r) { // 'afwiki'
//   console.log(JSON.stringify(r, null, 2));
// });

},{"../data/site_map":13,"../parse/page/redirects":48,"superagent":4}],17:[function(_dereq_,module,exports){
'use strict';

var helpers = {
  capitalise: function capitalise(str) {
    if (str && typeof str === 'string') {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    return '';
  },
  onlyUnique: function onlyUnique(value, index, self) {
    return self.indexOf(value) === index;
  },
  trim_whitespace: function trim_whitespace(str) {
    if (str && typeof str === 'string') {
      str = str.replace(/^\s\s*/, '');
      str = str.replace(/\s\s*$/, '');
      str = str.replace(/ {2}/, ' ');
      str = str.replace(/\s, /, ', ');
      return str;
    }
    return '';
  }
};
module.exports = helpers;

},{}],18:[function(_dereq_,module,exports){
'use strict';

//find all the pairs of '[[...[[..]]...]]' in the text
//used to properly root out recursive template calls, [[.. [[...]] ]]
//basically just adds open tags, and subtracts closing tags
function find_recursive(opener, closer, text) {
  var out = [];
  var last = [];
  var chars = text.split('');
  var open = 0;
  for (var i = 0; i < chars.length; i++) {
    //incriment open tag
    if (chars[i] === opener) {
      open += 1;
    }
    //decrement close tag
    if (chars[i] === closer) {
      open -= 1;
      if (open < 0) {
        open = 0;
      }
    }
    if (open >= 0) {
      last.push(chars[i]);
    }
    if (open === 0 && last.length > 0) {
      //first, fix botched parse
      var open_count = last.filter(function (s) {
        return s === opener;
      });
      var close_count = last.filter(function (s) {
        return s === closer;
      });
      //is it botched?
      if (open_count.length > close_count.length) {
        last.push(closer);
      }
      //looks good, keep it
      out.push(last.join(''));
      last = [];
    }
  }
  return out;
}
module.exports = find_recursive;

// console.log(find_recursive('{', '}', 'he is president. {{nowrap|{{small|(1995–present)}}}} he lives in texas'));
// console.log(find_recursive("{", "}", "this is fun {{nowrap{{small1995–present}}}} and it works"))

},{}],19:[function(_dereq_,module,exports){
"use strict";

//#################################################################
//# Javascript Class: WikiConvert()
//#       SuperClass:
//#   Class Filename: wikiconvert.js
//#
//# Author of Class:      Engelbert Niehaus
//# email:                niehaus@uni-landau.de
//# created               21.1.2018
//# last modifications    2018/01/21 17:17:18
//# GNU Public License V3 - OpenSource
//#
//# created with JavaScript Class Creator JSCC
//#     https://niebert.github.io/JavascriptClassGenerator
//#################################################################

/*
This Library was created with JavascriptClassCreator
https://niebert.github.io/JavascriptClassCreator
The library is based on  wiki2HTML library of Elia Contini
publised under GPL.
Parses wiki markup and generates HTML 5 showing a preview.
   Copyright (C) 2010-2013 Elia Contini
    This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   any later version.
    This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
    You should have received a copy of the GNU General Public License
   along with this program. If not, see http://www.gnu.org/licenses/.
*/

//---------------------------------------------------------------------
//---Store File in Subdirectory /js and import this Class in HTML-File with
// SCRIPT-Tag:  LANGUAGE="JavaScript" SRC="js/wikiconvert.js"
//---------------------------------------------------------------------
//---Constructor of Class WikiConvert()
// Call the constructor for creating an instance of class WikiConvert
// by the following command in HTML-file that imports this class
// var vMyInstance = new WikiConvert();
//---------------------------------------------------------------------
//----Attributes-------------------------------------------------------
//---------------------------------------------------------------------
// If you want to access the attributes of WikiConvert, use
// the attribute name with a leading "this." in the definition of method of WikiConvert, e.g.
// this.aName = "Hello World";
//---------------------------------------------------------------------
//----Methods----------------------------------------------------------
//---------------------------------------------------------------------
// (1) If you want to assign definitions of methods for single instance of the class 'WikiConvert'
// they are defined with
//    this.my_method = function (pPar1,pPar2)
// this approach allows to overwrite the method definition of single instances dynamically.
//---------------------------------------------------------------------
// (2) A prototype definition of methods for 'WikiConvert' will be set by
// use the method's name and extend it with 'WikiConvert'.
//    WikiConvert.prototype.my_method = function (pPar1,pPar2)
// This approach consumes less memory for instances.
//---------------------------------------------------------------------

// no superclass defined


function WikiConvert() {
	// no superclass defined

	//---------------------------------------------------------------------
	//---Attributes of Class "WikiConvert()"
	//---------------------------------------------------------------------
	//---PUBLIC: aProjectDir (String): the attribute 'aProjectDir' stores in 'String' the relative path in the PanDoc root directory
	this.aWikiTitle = "Swarm intelligence";
	//---PUBLIC: aProjectDir (String): the attribute 'aProjectDir' stores in 'String' the relative path in the PanDoc root directory
	this.aProjectDir = "demo/my_article";
	//---PUBLIC: aRemoteMedia (Boolean): the attribute 'aRemoteMedia' stores in 'Boolean' variable if the MediaLinks are stored in the local file system of referenced to remote Media Server
	this.aRemoteMedia = false;
	//---PUBLIC: aLanguage ID (String): defines the Language of the MediaWiki
	this.aLanguage = "en";
	//---PUBLIC: aDomain(String): defines the MediaWiki product of Wiki Foundation "wikiversity", "wikipedia", ..
	this.aDomain = "wikiversity";
	//---PUBLIC: aTOC stored the TOC Table of Contents parsed from the section structure of the Wiki/HMTL file
	this.aTOC = [];
	this.aInsertTOC = true; // will be inserted in sections
	//---PUBLIC: aServer is set with the init(pLanguage,pDomain) together with aLanguage and aDomain
	this.aServer = "https://en.wikiversity.org/wiki/";
	//---PUBLIC: aMediaPath is used for downloading the embedded image resp. the referencing the images in the HTML
	this.aMediaPath = "https://en.wikiversity.org/wiki/Special:Redirect/file/";
	//---PUBLIC: aDocJSON is a Hash that collects the data while parsing the vWikiCode generated by wtf_wikipedia.js set by init()-call
	this.aDocJSON = {};
	// depricated replaced by aDocJSON
	this.aParseJSON = {};
	//---PUBLIC: aDefaultImageWidth is used if width of the image in not defined
	this.aDefaultImageWidth = 300;

	this.aMap = {};
	this.aMap["w"] = "wikipedia";
	this.aMap["wikipedia"] = "wikipedia";
	this.aMap["Wikipedia"] = "wikipedia";
	this.aMap["v"] = "wikiversity";
	this.aMap["wikiversity"] = "wikiversity";
	this.aMap["Wikiversity"] = "wikiversity";
	this.aMap["b"] = "wikibooks";
	this.aMap["wikibooks"] = "wikibooks";
	this.aMap["Wikibooks"] = "wikibooks";

	this.aFilePrefix = {};
	this.aFilePrefix["File"] = "File";
	this.aFilePrefix["file"] = "File";
	this.aFilePrefix["Datei"] = "File";
	this.aFilePrefix["Image"] = "File";

	this.aMediaArray = [];
	//this.aTplEngine = new TemplateEngine();


	//---------------------------------------------------------------------
	//---Methods of Class "WikiConvert()"
	//---------------------------------------------------------------------
	//----PUBLIC Method: WikiConvert.init(pLanguage,pDomain,pDocJSON)
	// init a converter with the language "en" and a domain "wikiversity" or "wikipedia"
	//----PUBLIC Method: WikiConvert.initArticle(pWikiTitle:String)
	// init the WikiConverter with a specific article Wiki Page Identifier
	//----PUBLIC Method: WikiConvert.convert(pWikiCode:String):String-----
	// convert(pWikiCode)  Return: String
	//	converts the MediaWiki code in argument and returns a corrected string
	//  that correct local image and wiki links into remote links and remotely embedded images
	//----PUBLIC Method: WikiConvert.clean_source(pWikiCode:String):String-----
	// clean_source(pWikiCode)  Return: String
	//	clean_source(pWikiCode) normalizes line breaks in order to have a common base string for all browsers.
	//	clean_source() uses the MediaWiki source code `pWikiCode` from the parameter of the function and returns a HTML string
	//	after removing all CRs.
	//----PUBLIC Method: WikiConvert.sections(pWikiCode:String):String-----
	// sections(pWikiCode)  Return: String
	//	Convert all sections in Wiki source code
	//----PUBLIC Method: WikiConvert.horizontalRule(pWikiCode:String):String-----
	// horizontalRule(pWikiCode)  Return: String
	//	Convert the  horizontal rules in Wiki source code
	//----PUBLIC Method: WikiConvert.inlineElement(pWikiCode:String):String-----
	// inlineElement(pWikiCode)  Return: String
	//	Convert for inline elements of the Wiki source code
	//----PUBLIC Method: WikiConvert.replaceImages(pWikiCode:String):String-----
	// replaceImages(pWikiCode)  Return: String
	//	Convert for inline elements of the Wiki source code
	//----PUBLIC Method: WikiConvert.math2jax(pWikiCode:String,pFormat:String):String-----
	// math2jax(pWikiCode,pFormat)  Return: String
	//	Convert the MATH-tag to a MathJax compatible HTML enviroment dependent of the pFormat of the parameter of math2jax.
	//	pFormat = 'reveal' 'html' are possible formats
	//----PUBLIC Method: WikiConvert.convertWiki2Local(pContent:String,:Hash):String-----
	// convertWiki2Local(pContent)  Return: String
	//	convertWiki2Local() replaces the MediaWiki internal links to links that work in a local HTML file. The parsed vMediaWiki Links
	//----PUBLIC Method: WikiConvert.parseWiki4Media(pWikiCode:String):Array-----
	// parseWiki4Media(pWikiCode)  Return: Array
	//	parseWiki4Media() the pWikiCode and extract the Media and File links.
	//----PUBLIC Method: WikiConvert.createMediaParseJSON(vMediaArray:Array)-----
	// createMediaParseJSON(vMediaArray)
	//	createMediaParseJSON(vMediaArray:Array) creates in this.aParseJSON["media"]={} a Hash
	//	that maps the local file path 'image/my_image.png' to the replace path
	//	this.aParseJSON["media"]["image/my_image.png"] = "https://commons.wikimedia.org/wiki/my_image.png"
	//----PUBLIC Method: WikiConvert.checkParseJSON(pHashID:String)-----
	// checkParseJSON(pHashID)
	//	checkParseJSON() checks if the File Link definitions exists in the pWikiHash["media"]
	//----PUBLIC Method: WikiConvert.getMediaSubDir(pMediaLink:String)-----
	// getMediaSubDir(pMediaLink)
	//	getMediaSubDir(pMediaLink) return for a pMediaLink the appropriate subdirectory.
	//----PUBLIC Method: WikiConvert.convertWikiMedia2File(pMediaLink:String):String-----
	// convertWikiMedia2File(pMediaLink)  Return: String
	//	convertWikiMedia2File(pMediaLink) converts the pMediaLink into an URL and returns the media link.
	//	removes blanks at the tail and replaces blanks with and underscore "_"
	//	and non-alpha-numerical characters with an underscore, so that finally the filename works fine on all file systems
	//----PUBLIC Method: WikiConvert.convertWikiMedia2URL(pMediaLink:String):String-----
	// convertWikiMedia2URL(pMediaLink)  Return: String
	//	convertWikiMedia2URL(pMediaLink) removes blanks at the tail and replaces blanks with and underscore "_"
	//----PUBLIC Method: WikiConvert.downloadWikiMedia(pMediaArray:Array)-----
	// downloadWikiMedia(pMediaArray)
	//	downloadWikiMedia(pMediaArray:Array) download the images to level-fs
	//	that can be exported as ZIP-file with archiver NPM module
	//----PUBLIC Method: WikiConvert.downloadMediaFile(pMediaLink:String)-----
	// downloadMediaFile(pMediaLink)
	//	downloadMediaFile(pMediaFile) from WikiMedia Commons to the local filesystem emulated with level-fs
	//----PUBLIC Method: WikiConvert.convertMediaLink4Wiki(pContent:String,pMediaArray:Array):String-----
	// convertMediaLink4Wiki(pContent,pMediaArray)  Return: String
	//	convertMediaLink4Wiki(pContent,pMediaWiki) convert the link
	//	- [[File:MyFile.png....   with
	//	- [File:https://commons.wikimedia.org/.../MyFile.png
	//----PUBLIC Method: WikiConvert.replaceString(pString:String,pSearch:String,pReplace:String):String-----
	// replaceString(pString,pSearch,pReplace)  Return: String
	//	replaceString(pString,pSearch,pReplace) replaces globally pSearch by pReplace and returns the modified string
	//----PUBLIC Method: WikiConvert.convertWiki2Online(pContent:String):String-----
	// convertWiki2Online(pContent)  Return: String
	//	convertWiki2Online(pContent) converts the Links and Media in way so that media and links
	//	are referenced to online resource to the server
	//----PUBLIC Method: WikiConvert.replaceWikiLinks(pWikiCode:String:Hash):String-----
	// replaceWikiLinks(pWikiCode)  Return: String
	//	Comment for replaceWikiLinks
	//----PUBLIC Method: WikiConvert.getWikiLinks(pWikiCode:String):String-----
	// getWikiLinks(pWikiCode)  Return: String
	//	getWikiLinks(pWikiCode) extract Double-Bracket [[...]] link in pWikiCode
	//----PUBLIC Method: WikiConvert.convertMediaLink4WikiOnline(pContent:String,pMediaArray:Array):String-----
	// convertMediaLink4WikiOnline(pContent,pMediaArray)  Return: String
	//	convertMediaLink4WikiOnline(pWikiCode,pMediaArray) converts Media Links to WikiMedia Commons
	//	to a remote link for local files

	//#################################################################
	//# PUBLIC Method: init()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pLanguage:String
	//#    pWikiID:String
	//# Comment:
	//#    parses the MediaWiki code in argument and returns a HTML string
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################


	WikiConvert.prototype.init = function (pLanguage, pDomain, pDocJSON) {
		this.aLanguage = pLanguage;
		this.aDomain = pDomain; // e.g. "wikiversity"
		this.aServer = "https://" + this.aLanguage + "." + this.aDomain + ".org/wiki/";
		this.aMediaPath = "https://" + this.aLanguage + "." + this.aDomain + ".org/wiki/Special:Redirect/file/";
		this.aDocJSON = pDocJSON || {};
		if (this.aDocJSON.hasOwnProperty("lang_or_wikiid")) {
			delete this.aDocJSON["lang_or_wikiid"];
		};
		this.aDocJSON["language"] = pLanguage;
		this.aDocJSON["domain"] = pDomain;
	};
	//----End of Method init Definition

	//#################################################################
	//# PUBLIC Method: initArticle()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//#    pWikiTitle:String
	//# Comment:
	//#    parses the MediaWiki code in argument and returns a HTML string
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################


	this.initArticle = function (pWikiTitle) {
		pWikiTitle = pWikiTitle || "Title undefined in convert()";
		var html = '<p>function wiki2html(pWikiCode): an error occurs</p>';
		this.aWikiTitle = pWikiTitle.replace(/_/g, " ");
		// set Title in DocJSON
		if (this.aDocJSON && this.aDocJSON.sections && this.aDocJSON.sections.length > 0) {
			// set Title in first section of aDocJSON
			this.aDocJSON.sections[0]["title"] = this.replaceString(this.aWikiTitle, "_", " ");
			// set Downloaded URL in aDocJSON
			this.aDocJSON["url"] = this.aServer + this.aWikiTitle;
			// set Download Time in aDocJSON
			var now = new Date();
			this.aDocJSON["date"] = now.toJSON();
		};
	};
	//----End of Method init Definition


	//#################################################################
	//# PUBLIC Method: convert()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//#    pWikiTitle:String
	//# Comment:
	//#    converts the MediaWiki code in argument and returns a HTML string
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.convert = function (pWikiCode, pWikiTitle) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: convert(pWikiCode:String):String");
		// alert("js/wikiconvert.js - Call: convert(pWikiCode:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.convert(pWikiCode);
		//-------------------------------------------------------

		// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/regexp
		this.initArticle(pWikiTitle);
		if (this.aRemoteMedia == true) {
			// remote Media links
			//pWikiCode = this.convertWiki2Online(pWikiCode);
		} else {
				// local media links - requires download of Media files for display
				//pWikiCode = this.convertWiki2Local(pWikiCode);
				// ZIP/archive downloaded files TODO
			};
		// saveJSON("wikidata.json",vParseJSON); // TODO
		pWikiCode = this.math2jax(pWikiCode);
		pWikiCode = this.math2reveal(pWikiCode);
		pWikiCode = this.replaceWikiLinks(pWikiCode);
		//pWikiCode = this.convertWiki2Local(pWikiCode);
		pWikiCode = this.replaceImages(pWikiCode);
		return pWikiCode || "";
	};
	//----End of Method convert Definition

	//#################################################################
	//# PUBLIC Method: clean_unsupported_wiki()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//# Comment:
	//#    clean_unsupported_wiki(pWikiCode) removes double bracket {{...}} Wiki commands.
	//#    clean_unsupported_wiki() uses the MediaWiki source code `pWikiCode` from the parameter of the function and returns a HTML string
	//#    after removing all {{...}} commands still left in Wiki Code.
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.clean_unsupported_wiki = function (pWikiCode) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: clean_unsupported_wiki(pWikiCode:String):String");
		// alert("js/wikiconvert.js - Call: clean_unsupported_wiki(pWikiCode:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.clean_unsupported_wiki(pWikiCode);
		//-------------------------------------------------------
		pWikiCode = pWikiCode.replace(/\{\{[^}]\}\}/g, '');
		return pWikiCode;
	};
	//----End of Method clean_unsupported_wiki Definition


	//#################################################################
	//# PUBLIC Method: clean_source()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//# Comment:
	//#    clean_source(pWikiCode) normalizes line breaks in order to have a common base string for all browsers.
	//#    clean_source() uses the MediaWiki source code `pWikiCode` from the parameter of the function and returns a HTML string
	//#    after removing all CRs.
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.clean_source = function (pWikiCode) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: clean_source(pWikiCode:String):String");
		// alert("js/wikiconvert.js - Call: clean_source(pWikiCode:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.clean_source(pWikiCode);
		//-------------------------------------------------------
		pWikiCode = this.replaceString(pWikiCode, "[[Image:", "[[File:");
		pWikiCode = this.replaceString(pWikiCode, "[[Datei:", "[[File:");
		pWikiCode = this.replaceString(pWikiCode, "|thumbnail|", "|thumb|");
		pWikiCode = this.replaceString(pWikiCode, "|thumbnail]]", "|thumb| ]]");
		pWikiCode = this.replaceString(pWikiCode, "|mini|", "|thumb|");
		pWikiCode = this.replaceString(pWikiCode, "|mini]]", "|thumb| ]]");
		//pWikiCode = pWikiCode.replace(/[|](thumbnail|mini)(\]|\|)/g,"|thumb$2");
		pWikiCode = pWikiCode.replace(/\r/g, '');
		return pWikiCode;
	};
	//----End of Method clean_source Definition


	//#################################################################
	//# PUBLIC Method: post_process()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//# Comment:
	//#    post_process(pWikiCode) normalizes line breaks in order to have a common base string for all browsers.
	//#    post_process() uses the MediaWiki source code `pWikiCode` from the parameter of the function and returns a HTML string
	//#    after removing all CRs.
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.post_process = function (pWikiCode) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: post_process(pWikiCode:String):String");
		// alert("js/wikiconvert.js - Call: post_process(pWikiCode:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.post_process(pWikiCode);
		//-------------------------------------------------------
		pWikiCode = this.replaceString(pWikiCode, "___IMG_OPEN___", "[[");
		pWikiCode = this.replaceString(pWikiCode, "___IMG_CLOSE___", "]]");
		//pWikiCode = pWikiCode.replace(/[|](thumbnail|mini)(\]|\|)/g,"|thumb$2");
		pWikiCode = pWikiCode.replace(/\r/g, '');
		return pWikiCode;
	};
	//----End of Method post_process Definition

	//#################################################################
	//# PUBLIC Method: removeCategories()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//# Comment:
	//#    removeCategories(pWikiCode) normalizes line breaks in order to have a common base string for all browsers.
	//#    removeCategories() uses the MediaWiki source code `pWikiCode` from the parameter of the function and returns a HTML string
	//#    after removing all CRs.
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.removeCategories = function (pWikiCode) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: removeCategories(pWikiCode:String):String");
		// alert("js/wikiconvert.js - Call: removeCategories(pWikiCode:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.removeCategories(pWikiCode);
		//-------------------------------------------------------
		//var vCatRegEx = /\[\[Category:(.[^\]]*)\]\]/g;
		//while(tokens = vCatRegEx.exec(pWikiCode)) {
		//}
		pWikiCode = pWikiCode.replace(/\[\[Category:(.[^\]]*)\]\]/g, '');

		return pWikiCode;
	};
	//----End of Method removeCategories Definition


	//#################################################################
	//# PUBLIC Method: replaceImages()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//# Comment:
	//#    Convert for inline elements of the Wiki source code
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.replaceImages = function (pWikiCode) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: replaceImages(pWikiCode:String):String");
		// alert("js/wikiconvert.js - Call: replaceImages(pWikiCode:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.replaceImages(pWikiCode);
		//-------------------------------------------------------

		//var image = /\[\[File:(.[^\]|]*)([|]thumb|frame|mini)?([|]alt=.[^\]|]*)?([|].[^\]|]*)?\]\]/g;
		var image = /\[\[File:(.[^\]]*)\]\]/g;
		var vTitle = "";
		var vAltText = "";
		var vClass = "image";
		var vURL = "";
		var vCaption = "";
		var tokens;
		while (tokens = image.exec(pWikiCode)) {
			vTitle = "";
			vAltText = "";
			//[[File:my Image.png|thumb|alt=Alternative Text|<a href="test.html">Test Comment</a> Image Comment]]
			//tokens[0]=my Image.png|thumb|alt=Alternative Text|<a href="test.html">Test Comment</a> Image Comment
			var vLinkSplit = tokens[0].split("|");
			vURL = this.getWikiMediaURL(vLinkSplit[0]);
			if (vLinkSplit.length == 1) {
				pWikiCode = pWikiCode.replace(tokens[0], '___IMG_OPEN___File:' + vURL + '___IMG_CLOS___');
			} else {
				if (vLinkSplit.length == 2) {
					vCaption = this.checkCaption(vLinkSplit[1]);
					pWikiCode = pWikiCode.replace(tokens[0], '___IMG_OPEN___File:' + vURL + '|' + vCaption + '___IMG_CLOSE___');
				} else {
					var vMediaParam = "";
					vCaption = this.checkCaption(vLinkSplit[vLinkSplit.length - 1]);
					for (var i = 1; i < vLinkSplit.length - 1; i++) {
						vMediaParam += "|" + vLinkSplit[i];
					};
					pWikiCode = pWikiCode.replace(tokens[0], '___IMG_OPEN___File:' + vURL + vMediaParam + '|' + vCaption + '___IMG_CLOSE___');
				}
			}; // else if vLineSplit.length
		}; // While tokens
		return pWikiCode;
	};
	//----End of Method replaceImages Definition


	//#################################################################
	//# PUBLIC Method: checkCaption()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pCaption:String
	//# Comment:
	//#    Correct a caption removes ]] at end
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.checkCaption = function (pCaption) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: checkCaption(pCaption:String):String");
		// alert("js/wikiconvert.js - Call: checkCaption(pCaption:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.checkCaption(pCaption);
		//-------------------------------------------------------
		if (pCaption) {
			pCaption = pCaption.replace(/[\]]+$/g, "");
		};
		console.log("Caption Figure: '" + pCaption + "' ");
		return pCaption;
	};
	//----End of Method checkCaption Definition


	//#################################################################
	//# PUBLIC Method: math2jax()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//#    pFormat:String
	//# Comment:
	//#    Convert the MATH-tag to a MathJax compatible HTML enviroment dependent of the pFormat of the parameter of math2jax.
	//#    pFormat = 'reveal' 'html' are possible formats
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.math2jax = function (pWikiCode, pFormat) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: math2jax(pWikiCode:String,pFormat:String):String");
		// alert("js/wikiconvert.js - Call: math2jax(pWikiCode:String,pFormat:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.math2jax(pWikiCode,pFormat);
		//-------------------------------------------------------
		pWikiCode = pWikiCode.replace(/\\R /g, "\\mathbb R ");
		pWikiCode = pWikiCode.replace(/\\R\^/g, "\\mathbb R^");
		pWikiCode = pWikiCode.replace(/\\R</g, "\\mathbb R<");
		pWikiCode = pWikiCode.replace(/\\R\s/g, "\\mathbb R ");
		//pWikiCode =this.replaceString(pWikiCode,'\\','\mathbb R \\');
		return pWikiCode;
	};
	//----End of Method math2jax Definition


	//#################################################################
	//# PUBLIC Method: mathsymbols()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//#    pFormat:String
	//# Comment:
	//#    Convert math symbols for proper handling in MathJax
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.mathsymbols = function (pWikiCode) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: mathsymbols(pWikiCode:String):String");
		// alert("js/wikiconvert.js - Call:  mathsymbols(pWikiCode:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    pWikiCode = vMyInstance.mathsymbols(pWikiCode);
		//-------------------------------------------------------
		pWikiCode = pWikiCode.replace(/\\R /g, "\\mathbb R ");
		pWikiCode = pWikiCode.replace(/\\R\^/g, "\\mathbb R^");
		pWikiCode = pWikiCode.replace(/\\R</g, "\\mathbb R<");
		pWikiCode = pWikiCode.replace(/\\R\s/g, "\\mathbb R ");
		//pWikiCode =this.replaceString(pWikiCode,'\\','\mathbb R \\');
		return pWikiCode;
	};
	//----End of Method math2jax Definition


	//#################################################################
	//# PUBLIC Method: math2reveal()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//# Comment:
	//#    Convert math symbols for proper handling in MathJax
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.math2reveal = function (pWikiCode) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: math2reveal(pWikiCode:String):String");
		// alert("js/wikiconvert.js - Call:  math2reveal(pWikiCode:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    pWikiCode = vMyInstance.math2reveal(pWikiCode);
		//-------------------------------------------------------
		//pWikiCode = pWikiCode.replace(/\\R /g,"\\mathbb R ");
		//pWikiCode =this.replaceString(pWikiCode,'\\','\mathbb R \\');
		return pWikiCode;
	};
	//----End of Method math2reveal() Definition


	//#################################################################
	//# PUBLIC Method: convertWiki2Local()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pContent:String
	//# Comment:
	//#    convertWiki2Local() replaces the MediaWiki internal links to links that work in a local HTML file. The parsed vMediaWiki Links
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.convertWiki2Local = function (pContent) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: convertWiki2Local(pContent:String):String");
		// alert("js/wikiconvert.js - Call: convertWiki2Local(pContent:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.convertWiki2Local(pContent);
		//-------------------------------------------------------

		pContent = this.replaceWikiLinks(pContent);
		var vMediaArray = this.parseWiki4Media(pContent);
		this.createMediaParseJSON(vMediaArray);
		this.downloadWikiMedia(vMediaArray);
		pContent = this.convertMediaLink4Wiki(pContent, vMediaArray);
		return pContent;
	};
	//----End of Method convertWiki2Local Definition


	//#################################################################
	//# PUBLIC Method: parseWiki4Media()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//# Comment:
	//#    parseWiki4Media() the pWikiCode and extract the Media and File links.
	//# Return: Array
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.parseWiki4Media = function (pWikiCode) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: parseWiki4Media(pWikiCode:String):Array");
		// alert("js/wikiconvert.js - Call: parseWiki4Media(pWikiCode:String):Array");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.parseWiki4Media(pWikiCode);
		//-------------------------------------------------------
		// the following code is performed in clean_source()
		//pWikiCode = this.replaceString(pWikiCode,"[[Image:","[[File:");
		//pWikiCode = this.replaceString(pWikiCode,"[[Datei:","[[File:");
		var vMediaArray = [];
		// (1) find the image specs "my_image.png|330px|thumb|My Caption" in "[[File:my_image.png|330px|thumb|My Caption]]"
		//var vSearch = /\[(File|Datei|Image):([^\|]*)/;
		// (2) find just the filename "my_image.png" in "[[File:my_image.png|330px|thumb|My Caption]]"
		var vSearch = /\[(?:File|Image|Datei):([^\|\]]+)/g;
		// \[            # "["
		// (?:            # non-capturing group
		//  File|Image|Datei        #   "File" or "Image" or "Datei"
		// )              # end non-capturing group
		//:             # ":"
		//(              # group 1
		//  [^\|\]]+      #   any character except "|" or "]" at least once
		// )              # end group 1 - this will be the image's name
		var vResult;
		var vCount = 0;
		while (vResult = vSearch.exec(pWikiCode)) {
			vCount++;
			vMediaArray.push(vResult[1]);
			console.log("Media " + vCount + ": '" + vResult[1] + "' found");
		};
		return vMediaArray;
	};
	//----End of Method parseWiki4Media Definition


	//#################################################################
	//# PUBLIC Method: createMediaParseJSON()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    vMediaArray:Array
	//# Comment:
	//#    createMediaParseJSON(vMediaArray:Array) creates in this.aParseJSON["media"]={} a Hash
	//#    that maps the local file path 'image/my_image.png' to the replace path
	//#    this.aParseJSON["media"]["image/my_image.png"] = "https://commons.wikimedia.org/wiki/my_image.png"
	//#
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.createMediaParseJSON = function (pMediaArray) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: createMediaParseJSON(vMediaArray:Array)");
		// alert("js/wikiconvert.js - Call: createMediaParseJSON(vMediaArray:Array)");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.createMediaParseJSON(vMediaArray);
		//-------------------------------------------------------

		var vMediaFile = "";
		var vSubDir = "";
		var vLocalID = "";
		var vID = "";
		this.checkParseJSON("media");
		this.aParseJSON["media"] = {};
		for (var i = 0; i < pMediaArray.length; i++) {
			vID = this.convertWikiMedia2ID(pMediaArray[i]);
			//this.aParseJSON[vMediaArray[i]] = vLocalID;
			this.aParseJSON["media"][vID] = this.getImageProps(pMediaArray[i]);
			// Hash contains all properties of the image
			//	"title": "Title of "+vMediaFile,
			//	"file": vMediaFile,
			//	"subdir": vSubDir + "/",
			//	"mediastring": pMediaArray[i],
			//	"url": "url-undefined",
			//	"align":"left"
		};
	};
	//----End of Method createMediaParseJSON Definition


	//#################################################################
	//# PUBLIC Method: checkParseJSON()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pHashID:String
	//# Comment:
	//#    checkParseJSON() checks if the File Link definitions exists in the pWikiHash["media"]
	//#
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.checkParseJSON = function (pHashID) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: checkParseJSON(pHashID:String)");
		// alert("js/wikiconvert.js - Call: checkParseJSON(pHashID:String)");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.checkParseJSON(pHashID);
		//-------------------------------------------------------
		if (this.aParseJSON[pHashID]) {
			console.log("ParseJSON['" + pHashID + "']  exists!");
		} else {
			this.aParseJSON[pHashID] = {};
		};
	};
	//----End of Method checkParseJSON Definition


	//#################################################################
	//# PUBLIC Method: getMediaSubDir()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pMediaLink:String
	//# Comment:
	//#    getMediaSubDir(pMediaLink) return for a pMediaLink the appropriate subdirectory.
	//#
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.getMediaSubDir = function (pMediaLink) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: getMediaSubDir(pMediaLink:String)");
		// alert("js/wikiconvert.js - Call: getMediaSubDir(pMediaLink:String)");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.getMediaSubDir(pMediaLink);
		//-------------------------------------------------------
		var vMediaFile = "";
		var vSubDir = "";
		if (pMediaLink) {
			vSubDir = this.getMediaSubDir(pMediaLink);
			vMediaFile = this.convertWikiMedia2File(pMediaLink);
			vSubDir = vSubDir + "/" + vMediaFile;
		};
		return vSubDir;
	};
	//----End of Method getMediaSubDir Definition

	//#################################################################
	//# PUBLIC Method: correct_filename()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pFilename:String
	//# Return: String
	//# Comment:
	//#    convert filename to local filename
	//#
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################
	this.correct_filename = function (pFileName) {
		pFileName = pFileName.replace(/[^\/\\A-Za-z0-9\.]/g, "_");
		pFileName = pFileName.replace(/[_]+/g, "_");
		return pFileName;
	};

	//#################################################################
	//# PUBLIC Method: getMediaSubDir()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pFilename:String
	//# Return: String
	//# Comment:
	//#    get Subdirectory according to file extension
	//#
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################
	this.getMediaSubDir = function (pFileName) {
		if (pFileName) {
			this.correct_filename(pFileName);
		};
		return pFileName;
	};

	//#################################################################
	//# PUBLIC Method: convertWikiMedia2File()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pMediaLink:String
	//# Comment:
	//#    convertWikiMedia2File(pMediaLink) converts the pMediaLink into an URL and returns the media link.
	//#    removes blanks at the tail and replaces blanks with and underscore "_"
	//#    and non-alpha-numerical characters with an underscore, so that finally the filename works fine on all file systems
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.convertWikiMedia2File = function (pMediaLink) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: convertWikiMedia2File(pMediaLink:String):String");
		// alert("js/wikiconvert.js - Call: convertWikiMedia2File(pMediaLink:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.convertWikiMedia2File(pMediaLink);
		//-------------------------------------------------------
		var vMediaFile = "";

		var vPathSplit = pMediaLink.split("/");
		if (vPathSplit.length > 0) {
			vMediaFile = vPathSplit[vPathSplit.length - 1];
			//vMediaFile = this.correct_filename(vMediaFile);
		} else {
			console.log("ERROR: pMediaLink='" + pMediaLink + "' is not defined");
		};
		return vMediaFile;
	};
	//----End of Method convertWikiMedia2File Definition


	//#################################################################
	//# PUBLIC Method: convertWikiMedia2URL()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pMediaLink:String
	//# Comment:
	//#    convertWikiMedia2URL(pMediaLink) removes blanks at the tail and replaces blanks with and underscore "_"
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.convertWikiMedia2URL = function (pMediaLink) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: convertWikiMedia2URL(pMediaLink:String):String");
		// alert("js/wikiconvert.js - Call: convertWikiMedia2URL(pMediaLink:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.convertWikiMedia2URL(pMediaLink);
		//-------------------------------------------------------

		pMediaLink = pMediaLink.replace(/[ \t]+$/, "");
		pMediaLink = pMediaLink.replace(/ /g, "_");
		//console.log("MediaLink: '"+pMediaLink+"'");
		return pMediaLink;
	};
	//----End of Method convertWikiMedia2URL Definition

	//#################################################################
	//# PUBLIC Method: convertWikiMedia2ID()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pMediaLink:String
	//# Comment:
	//#    convertWikiMedia2ID(pMediaLink) removes blanks at the tail and replaces blanks with and underscore "_"
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.convertWikiMedia2ID = function (pMediaLink) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: convertWikiMedia2ID(pMediaLink:String):String");
		// alert("js/wikiconvert.js - Call: convertWikiMedia2ID(pMediaLink:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.convertWikiMedia2ID(pMediaLink);
		//-------------------------------------------------------

		pMediaLink = this.convertWikiMedia2URL(pMediaLink);
		pMediaLink = pMediaLink.replace(/[^A-Za-z0-9_]/g, "_");
		pMediaLink = pMediaLink.replace(/[_]+/g, "_");
		//console.log("MediaLink: '"+pMediaLink+"'");
		return pMediaLink;
	};
	//----End of Method convertWikiMedia2ID Definition

	//#################################################################
	//# PUBLIC Method: downloadWikiMedia()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pMediaArray:Array
	//# Comment:
	//#    downloadWikiMedia(pMediaArray:Array) download the images to level-fs
	//#    that can be exported as ZIP-file with archiver NPM module
	//#
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.downloadWikiMedia = function (pMediaArray) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: downloadWikiMedia(pMediaArray:Array)");
		// alert("js/wikiconvert.js - Call: downloadWikiMedia(pMediaArray:Array)");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.downloadWikiMedia(pMediaArray);
		//-------------------------------------------------------

		for (var i = 0; i < pMediaArray.length; i++) {
			this.downloadMediaFile(pMediaArray[i]);
		};
	};
	//----End of Method downloadWikiMedia Definition


	//#################################################################
	//# PUBLIC Method: downloadMediaFile()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pMediaLink:String
	//# Comment:
	//#    downloadMediaFile(pMediaFile) from WikiMedia Commons to the local filesystem emulated with level-fs
	//#
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.downloadMediaFile = function (pMediaLink) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: downloadMediaFile(pMediaLink:String)");
		// alert("js/wikiconvert.js - Call: downloadMediaFile(pMediaLink:String)");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.downloadMediaFile(pMediaLink);
		//-------------------------------------------------------
		var vSubDir = this.getMediaSubDir(pMediaLink);
		// convertWikiMedia2File "http://www,srv.org/img/my_image.png" to  "my_image.png"
		var vMediaFile = this.convertWikiMedia2File(pMediaLink);
		// add a subdirectory according to file type
		// e.g."my_image.png" to "img/my_image.png"
		// or  "my_music.mp3" to "audio/my_music.mp3"
		// or  "my_video.webm" to "video/my_video.webm"
		var vLocalLink = vSubDir + "/" + vMediaFile;
		var vWGET_CMD = "wget -O " + this.aProjectDir + "/" + vLocalLink + " " + pMediaLink;
		console.log("CALL WGET: " + vWGET_CMD + " (e.g. in NodeJS)");
		//
		console.log("Download Media File '" + pMediaLink + "' to folder '" + this.aProjectDir + "' not implemented yet");
	};
	//----End of Method downloadMediaFile Definition


	//#################################################################
	//# PUBLIC Method: convertMediaLink4Wiki()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pContent:String
	//#    pMediaArray:Array
	//# Comment:
	//#    convertMediaLink4Wiki(pContent,pMediaWiki) convert the link
	//#    - [[File:MyFile.png....   with
	//#    - [File:https://commons.wikimedia.org/.../MyFile.png
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.convertMediaLink4Wiki = function (pWikiCode, pMediaArray) {
		//----Debugging------------------------------------------
		console.log("js/wikiconvert.js - Call: convertMediaLink4Wiki(pWikiCode:String,pMediaArray:Array):String");
		// alert("js/wikiconvert.js - Call: convertMediaLink4Wiki(pContent:String,pMediaArray:Array):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.convertMediaLink4Wiki(pContent,pMediaArray);
		//-------------------------------------------------------

		var vReplaceLink;
		var vMediaFile;
		var vSubDir;
		var vLinkHTML;

		pWikiCode = pWikiCode.replace(/\[(File|Image|Datei):/gi, "[File:");

		for (var i = 0; i < pMediaArray.length; i++) {
			vSubDir = this.getMediaSubDir(pMediaArray[i]);
			// convertWikiMedia2File "http://www,srv.org/img/my_image.png" to  "my_image.png"
			vMediaFile = this.convertWikiMedia2File(pMediaArray[i]);
			// add a subdirectory according to file type
			// e.g."my_image.png" to "img/my_image.png"
			// or  "my_music.mp3" to "audio/my_music.mp3"
			// or  "my_video.webm" to "video/my_video.webm"
			vReplaceLink = vSubDir + "/" + vMediaFile;

			pWikiCode = this.replaceString(pWikiCode, "File:" + pMediaArray[i], "File:" + vReplaceLink);
		};
		return pWikiCode;
	};
	//----End of Method convertMediaLink4Wiki Definition


	//#################################################################
	//# PUBLIC Method: replaceString()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pString:String
	//#    pSearch:String
	//#    pReplace:String
	//# Comment:
	//#    replaceString(pString,pSearch,pReplace) replaces globally pSearch by pReplace and returns the modified string
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.replaceString = function (pString, pSearch, pReplace) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: replaceString(pString:String,pSearch:String,pReplace:String):String");
		// alert("js/wikiconvert.js - Call: replaceString(pString:String,pSearch:String,pReplace:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.replaceString(pString,pSearch,pReplace);
		//-------------------------------------------------------

		//alert("cstring.js - replaceString() "+pString);
		if (!pString) {
			alert("replaceString()-Call - pString not defined!");
		} else if (pString != '') {
			//alert("cstring.js - replaceString() "+pString);
			var vHelpString = '';
			var vN = pString.indexOf(pSearch);
			var vReturnString = '';
			while (vN >= 0) {
				if (vN > 0) vReturnString += pString.substring(0, vN);
				vReturnString += pReplace;
				if (vN + pSearch.length < pString.length) {
					pString = pString.substring(vN + pSearch.length, pString.length);
				} else {
					pString = '';
				};
				vN = pString.indexOf(pSearch);
			};
			return vReturnString + pString;
		};
	};
	//----End of Method replaceString Definition


	//#################################################################
	//# PUBLIC Method: convertWiki2Online()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pContent:String
	//# Comment:
	//#    convertWiki2Online(pContent) converts the Links and Media in way so that media and links
	//#    are referenced to online resource to the server
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.convertWiki2Online = function (pContent) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: convertWiki2Online(pContent:String):String");
		// alert("js/wikiconvert.js - Call: convertWiki2Online(pContent:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.convertWiki2Online(pContent);
		//-------------------------------------------------------

		var vMediaArray = this.parseWiki4Media(pContent);
		// this.downloadWikiMedia(vMediaArray);
		pContent = this.convertMediaLink4WikiOnline(pContent, vMediaArray);
		pContent = this.replaceWikiLinks(pContent);
		return pContent;
	};
	//----End of Method convertWiki2Online Definition


	//#################################################################
	//# PUBLIC Method: replaceWikiLinks()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//# Comment:
	//#    Comment for replaceWikiLinks
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.replaceWikiLinks = function (pWikiCode) {
		//----Debugging------------------------------------------
		console.log("js/wikiconvert.js - Call: replaceWikiLinks(pWikiCode:String):String");
		// alert("js/wikiconvert.js - Call: replaceWikiLinks(pWikiCode:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.replaceWikiLinks(pWikiCode);
		//-------------------------------------------------------

		var vLinkArray = this.getWikiLinks(pWikiCode);
		var vURL, Title, vLink, vLocalLink;
		var vPipePos = 0;
		var vColonPos = 0;
		this.aMediaArray = [];
		this.checkParseJSON("links");
		var vCount = 0;
		for (var i = 0; i < vLinkArray.length; i++) {
			vLink = vLinkArray[i];
			vPipePos = vLink.indexOf("|");
			if (vPipePos > 0) {
				//Wiki-Link 1: '/Birds/|Swarm of Birds' found
				//Wiki-Link 2: 'Water|Water Learning Resource' found
				//Wiki-Link 3: 'w:Water|Water Wikipedia' found
				//Wiki-Link 4: 'v:Water|Water Wikiversity' found
				vURL = vLink.substr(0, vPipePos);
				vTitle = vLink.substr(vPipePos + 1, vLink.length);
			} else {
				//Wiki-Link 1: 'Swarm Intelligence' found
				//Wiki-Link 2: 'Water' found
				//Wiki-Link 3: '/Birds/' found
				vURL = vLink;
				vTitle = vLink.replace(/\//g, "");
			};
			//Wiki-Link 1: 'w:Water|Water Wikipedia' found
			//Wiki-Link 4: 'Wikiversity:Water|Water Wikiversity' found
			vColonPos = vURL.indexOf(":");
			if (vColonPos > 0) {
				//for Wikipedia:Water vLinkSplit[0]= "Wikipedia" -> is a not interwikilink
				// link contains colon ":"
				var vColonPrefix = vURL.substr(0, vColonPos);
				//vColonPrefix w,v,Wikipedia,wikiversity Interwiki Link
				if (vColonPrefix.toLowerCase() == "category") {
					// [[Category:Risk management]]
					console.log("Category with Local Wiki Link '" + vURL + "' found");
					vURL = this.getWikiDisplayURL(vURL);
					vLocalLink = "[" + vURL + " " + vTitle + "]";
					//pWikiCode = this.replaceString(pWikiCode,"[["+vLink+"]]",vLocalLink);
					// for reverse replacement to online Wikipedia or Wikiversity store replacement in ParseJSON
					this.aParseJSON["links"][vLocalLink] = "[" + vLink + "]";
				} else if (this.aFilePrefix.hasOwnProperty(vColonPrefix)) {
					console.log("URL: '" + vURL + "' is an image, do not replace by URL text reference.");
					this.aMediaArray.push(vURL);
				} else if (this.aMap.hasOwnProperty(vColonPrefix)) {
					// do something for interwiki links
					console.log("Inter Wiki Link '" + vURL + "' found");
					vURL = this.getWikiDisplayURL(vURL);
					vLocalLink = "[" + vURL + " " + vTitle + "]";
					pWikiCode = this.replaceString(pWikiCode, "[[" + vLink + "]]", vLocalLink);
					// for reverse replacement to online Wikipedia or Wikiversity store replacement in ParseJSON
					this.aParseJSON["links"][vLocalLink] = "[" + vLink + "]";
				}
			} else {
				console.log("Local Wiki Link '" + vURL + "' found");
				vURL = this.getWikiDisplayURL(vURL);
				vLocalLink = "[" + vURL + " " + vTitle + "]";
				pWikiCode = this.replaceString(pWikiCode, "[[" + vLink + "]]", vLocalLink);
				// for reverse replacement to online Wikipedia or Wikiversity store replacement in ParseJSON
				this.aParseJSON["links"][vLocalLink] = "[" + vLink + "]";
			};
		};
		// Replace External Links: [http://www.example.com Example Server]
		// var external_links = /\[(https:\/\/|http:\/\/)([a-zA-Z0-9].[^\s]*) ([a-zA-Z0-9].[^\]]*)\]/g;
		// pWikiCode = pWikiCode.replace(external_links, '<a href="$1$2" target="_blank">$3</a>');

		return pWikiCode;
	};
	//----End of Method replaceWikiLinks Definition

	//#################################################################
	//# PUBLIC Method: getWikiDisplayURL()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//# Comment:
	//#    expand a local link to the full Wiki Display URL
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.getWikiDisplayURL = function (pLink) {
		var vLanguage = this.aLanguage;
		var vServer = this.aLanguage + "." + this.aDomain + ".org";
		console.log("getWikiDisplayURL('" + pLink + "') vServer='" + vServer + "'");
		var vMap = this.aMap;
		pLink = pLink || "undefined link";
		pLink = this.replaceString(pLink, " ", "_");
		var vLinkArr = pLink.split(":");
		// pLink = "Wikipedia:Water"
		var vArticle = pLink;
		// vArticle = "Water"
		if (vLinkArr.length == 2) {
			// Wikipedia:Swarm_intelligence
			// w:Swarm_intelligence
			// /Slime_mold/
			// Category:Risk Management
			if (vLinkArr[0].toLowerCase() == "category") {
				// Category:Risk Management
				vArticle = pLink || "undefined_wiki_link";
			} else {
				// w:Swarm_intelligence
				vServer = vLanguage + "." + vMap[vLinkArr[0]] + ".org";
				vArticle = vLinkArr[1] || "undefined_wiki_link";
			};
		} else if (vLinkArr.length == 3) {
			// w:en:Swarm_intelligence
			// [[Wikipedia:Category:Risk Management]]
			var vLinkLanguage = this.aLanguage;
			var vLinkDomain = this.aDomain;
			if (vLinkArr[1].toLowerCase() == "category") {
				// [[Wikipedia:Category:Risk Management]]
				vArticle = vLinkArr[1] + ":" + vLinkArr[2] || "undefined_category";
				// vArticle = "Category:Risk Management"
			} else {
				vArticle = vLinkArr[2] || "undefined_wiki_link";
				// w:en:Swarm_intelligence
				vLinkLanguage = vLinkArr[1]; // vLinkArr[1] = "en"
				vLinkDomain = vMap[vLinkArr[0]]; // map "w" to "wikipedia"
			};
			vServer = vLinkLanguage + "." + vLinkDomain + ".org";
		} else if (vArticle.indexOf("/") == 0) {
			// Link: "/Slime mold/"
			vArticle = this.aWikiTitle + vArticle;
			// Link: "Swarm intelligence/Slime mold/ "
			vArticle = vArticle.replace(/[\/\s]+$/i, "");
			// Link: "Swarm intelligence/Slime mold"
		};
		vArticle = this.replaceString(vArticle, " ", "_");
		// Link: "Swarm_intelligence/Slime_mold"
		return "https://" + vServer + "/wiki/" + vArticle;
	};

	//#################################################################
	//# PUBLIC Method: getWikiMediaURL()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pFileName:String
	//# Comment:
	//#
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################
	this.getWikiMediaURL = function (pFileName) {
		pFileName = pFileName.replace(/^\[\[(File|Image|Datei):/gi, "");
		pFileName = pFileName.replace(/[\]]+$/gi, "");
		pFileName = pFileName.replace(/\s/g, "_");
		return this.aMediaPath + pFileName;
	};

	//#################################################################
	//# PUBLIC Method: getWikiDisplayURL()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pFilename:String
	//# Comment:
	//#
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.getMediaFileType = function (pFileName) {
		var vType = "none";
		if (/\.(jpe?g|png|gif|bmp)$/i.test(pFileName)) {
			vType = "img";
		};
		if (/\.(svg)$/i.test(pFileName)) {
			vType = "svg";
		};
		if (/\.(mp4|webm|mov|avi|mpe?g|ogv)$/i.test(pFileName)) {
			vType = "video";
		};
		if (/\.(mp3|wav|ogg|mid)$/i.test(pFileName)) {
			vType = "audio";
		};
		return vType;
	};

	//#################################################################
	//# PUBLIC Method: getWikiLinks()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pWikiCode:String
	//# Comment:
	//#    getWikiLinks(pWikiCode) extract Double-Bracket [[...]] link in pWikiCode
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.getWikiLinks = function (pWikiCode) {
		//----Debugging------------------------------------------
		// console.log("js/wikiconvert.js - Call: getWikiLinks(pWikiCode:String):String");
		// alert("js/wikiconvert.js - Call: getWikiLinks(pWikiCode:String):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.getWikiLinks(pWikiCode);
		//-------------------------------------------------------

		// Wiki Links are open with ""
		var vLinkArray = [];
		//var vSearch = /\[(File|Datei|Image):([^\|]*)/;
		var vSearch = /\[\[([^\[\]]+)\]\]/g;
		// \[\[         # "[["
		//(             # group 1
		//  [^\[\]]+    #   any character except "[" and "]" ":" at least once
		// )            # end group 1 - this will be the image's name
		// \]\]         # "]]"
		var vResult;
		var vCount = 0;
		var vLink = "";
		var vLinkSplit;
		var vType = "";
		while (vResult = vSearch.exec(pWikiCode)) {
			vCount++;
			vLinkSplit = vResult[1].split(":");
			if (vLinkSplit.length == 1) {
				// link contains no colon ":"
				vLinkArray.push(vResult[1]);
			} else if (this.aMap.hasOwnProperty(vLinkSplit[0])) {
				//for Wikipedia:Water vLinkSplit[0]= "Wikipedia" -> is a wikilink
				vLinkArray.push(vResult[1]);
				console.log("Wiki-Link ('" + vLinkSplit[0] + "') " + vCount + ": '" + vResult[1] + "' found");
			} else if (vLinkSplit[0].toLowerCase() == "category") {
				//for Wikipedia:Water vLinkSplit[0]= "Wikipedia" -> is a wikilink
				vLinkArray.push(vResult[1]);
				console.log("Wiki-Category-Link ('" + vLinkSplit[0] + "') " + vCount + ": '" + vResult[1] + "' found");
			} else {
				console.log("Wiki-File " + vCount + ": '" + vResult[1] + "' found");
				//for File:Water.png vLinkSplit[0]= "File" not an own property of aMap -> not a Link
			};
		};
		return vLinkArray;
	};
	//----End of Method getWikiLinks Definition


	//#################################################################
	//# PUBLIC Method: convertMediaLink4WikiOnline()
	//#    used in Class: WikiConvert
	//# Parameter:
	//#    pContent:String
	//#    pMediaArray:Array
	//# Comment:
	//#    convertMediaLink4WikiOnline(pWikiCode,pMediaArray) converts Media Links to WikiMedia Commons
	//#    to a remote link for local files
	//# Return: String
	//# created with JSCC  2017/03/05 18:13:28
	//# last modifications 2018/01/21 17:17:18
	//#################################################################

	this.convertMediaLink4WikiOnline = function (pWikiCode, pMediaArray) {
		//----Debugging------------------------------------------
		console.log("js/wikiconvert.js - Call: convertMediaLink4WikiOnline(pContent:String,pMediaArray:Array):String");
		// alert("js/wikiconvert.js - Call: convertMediaLink4WikiOnline(pContent:String,pMediaArray:Array):String");
		//----Create Object/Instance of WikiConvert----
		//    var vMyInstance = new WikiConvert();
		//    vMyInstance.convertMediaLink4WikiOnline(pContent,pMediaArray);
		//-------------------------------------------------------

		var vReplaceLink;
		var vMediaFile;
		var vPathArray;

		// "File:" "Image:" "Datei:" will be replaced "File:" by clean_source()
		//pWikiCode = pWikiCode.replace(/\[\[(File|Image|Datei):/gi,"[[File:");

		//var vSearch = /\[(File|Datei|Image):([^\|]*)/;
		var vSearch = /(\[\[File:[^\]]+\]\])/g;
		// (              # begin capturing group
		// \[\[           # "[["
		//  File:         #   "File:"
		//  [^\]]+        #   any character except  "]" at least once
		// \]\]           # "]]"
		// )              # end capturing group
		var vResult;
		var vCount = 0;
		var vReplaceArray = [];
		while (vResult = vSearch.exec(pWikiCode)) {
			vCount++;
			console.log("Media " + vCount + ": '" + vResult[1] + "' replace into IMG-tag");
			vReplaceArray.push(vResult[1]);
		};
		if (vReplaceArray.length == pMediaArray.length) {
			for (var i = 0; i < pMediaArray.length; i++) {
				//vPathArray = (pMediaArray[i]).split("/");
				//vMediaFile = vPathArray[vPathArray.length-1];
				vMediaFile = pMediaArray[i];
				var vFileSplit = vMediaFile.split("|");
				vMediaFile = vFileSplit[0];
				var vWidth = this.aDefaultImageWidth;
				var vCenterImage = false;
				for (var i = 1; i < vFileSplit.length; i++) {
					if (vFileSplit[i].match(/^[0-9]+px$/)) {
						//vFileSplit[i] = "350px"
						vWidth = vFileSplit[i].replace(/[^0-9]/g, "");
						//vFileSplit[i] = "350"
					} else if (vFileSplit[i] == "center") {
						vCenterImage = true;
					};
				};
				var vCaption = "";
				if (vFileSplit.length > 1) {
					//[[File:My File.png|center|400px|My Caption "Title"]]
					vCaption = this.checkCaption(vFileSplit[vFileSplit.length - 1]);
					// vCaption ="My Caption \"Title\""
					vCaption = this.replaceString(vCaption, "\"", "'");
					// vCaption ="My Caption 'Title'
				};
				// ReplaceLink created as image-tag
				vReplaceLink = "<img src=\"" + this.getWikiMediaURL(vMediaFile) + "\" width=\"" + vWidth + "\" ";
				if (vCaption != "") {
					vReplaceLink += " alt=\"" + vCaption + "\" title=\"" + vCaption + "\"";
				};
				if (vCenterImage == true) {
					vReplaceLink += " align=\"middle\" ";
				};
				vReplaceLink += ">";
				// add figcaption if aAddFigCaption as attribute is true
				if (this.aAddFigCaption == true) {
					vCaption = this.checkCaption(vCaption);
					vReplaceLink += "\n<figcaption>" + vCaption + "</figcaption>";
				};
				// wrap image into <figure>-tag
				vReplaceLink = "<figure>\n   " + vReplaceLink + "</figure>";
				//pWikiCode = this.replaceString(pWikiCode,vReplaceArray[i],vReplaceLink);
			};
		} else {
			console.log("ERROR: Replace Link for MediaLinks do not have the same length");
		};
		return pWikiCode;
	};
	//----End of Method convertMediaLink4WikiOnline Definition

	this.getImageProps = function (pMediaLink) {
		var vImgProps = {
			"title": "",
			"file": "",
			"url": "",
			"mediastring": pMediaLink,
			"subdir": "images/",
			"width": this.aDefaultImageWidth,
			"align": "left",
			"thumb": true,
			"frame": false
		};

		var vFileSplit = pMediaLink.split("|");
		vMediaFile = vFileSplit[0];
		var vWidth = this.aDefaultImageWidth;
		var vCenterImage = false;
		for (var i = 1; i < vFileSplit.length; i++) {
			if (vFileSplit[i].match(/^[0-9]+px$/)) {
				//vFileSplit[i] = "350px"
				vImgProps["width"] = vFileSplit[i].replace(/[^0-9]/g, "");
				//vFileSplit[i] = "350"
			} else if (vFileSplit[i] == "center") {
				vImgProps["align"] = "center";
			} else if (vFileSplit[i] == "left") {
				vImgProps["align"] = "left";
			} else if (vFileSplit[i] == "right") {
				vImgProps["align"] = "right";
			} else if (vFileSplit[i] == "thumb" && vFileSplit[i] == "thumbnail" && vFileSplit[i] == "mini") {
				vImgProps["thumb"] = true;
			};
		};
		// Determine Caption of Image/Figure
		if (vFileSplit.length > 1) {
			//[[File:My File.png|center|400px|My Caption "Title"]]
			vImgProps["title"] = vFileSplit[vFileSplit.length - 1];
			// Caption ="My Caption \"Title\""
			vImgProps["title"] = this.replaceString(vImgProps["caption"], "\"", "'");
			// Caption ="My Caption 'Title' ""
		};
		// Determine Media URL from WikiMedia Commons with this.aDocJSON["images"] Array
		console.log("IMAGE PROPS: Find '" + pMediaLink + "'");
		//getImageIndexDocJSON()
		return vImgProps;
	};
}
//-------------------------------------------------------------------------
//---END Constructor of Class "WikiConvert()"
//-------------------------------------------------------------------------

//-------------------------------------------
//---End Definition of Class-----------------
// JS Class: WikiConvert
//-------------------------------------------
module.exports = WikiConvert;

},{}],20:[function(_dereq_,module,exports){
'use strict';

var parse = _dereq_('../../parse');
var doInfobox = _dereq_('./infobox');
var doSentence = _dereq_('./sentence');
var doTable = _dereq_('./table');
var doMath = _dereq_('./math');

var defaults = {
  infoboxes: true,
  tables: true,
  lists: true,
  title: true,
  images: true,
  links: true,
  formatting: true,
  sentences: true
};

var makeImage = function makeImage(image) {
  var alt = image.file.replace(/^(file|image):/i, '');
  alt = alt.replace(/\.(jpg|jpeg|png|gif|svg)/i, '');
  return '  <img src="' + image.thumb + '" alt="' + alt + '"/>';
};

var doList = function doList(list) {
  var html = '<ul>\n';
  list.forEach(function (o) {
    html += '  <li>' + o.text + '</li>\n';
  });
  html += '<ul>\n';
  return html;
};

var doSection = function doSection(section, options) {
  var html = '';
  //make the header
  if (options.title === true && section.title) {
    var num = 1 + section.depth;
    html += '  <h' + num + '>' + section.title + '</h' + num + '>';
    html += '\n';
  }
  //put any images under the header
  if (section.images && options.images === true) {
    html += section.images.map(function (image) {
      return makeImage(image);
    }).join('\n');
    html += '\n';
  }
  //make a html table
  if (section.tables && options.tables === true) {
    html += section.tables.map(function (t) {
      return doTable(t, options);
    }).join('\n');
  }
  // //make a html bullet-list
  if (section.lists && options.lists === true) {
    html += section.lists.map(function (list) {
      return doList(list, options);
    }).join('\n');
  }
  //finally, write the sentence text.
  if (section.sentences && options.sentences === true) {
    html += '  <p>' + section.sentences.map(function (s) {
      return doSentence(s, options);
    }).join(' ') + '</p>';
    html += '\n';
  }
  return '<div class="section">\n' + html + '</div>\n';
};
//
var toHtml = function toHtml(str, options) {
  options = Object.assign(defaults, options);
  var data = parse(str, options);
  var html = '';
  //add the title on the top
  // if (options.title === true && data.title) {
  //   html += '<h1>' + data.title + '</h1>\n';
  // }
  //render infoboxes (up at the top)
  if (options.infoboxes === true && data.infoboxes) {
    html += data.infoboxes.map(function (o) {
      return doInfobox(o, options);
    }).join('\n');
  }
  //render each section
  html += data.sections.map(function (s) {
    return doSection(s, options);
  }).join('\n');
  return html;
};
module.exports = toHtml;

},{"../../parse":43,"./infobox":21,"./math":22,"./sentence":23,"./table":24}],21:[function(_dereq_,module,exports){
'use strict';

var doSentence = _dereq_('./sentence');

var dontDo = {
  image: true,
  caption: true
};
//
var infobox = function infobox(obj, options) {
  var html = '<table>\n';
  Object.keys(obj.data).forEach(function (k) {
    if (dontDo[k] === true) {
      return;
    }
    var val = doSentence(obj.data[k], options);
    html += '  <tr>\n';
    html += '    <td>' + k + '</td>\n';
    html += '    <td>' + val + '</td>\n';
    html += '  </tr>\n';
  });
  html += '</table>\n';
  return html;
};
module.exports = infobox;

},{"./sentence":23}],22:[function(_dereq_,module,exports){
'use strict';

/*
EXPORT HTML
------------
The following MediaWiki source text containd embedded mathematical expressions inline and as separated line ":<math>...":

This expression <math> f(x) </math> is a mathematical INLINE expression.
The next line is a BLOCK expression in a separate line.
:<math> f(x) </math>
This is the text below the BLOCK expression.
*/

// handle inline mathematical expression
var doMathInline = function doMathInline(pMath, options) {
  // pMath is internal LaTeX code for the mathematical expression e.g. "f(x)"
  // pMath does not contain the wrapped <math>-tags from the MediaWiki source
  var out = '\\(' + pMath + '\\)';
  return out;
};

// handle mathematical expression displayed in a separate line
var doMathBlock = function doMathBlock(pMath, options) {
  var out = '\n\\[' + pMath + '\\]';
  return out + '\n';
};

// Export the two functions
module.exports = {
  doMathInline: doMathInline,
  doMathBlock: doMathBlock
};

},{}],23:[function(_dereq_,module,exports){
'use strict';

var smartReplace = _dereq_('../lib').smartReplace;

// create links, bold, italic in html
var doSentence = function doSentence(sentence, options) {
  var text = sentence.text;
  //turn links back into links
  if (sentence.links && options.links === true) {
    sentence.links.forEach(function (link) {
      var href = '';
      var classNames = 'link';
      if (link.site) {
        //use an external link
        href = link.site;
        classNames += ' external';
      } else {
        //otherwise, make it a relative internal link
        href = link.page || link.text;
        href = './' + href.replace(/ /g, '_');
      }
      var tag = '<a class="' + classNames + '" href="' + href + '">';
      tag += link.text + '</a>';
      text = smartReplace(text, link.text, tag);
    });
  }
  if (sentence.fmt) {
    if (sentence.fmt.bold) {
      sentence.fmt.bold.forEach(function (str) {
        var tag = '<b>' + str + '</b>';
        text = smartReplace(text, str, tag);
      });
    }
    if (sentence.fmt.italic) {
      sentence.fmt.italic.forEach(function (str) {
        var tag = '<i>' + str + '</i>';
        text = smartReplace(text, str, tag);
      });
    }
  }
  return text;
};
module.exports = doSentence;

},{"../lib":30}],24:[function(_dereq_,module,exports){
'use strict';

var doSentence = _dereq_('./sentence');

var doTable = function doTable(table, options) {
  var html = '<table>\n';
  //make header
  html += '  <thead>';
  Object.keys(table[0]).forEach(function (k) {
    html += '    <td>' + k + '</td>\n';
  });
  html += '  </thead>';
  html += '  <tbody>';
  //make rows
  table.forEach(function (o) {
    html += '  <tr>\n';
    Object.keys(o).forEach(function (k) {
      var val = doSentence(o[k], options);
      html += '    <td>' + val + '</td>\n';
    });
    html += '  </tr>\n';
  });
  html += '  </tbody>';
  html += '</table>\n';
  return html;
};
module.exports = doTable;

},{"./sentence":23}],25:[function(_dereq_,module,exports){
'use strict';

var parse = _dereq_('../../parse');
var doInfobox = _dereq_('./infobox');
var doSentence = _dereq_('./sentence');
var doTable = _dereq_('./table');
var doMath = _dereq_('./math');

var defaults = {
  infoboxes: true,
  tables: true,
  lists: true,
  title: true,
  images: true,
  links: true,
  formatting: true,
  sentences: true
};

var makeImage = function makeImage(image) {
  var alt = image.file.replace(/^(file|image):/i, '');
  alt = alt.replace(/\.(jpg|jpeg|png|gif|svg)/i, '');
  var out = '\\begin{figure}';
  out += '\n\\includegraphics[width=\\linewidth]{' + image.thumb + '}';
  out += '\n\\caption{' + alt + '}';
  out += '\n%\\label{fig:myimage1}';
  out += '\n\\end{figure}';
  return out;
};

var doList = function doList(list) {
  var out = '\\begin{itemize}\n';
  list.forEach(function (o) {
    out += '  \\item ' + o.text + '\n';
  });
  out += '\\end{itemize}\n';
  return out;
};

var doSection = function doSection(section, options) {
  var out = '';
  var num = 1;
  //make the header
  if (options.title === true && section.title) {
    num = 1 + section.depth;
    var vOpen = "\n";
    var vClose = "}";
    switch (num) {
      case 1:
        vOpen += "\\chapter{";
        break;
      case 2:
        vOpen += "\\section{";
        break;
      case 3:
        vOpen += "\\subsection{";
        break;
      case 4:
        vOpen += "\\subsubsection{";
        break;
      case 5:
        vOpen += "\\paragraph{";
        vClose = "} \\\\ \n";
        break;
      case 6:
        vOpen += "\\subparagraph{";
        vClose = "} \\\\ \n";
        break;
      default:
        vOpen += "\n% section with depth=" + num + " undefined - use subparagraph instead\n\\subparagraph{";
        vClose = "} \\\\ \n";
    }
    out += vOpen + section.title + vClose;
    out += '\n';
  }
  //put any images under the header
  if (section.images && options.images === true) {
    out += section.images.map(function (image) {
      return makeImage(image);
    }).join('\n');
    //out += '\n';
  }
  //make a out table
  if (section.tables && options.tables === true) {
    out += section.tables.map(function (t) {
      return doTable(t, options);
    }).join('\n');
  }
  // //make a out bullet-list
  if (section.lists && options.lists === true) {
    out += section.lists.map(function (list) {
      return doList(list, options);
    }).join('\n');
  }
  //finally, write the sentence text.
  if (section.sentences && options.sentences === true) {
    //out += '\n\n% BEGIN Paragraph\n'
    out += section.sentences.map(function (s) {
      return doSentence(s, options);
    }).join(' ');
    //out += '\n% END Paragraph';
    out += '\n';
  };
  var title_tag = ' SECTION depth=' + num + " - TITLE: " + section.title + "\n";
  // wrap a section comment
  //out = '\n% BEGIN' + title_tag + out + '\n% END' + title_tag;
  return out;
};
//
var toLatex = function toLatex(str, options) {
  options = Object.assign(defaults, options);
  var data = parse(str, options);
  var out = '';
  //add the title on the top
  // if (options.title === true && data.title) {
  //   out += '\\section{' + data.title + '}\n';
  // }
  //render infoboxes (up at the top)
  if (options.infoboxes === true && data.infoboxes) {
    out += data.infoboxes.map(function (o) {
      return doInfobox(o, options);
    }).join('\n');
  }
  //render each section
  out += data.sections.map(function (s) {
    return doSection(s, options);
  }).join('\n');
  return out;
};
module.exports = toLatex;

},{"../../parse":43,"./infobox":26,"./math":27,"./sentence":28,"./table":29}],26:[function(_dereq_,module,exports){
'use strict';

var doSentence = _dereq_('./sentence');

var dontDo = {
  image: true,
  caption: true
};
//
var infobox = function infobox(obj, options) {
  var out = '\n\\vspace*{0.3cm}\n\n';
  out += '\\begin{tabular}{|@{\\qquad}l|p{9.5cm}@{\\qquad}|} \n';
  out += '  \\hline  %horizontal line\n';

  Object.keys(obj.data).forEach(function (k) {
    if (dontDo[k] === true) {
      return;
    }
    var val = doSentence(obj.data[k], options);
    out += '  % ---------- \n';
    out += '      ' + k + ' & \n';
    out += '      ' + val + '\\\\ \n';
    out += '  \\hline  %horizontal line\n';
  });
  out += '\\end{tabular} \n';
  out += '\n\\vspace*{0.3cm}\n\n';
  return out;
};
module.exports = infobox;

},{"./sentence":28}],27:[function(_dereq_,module,exports){
'use strict';

/*
EXPORT LaTeX
------------
The following MediaWiki source text containd embedded mathematical expressions inline and as separated line ":<math>...":

This expression <math> f(x) </math> is a mathematical INLINE expression.
The next line is a BLOCK expression in a separate line.
:<math> f(x) </math>
This is the text below the BLOCK expression.
*/

// handle inline mathematical expression
var doMathInline = function doMathInline(pMath, options) {
  // pMath is internal LaTeX code for the mathematical expression e.g. "f(x)"
  // pMath does not contain the wrapped <math>-tags from the MediaWiki source
  var out = '$' + pMath + '$';
  return out;
};

// handle mathematical expression displayed in a separate line
var doMathBlock = function doMathBlock(pMath, options) {
  var out = '\\[' + pMath + '\\]';
  return out + ' ';
};

// Export the two functions
module.exports = {
  doMathInline: doMathInline,
  doMathBlock: doMathBlock
};

},{}],28:[function(_dereq_,module,exports){
'use strict';

var smartReplace = _dereq_('../lib').smartReplace;

// create links, bold, italic in html
var doSentence = function doSentence(sentence, options) {
  var text = sentence.text;
  //turn links back into links
  if (sentence.links && options.links === true) {
    sentence.links.forEach(function (link) {
      var href = '';
      var classNames = 'link';
      if (link.site) {
        //use an external link
        href = link.site;
        classNames += ' external';
      } else {
        //otherwise, make it a relative internal link
        href = link.page || link.text;
        href = './' + href.replace(/ /g, '_');
      }
      var tag = '\\href{' + href + '}{' + link.text + '}';
      text = smartReplace(text, link.text, tag);
    });
  }
  if (sentence.fmt) {
    if (sentence.fmt.bold) {
      sentence.fmt.bold.forEach(function (str) {
        var tag = '\\textbf{' + str + '}';
        text = smartReplace(text, str, tag);
      });
    }
    if (sentence.fmt.italic) {
      sentence.fmt.italic.forEach(function (str) {
        var tag = '\\textit' + str + '}';
        text = smartReplace(text, str, tag);
      });
    }
  }
  return text;
};
module.exports = doSentence;

},{"../lib":30}],29:[function(_dereq_,module,exports){
'use strict';

var doSentence = _dereq_('./sentence');

var doTable = function doTable(table, options) {
  var out = '\n\\vspace*{0.3cm}\n\n';
  out += '% BEGIN TABLE: only left align columns in LaTeX table with horizontal line separation between columns';
  out += "% Format Align Column: 'l'=left 'r'=right align, 'c'=center, 'p{5cm}'=block with column width 5cm ";
  out += '\\begin{tabular}{|';
  Object.keys(table[0]).forEach(function (k) {
    out += 'l|';
  });
  '} \n';
  out += '  \\hline  %horizontal line\n';
  //make header
  out += '  % BEGIN: Table Header';
  var vSep = " ";
  Object.keys(table[0]).forEach(function (k) {
    out += '    ' + vSep + +"\\textbf{" + k + +"} " + '\n';
    vSep = " & ";
  });
  out += '\\\\ \n';
  out += '  % END: Table Header\n';
  out += '  % BEGIN: Table Body';
  out += '  \\hline  % ----- table row -----\n';
  ////make rows
  table.forEach(function (o) {
    vSep = " ";
    out += '  % ----- table row -----\n';
    Object.keys(o).forEach(function (k) {
      var val = doSentence(o[k], options);
      out += '    ' + vSep + val + '\n';
      vSep = " & ";
    });
    out += '  \\\\ \n'; // newline in latex table = two backslash \\
    out += '  \\hline  %horizontal line\n';
  });
  out += '    % END: Table Body\n';
  out += '} % END TABLE\n';
  out += '\n\\vspace*{0.3cm}\n\n';
  return out;
};
module.exports = doTable;

},{"./sentence":28}],30:[function(_dereq_,module,exports){
'use strict';

//escape a string like 'fun*2.Co' for a regExpr
function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}

//sometimes text-replacements can be ambiguous - words used multiple times..
var smartReplace = function smartReplace(all, text, result) {
  if (!text || !all) {
    // console.log(text);
    return all;
  }

  if (typeof all === 'number') {
    all = String(all);
  }
  text = escapeRegExp(text);
  //try a word-boundary replace
  var reg = new RegExp('\\b' + text + '\\b');
  if (reg.test(all) === true) {
    all = all.replace(reg, result);
  } else {
    //otherwise, fall-back to a much messier, dangerous replacement
    // console.warn('missing \'' + text + '\'');
    all = all.replace(text, result);
  }
  return all;
};

module.exports = {
  smartReplace: smartReplace
};

},{}],31:[function(_dereq_,module,exports){
'use strict';

var parse = _dereq_('../../parse');
var doTable = _dereq_('./table');
var doInfobox = _dereq_('./infobox');
var doSentence = _dereq_('./sentence');
var doMath = _dereq_('./math');

var defaults = {
  infoboxes: true,
  tables: true,
  lists: true,
  title: true,
  images: true,
  links: true,
  formatting: true,
  sentences: true
};

var doList = function doList(list, options) {
  return list.map(function (o) {
    var str = doSentence(o, options);
    return ' * ' + str;
  }).join('\n');
};

//markdown images are like this: ![alt text](href)
var doImage = function doImage(image) {
  var alt = image.file.replace(/^(file|image):/i, '');
  alt = alt.replace(/\.(jpg|jpeg|png|gif|svg)/i, '');
  return '![' + alt + '](' + image.thumb + ')';
};

var doSection = function doSection(section, options) {
  var md = '';
  //make the header
  if (options.title === true && section.title) {
    var header = '##';
    for (var i = 0; i < section.depth; i += 1) {
      header += '#';
    }
    md += header + ' ' + section.title + '\n';
  }
  //put any images under the header
  if (section.images && options.images === true) {
    md += section.images.map(function (img) {
      return doImage(img);
    }).join('\n');
    md += '\n';
  }
  //make a mardown table
  if (section.tables && options.tables === true) {
    md += '\n';
    md += section.tables.map(function (table) {
      return doTable(table, options);
    }).join('\n');
    md += '\n';
  }
  //make a mardown bullet-list
  if (section.lists && options.lists === true) {
    md += section.lists.map(function (list) {
      return doList(list, options);
    }).join('\n');
    md += '\n';
  }
  //finally, write the sentence text.
  if (section.sentences && options.sentences === true) {
    md += section.sentences.map(function (s) {
      return doSentence(s, options);
    }).join(' ');
  }
  return md;
};

var toMarkdown = function toMarkdown(str, options) {
  options = Object.assign(defaults, options);
  var data = parse(str, options);
  var md = '';
  //add the title on the top
  // if (data.title) {
  //   md += '# ' + data.title + '\n';
  // }
  //render infoboxes (up at the top)
  if (options.infoboxes === true && data.infoboxes) {
    md += data.infoboxes.map(function (o) {
      return doInfobox(o, options);
    }).join('\n');
  }
  //render each section
  md += data.sections.map(function (s) {
    return doSection(s, options);
  }).join('\n\n');
  return md;
};
module.exports = toMarkdown;

},{"../../parse":43,"./infobox":32,"./math":33,"./sentence":35,"./table":36}],32:[function(_dereq_,module,exports){
'use strict';

var doSentence = _dereq_('./sentence');
var pad = _dereq_('./pad');

var dontDo = {
  image: true,
  caption: true
};

// render an infobox as a table with two columns, key + value
var doInfobox = function doInfobox(obj, options) {
  var md = '|' + pad('') + '|' + pad('') + '|\n';
  md += '|' + pad('---') + '|' + pad('---') + '|\n';
  Object.keys(obj.data).forEach(function (k) {
    if (dontDo[k] === true) {
      return;
    }
    var key = '**' + k + '**';
    var val = doSentence(obj.data[k], options);
    md += '|' + pad(key) + '|' + pad(val) + ' |\n';
  });
  return md;
};
module.exports = doInfobox;

},{"./pad":34,"./sentence":35}],33:[function(_dereq_,module,exports){
'use strict';

/* 
EXPORT MarkDown
---------------
See markdown-it-katex at GitHub: https://github.com/waylonflinn/markdown-it-katex
To render the generated markdown nicely to HTML.

The following MediaWiki source text containd embedded mathematical expressions inline and as separated line ":<math>...":

this are embedded mathematical expressions in MediaWiki source text:
This expression <math> f(x) </math> is a mathematical INLINE expression.
The next line is a BLOCK expression in a separate line.
:<math> f(x) </math>
This is the text below the BLOCK expression.
*/

// handle inline mathematical expression
var doMathInline = function doMathInline(pMath, options) {
  var out = '$' + pMath + '$';
  // use https://www.npmjs.com/package/markdown-it-katex to render the MathCode
  return out;
};

// handle mathematical expression displayed in a separate line
var doMathBlock = function doMathBlock(pMath, options) {
  var out = '$$' + pMath + '$$';
  return out;
};

module.exports = {
  doMathInline: doMathInline,
  doMathBlock: doMathBlock
};

},{}],34:[function(_dereq_,module,exports){
'use strict';

var cellWidth = 15;
//center-pad each cell, to make the table more legible
var pad = function pad(str) {
  str = str || '';
  var diff = cellWidth - str.length;
  diff = parseInt(diff / 2, 10);
  for (var i = 0; i < diff; i += 1) {
    str = ' ' + str + ' ';
  }
  return str;
};
module.exports = pad;

},{}],35:[function(_dereq_,module,exports){
'use strict';

var smartReplace = _dereq_('../lib').smartReplace;

// add `[text](href)` to the text
var doLink = function doLink(md, link) {
  var href = '';
  //if it's an external link, we good
  if (link.site) {
    href = link.site;
  } else {
    //otherwise, make it a relative internal link
    href = link.page || link.text;
    href = './' + href.replace(/ /g, '_');
  }
  var mdLink = '[' + link.text + '](' + href + ')';
  md = smartReplace(md, link.text, mdLink);
  return md;
};

//create links, bold, italic in markdown
var doSentence = function doSentence(sentence, options) {
  var md = sentence.text;
  //turn links back into links
  if (sentence.links && options.links === true) {
    sentence.links.forEach(function (link) {
      md = doLink(md, link);
    });
  }
  //turn bolds into **bold**
  if (sentence.fmt && sentence.fmt.bold) {
    sentence.fmt.bold.forEach(function (b) {
      md = smartReplace(md, b, '**' + b + '**');
    });
  }
  //support *italics*
  if (sentence.fmt && sentence.fmt.italic) {
    sentence.fmt.italic.forEach(function (i) {
      md = smartReplace(md, i, '*' + i + '*');
    });
  }
  return md;
};
module.exports = doSentence;

},{"../lib":30}],36:[function(_dereq_,module,exports){
'use strict';

var doSentence = _dereq_('./sentence');
var pad = _dereq_('./pad');
/* this is a markdown table:
| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |
*/

var makeRow = function makeRow(arr) {
  arr = arr.map(pad);
  return '| ' + arr.join(' | ') + ' |';
};

//markdown tables are weird
var doTable = function doTable(table, options) {
  var md = '';
  if (!table || table.length === 0) {
    return md;
  }
  var keys = Object.keys(table[0]);
  //first, grab the headers
  //remove auto-generated number keys
  var header = keys.map(function (k, i) {
    if (parseInt(k, 10) === i) {
      return '';
    }
    return k;
  });
  //draw the header (necessary!)
  md += makeRow(header) + '\n';
  md += makeRow(['---', '---', '---']) + '\n';
  //do each row..
  md += table.map(function (row) {
    //each column..
    var arr = keys.map(function (k) {
      if (!row[k]) {
        return '';
      }
      return doSentence(row[k], options) || '';
    });
    //make it a nice padded row
    return makeRow(arr);
  }).join('\n');
  return md + '\n';
};
module.exports = doTable;

},{"./pad":34,"./sentence":35}],37:[function(_dereq_,module,exports){
'use strict';

var parse = _dereq_('../../parse');
var doInfobox = _dereq_('./infobox');
var doSentence = _dereq_('./sentence');
var doTable = _dereq_('./table');
var doMath = _dereq_('./math');

var defaults = {
  infoboxes: true,
  tables: true,
  lists: true,
  title: true,
  images: true,
  links: true,
  formatting: true,
  sentences: true
};

var makeImage = function makeImage(image) {
  var alt = image.file.replace(/^(file|image):/i, '');
  alt = alt.replace(/\.(jpg|jpeg|png|gif|svg)/i, '');
  return '  <img src="' + image.thumb + '" alt="' + alt + '"/>';
};

var doList = function doList(list) {
  var html = '<ul>\n';
  list.forEach(function (o) {
    html += '  <li>' + o.text + '</li>\n';
  });
  html += '<ul>\n';
  return html;
};

var doSection = function doSection(section, options) {
  var html = '';
  //make the header
  if (options.title === true && section.title) {
    var num = 1 + section.depth;
    html += '  <h' + num + '>' + section.title + '</h' + num + '>';
    html += '\n';
  }
  //put any images under the header
  if (section.images && options.images === true) {
    html += section.images.map(function (image) {
      return makeImage(image);
    }).join('\n');
    html += '\n';
  }
  //make a html table
  if (section.tables && options.tables === true) {
    html += section.tables.map(function (t) {
      return doTable(t, options);
    }).join('\n');
  }
  // //make a html bullet-list
  if (section.lists && options.lists === true) {
    html += section.lists.map(function (list) {
      return doList(list, options);
    }).join('\n');
  }
  //finally, write the sentence text.
  if (section.sentences && options.sentences === true) {
    html += '  <p>' + section.sentences.map(function (s) {
      return doSentence(s, options);
    }).join(' ') + '</p>';
    html += '\n';
  }
  return '<section class="level2">\n' + html + '</section>\n';
};
//
var toHtml = function toHtml(str, options) {
  options = Object.assign(defaults, options);
  var data = parse(str, options);
  var html = '';
  //add the title on the top
  // if (options.title === true && data.title) {
  //   html += '<h1>' + data.title + '</h1>\n';
  // }
  //render infoboxes (up at the top)
  if (options.infoboxes === true && data.infoboxes) {
    html += data.infoboxes.map(function (o) {
      return doInfobox(o, options);
    }).join('\n');
  }
  //render each section
  html += data.sections.map(function (s) {
    return doSection(s, options);
  }).join('\n');
  return html;
};
module.exports = toHtml;

},{"../../parse":43,"./infobox":38,"./math":39,"./sentence":40,"./table":41}],38:[function(_dereq_,module,exports){
arguments[4][21][0].apply(exports,arguments)
},{"./sentence":40,"dup":21}],39:[function(_dereq_,module,exports){
'use strict';

/*
EXPORT RevealJS
---------------
The following MediaWiki source text containd embedded mathematical expressions inline and as separated line ":<math>...":

This expression <math> f(x) </math> is a mathematical INLINE expression.
The next line is a BLOCK expression in a separate line.
:<math> f(x) </math>
This is the text below the BLOCK expression.
*/

// handle inline mathematical expression
var doMathInline = function doMathInline(pMath, options) {
  // pMath is internal LaTeX code for the mathematical expression e.g. "f(x)"
  // pMath does not contain the wrapped <math>-tags from the MediaWiki source
  var out = '<span class="math inline">\\(' + pMath + '\\)</span>';
  return out;
};

// handle mathematical expression displayed in a separate line
var doMathBlock = function doMathBlock(pMath, options) {
  var out = '\n<p><span class="math display">\\[' + pMath + '\\]</span></p>';
  return out + '\n';
};

// Export the two functions
module.exports = {
  doMathInline: doMathInline,
  doMathBlock: doMathBlock
};

},{}],40:[function(_dereq_,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"../lib":30,"dup":23}],41:[function(_dereq_,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"./sentence":40,"dup":24}],42:[function(_dereq_,module,exports){
'use strict';

var i18n = _dereq_('../data/i18n');
var cat_reg = new RegExp('\\[\\[:?(' + i18n.categories.join('|') + '):(.{2,60}?)]](w{0,10})', 'ig');
var cat_remove_reg = new RegExp('^\\[\\[:?(' + i18n.categories.join('|') + '):', 'ig');

var parse_categories = function parse_categories(r, wiki) {
  r.categories = [];
  var tmp = wiki.match(cat_reg); //regular links
  if (tmp) {
    tmp.forEach(function (c) {
      c = c.replace(cat_remove_reg, '');
      c = c.replace(/\|?[ \*]?\]\]$/i, ''); //parse fancy onces..
      c = c.replace(/\|.*/, ''); //everything after the '|' is metadata
      if (c && !c.match(/[\[\]]/)) {
        r.categories.push(c);
      }
    });
  }
  wiki = wiki.replace(cat_reg, '');
  return wiki;
};
module.exports = parse_categories;

},{"../data/i18n":11}],43:[function(_dereq_,module,exports){
'use strict';

var redirects = _dereq_('./page/redirects');
var disambig = _dereq_('./page/disambig');
var preProcess = _dereq_('./preProcess');
var postProcess = _dereq_('./postProcess');
var parse = {
  section: _dereq_('./section'),
  infobox: _dereq_('./infobox'),
  categories: _dereq_('./categories')
};

//convert wikiscript markup lang to json
var main = function main(wiki, options) {
  options = options || {};
  wiki = wiki || '';
  //detect if page is just redirect, and return
  if (redirects.is_redirect(wiki)) {
    return redirects.parse_redirect(wiki);
  }
  //detect if page is just disambiguator page, and return
  if (disambig.is_disambig(wiki)) {
    return disambig.parse_disambig(wiki);
  }
  var r = {
    type: 'page',
    sections: [],
    infoboxes: [],
    interwiki: {},
    categories: [],
    images: [],
    coordinates: [],
    citations: []
  };
  if (options.custom) {
    r.custom = {};
  }
  if (options.page_identifier) {
    r.page_identifier = options.page_identifier;
  }
  if (options.lang_or_wikiid) {
    r.lang_or_wikiid = options.lang_or_wikiid;
  }
  //give ourselves a little head-start
  wiki = preProcess(r, wiki, options);
  //pull-out infoboxes and stuff
  wiki = parse.infobox(r, wiki, options);
  //pull-out [[category:whatevers]]
  if (options.categories !== false) {
    wiki = parse.categories(r, wiki);
  }
  //parse all the headings, and their texts/sentences
  r.sections = parse.section(r, wiki, options) || [];

  r = postProcess(r);

  return r;
};

module.exports = main;

},{"./categories":42,"./infobox":45,"./page/disambig":47,"./page/redirects":48,"./postProcess":49,"./preProcess":51,"./section":57}],44:[function(_dereq_,module,exports){
'use strict';

//
var parseCitation = function parseCitation(str, wiki, r, options) {
  //remove it from main
  wiki = wiki.replace(str, '');
  if (options.citations === false) {
    return wiki;
  }
  //trim start {{ and
  //trim end }}
  str = str.replace(/^\{\{ *?/, '');
  str = str.replace(/ *?\}\} *?$/, '');
  //start parsing citation into json
  var obj = {};
  var lines = str.split(/\|/g);
  //first line is 'cite web'
  var type = lines[0].match(/cite ([a-z_]+)/i) || [];
  if (type[1]) {
    obj.cite = type[1] || null;
  }
  for (var i = 1; i < lines.length; i += 1) {
    var arr = lines[i].split(/=/);
    var key = arr[0].trim();
    var val = arr.slice(1, arr.length).join('=').trim();
    if (key && val) {
      //turn numbers into numbers
      if (/^[0-9.]+$/.test(val)) {
        val = parseFloat(val);
      }
      obj[key] = val;
    }
  }
  if (Object.keys(obj).length > 0) {
    r.citations.push(obj);
  }
  return wiki;
};
module.exports = parseCitation;

},{}],45:[function(_dereq_,module,exports){
'use strict';

var i18n = _dereq_('../../data/i18n');
var findRecursive = _dereq_('../../lib/recursive_match');
var parseInfobox = _dereq_('./infobox');
var parseCitation = _dereq_('./citation');
var keep = _dereq_('../section/sentence/templates/templates'); //dont remove these ones
var infobox_reg = new RegExp('{{(' + i18n.infoboxes.join('|') + ')[: \n]', 'ig');

//reduce the scary recursive situations
var parse_recursive = function parse_recursive(r, wiki, options) {
  //remove {{template {{}} }} recursions
  r.infoboxes = [];
  var matches = findRecursive('{', '}', wiki).filter(function (s) {
    return s[0] && s[1] && s[0] === '{' && s[1] === '{';
  });
  matches.forEach(function (tmpl) {
    if (tmpl.match(infobox_reg, 'ig')) {
      if (options.infoboxes !== false) {
        var infobox = parseInfobox(tmpl);
        r.infoboxes.push(infobox);
      }
      wiki = wiki.replace(tmpl, '');
      return;
    }
    //keep these ones, we'll parse them later
    var name = tmpl.match(/^\{\{([^:|\n ]+)/);
    if (name !== null) {
      name = name[1].trim().toLowerCase();

      if (/^\{\{ ?citation needed/i.test(tmpl) === true) {
        name = 'citation needed';
      }
      //parse {{cite web ...}} (it appears every language)
      if (name === 'cite' || name === 'citation') {
        wiki = parseCitation(tmpl, wiki, r, options);
        return;
      }

      //sorta-keep nowrap template
      if (name === 'nowrap') {
        var inside = tmpl.match(/^\{\{nowrap *?\|(.*?)\}\}$/);
        if (inside) {
          wiki = wiki.replace(tmpl, inside[1]);
        }
      }
      if (keep.hasOwnProperty(name) === true) {
        return;
      }
    }
    //let everybody add a custom parser for this template
    if (options.custom) {
      Object.keys(options.custom).forEach(function (k) {
        var val = options.custom[k](tmpl, wiki);
        if (val || val === false) {
          //dont store all the nulls
          r.custom[k] = r.custom[k] || [];
          r.custom[k].push(val);
        }
      });
    }
    //if it's not a known template, but it's recursive, remove it
    //(because it will be misread later-on)
    wiki = wiki.replace(tmpl, '');
  });
  // //ok, now that the scary recursion issues are gone, we can trust simple regex methods..
  // //kill the rest of templates
  wiki = wiki.replace(/\{\{ *?(^(main|wide)).*?\}\}/g, '');
  return wiki;
};

module.exports = parse_recursive;

},{"../../data/i18n":11,"../../lib/recursive_match":18,"../section/sentence/templates/templates":68,"./citation":44,"./infobox":46}],46:[function(_dereq_,module,exports){
'use strict';

var trim = _dereq_('../../lib/helpers').trim_whitespace;
var parseLine = _dereq_('../section/sentence').parseLine;
var findRecursive = _dereq_('../../lib/recursive_match');
var i18n = _dereq_('../../data/i18n');
var infobox_template_reg = new RegExp('{{(?:' + i18n.infoboxes.join('|') + ')\\s*(.*)', 'i');

var getTemplate = function getTemplate(str) {
  var m = str.match(infobox_template_reg);
  if (m && m[1]) {
    return m[1];
  }
  return null;
};

var parse_infobox = function parse_infobox(str) {
  if (!str) {
    return {};
  }
  var stringBuilder = [];
  var lastChar = void 0;
  //this collapsible list stuff is just a headache
  var listReg = /\{\{ ?(collapsible|hlist|ublist|plainlist|Unbulleted list|flatlist)/i;
  if (listReg.test(str)) {
    var list = findRecursive('{', '}', str.substr(2, str.length - 2)).filter(function (f) {
      return listReg.test(f);
    });
    str = str.replace(list[0], '');
  }

  var template = getTemplate(str); //get the infobox name

  var parDepth = -2; // first two {{
  for (var i = 0, len = str.length; i < len; i++) {
    if (parDepth === 0 && str[i] === '|' && lastChar !== '\n') {
      stringBuilder.push('\n');
    }
    if (str[i] === '{' || str[i] === '[') {
      parDepth++;
    } else if (str[i] === '}' || str[i] === ']') {
      parDepth--;
    }
    lastChar = str[i];
    stringBuilder.push(lastChar);
  }

  str = stringBuilder.join('');
  //remove top+bottom
  str = str.replace(/^ *?\{\{.+[|\n]/, '');
  str = str.replace(/\}\} *?$/, '');
  var lines = str.split(/\n\*?/);

  var obj = {};
  var key = null;
  for (var _i = 0; _i < lines.length; _i++) {
    var l = lines[_i];
    var keyMatch = l.match(/\| *?([^=]+)=(.+)?/i);
    if (keyMatch && keyMatch[1]) {
      key = trim(keyMatch[1]);
      if (keyMatch[2]) {
        obj[key] = trim(keyMatch[2]);
      } else {
        obj[key] = '';
      }
    } else if (key) {
      obj[key] += l;
    }
  }
  //post-process values
  Object.keys(obj).forEach(function (k) {
    if (!obj[k]) {
      delete obj[k];
      return;
    }
    obj[k] = parseLine(obj[k]);
    if (obj[k].text && obj[k].text.match(/^[0-9,]*$/)) {
      obj[k].text = obj[k].text.replace(/,/, '');
      obj[k].text = parseInt(obj[k].text, 10);
    }
  });
  // //remove top+bottom
  // if(lines.length>1 && lines[0].match()
  // console.log(regexMatch);
  // console.log('\n\n\n');
  // while ((regexMatch = line_reg.exec(str)) !== null) {
  //   // console.log(str + '----');
  //   let key = helpers.trim_whitespace(regexMatch[1] || '') || '';
  //   let value = helpers.trim_whitespace(regexMatch[2] || '') || '';
  //
  //   //this is necessary for mongodb, im sorry
  //   key = key.replace(/\./, '');
  //   if (key && value) {
  //     obj[key] = parse_line(value);
  //     //turn number strings into integers
  //     if (obj[key].text && obj[key].text.match(/^[0-9,]*$/)) {
  //       obj[key].text = obj[key].text.replace(/,/, '');
  //       obj[key].text = parseInt(obj[key].text, 10);
  //     }
  //   }
  // }
  return {
    template: template,
    data: obj
  };
};
module.exports = parse_infobox;

},{"../../data/i18n":11,"../../lib/helpers":17,"../../lib/recursive_match":18,"../section/sentence":61}],47:[function(_dereq_,module,exports){
'use strict';

var i18n = _dereq_('../../data/i18n');
var parse_links = _dereq_('../section/sentence/links');
var template_reg = new RegExp('\\{\\{ ?(' + i18n.disambigs.join('|') + ')(\\|[a-z =]*?)? ?\\}\\}', 'i');

var is_disambig = function is_disambig(wiki) {
  return template_reg.test(wiki);
};

//return a list of probable pages for this disambig page
var parse_disambig = function parse_disambig(wiki) {
  var pages = [];
  var lines = wiki.replace(/\r/g, '').split(/\n/);
  lines.forEach(function (str) {
    //if there's an early link in the list
    if (str.match(/^\*.{0,40}\[\[.*\]\]/)) {
      var links = parse_links(str);
      if (links && links[0] && links[0].page) {
        pages.push(links[0].page);
      }
    }
  });
  return {
    type: 'disambiguation',
    pages: pages
  };
};
module.exports = {
  is_disambig: is_disambig,
  parse_disambig: parse_disambig
};

},{"../../data/i18n":11,"../section/sentence/links":62}],48:[function(_dereq_,module,exports){
'use strict';

var i18n = _dereq_('../../data/i18n');
//pulls target link out of redirect page
var REDIRECT_REGEX = new RegExp('^[ \n\t]*?#(' + i18n.redirects.join('|') + ') *?\\[\\[(.{2,60}?)\\]\\]', 'i');

var is_redirect = function is_redirect(wiki) {
  return wiki.match(REDIRECT_REGEX);
};

var parse_redirect = function parse_redirect(wiki) {
  var article = (wiki.match(REDIRECT_REGEX) || [])[2] || '';
  article = article.replace(/#.*/, '');
  return {
    type: 'redirect',
    redirect: article
  };
};

module.exports = {
  is_redirect: is_redirect,
  parse_redirect: parse_redirect
};

},{"../../data/i18n":11}],49:[function(_dereq_,module,exports){
'use strict';

var i18n = _dereq_('../../data/i18n');
var parseImage = _dereq_('../section/image/image');
var img_regex = new RegExp('^(' + i18n.images.concat(i18n.files).join('|') + ')', 'i');

//cleanup after ourselves
var postProcess = function postProcess(r) {
  // add image from infobox, if applicable
  if (r.infoboxes[0] && r.infoboxes[0].data && r.infoboxes[0].data['image'] && r.infoboxes[0].data['image'].text) {
    var img = r.infoboxes[0].data['image'].text || '';
    if (img && typeof img === 'string' && !img.match(img_regex)) {
      img = '[[File:' + img + ']]';
      img = parseImage(img);
      r.images.push(img);
    }
  }
  //loop around and add the other images
  r.sections.forEach(function (s) {
    //image from {{wide image|...}} template
    if (s.templates && s.templates.wide_image) {
      var _img = s.templates.wide_image[0];
      _img = '[[File:' + _img + ']]';
      _img = parseImage(_img);
      r.images.push(_img);
    }
    if (s.images) {
      s.images.forEach(function (img) {
        return r.images.push(img);
      });
    }
  });

  //try to guess the page's title (from the bold first-line)
  if (r.sections[0] && r.sections[0].sentences[0]) {
    var s = r.sections[0].sentences[0];
    if (s.fmt && s.fmt.bold && s.fmt.bold[0]) {
      r.title = r.title || s.fmt.bold[0];
    }
  }
  return r;
};
module.exports = postProcess;

},{"../../data/i18n":11,"../section/image/image":55}],50:[function(_dereq_,module,exports){
'use strict';

var convertGeo = _dereq_('../../lib/convertGeo');
// {{coord|latitude|longitude|coordinate parameters|template parameters}}
// {{coord|dd|N/S|dd|E/W|coordinate parameters|template parameters}}
// {{coord|dd|mm|N/S|dd|mm|E/W|coordinate parameters|template parameters}}
// {{coord|dd|mm|ss|N/S|dd|mm|ss|E/W|coordinate parameters|template parameters}}

var hemispheres = {
  n: true,
  s: true,
  w: true,
  e: true
};

var round = function round(num) {
  if (typeof num !== 'number') {
    return num;
  }
  var places = 100000;
  return Math.round(num * places) / places;
};

var parseCoord = function parseCoord(str) {
  var obj = {
    lat: null,
    lon: null
  };
  var arr = str.split('|');
  //turn numbers into numbers, normalize N/s
  var nums = [];
  for (var i = 0; i < arr.length; i += 1) {
    var s = arr[i].trim();
    //make it a number
    var num = parseFloat(s);
    if (num || num === 0) {
      arr[i] = num;
      nums.push(num);
    } else if (s.match(/^region:/i)) {
      obj.region = s.replace(/^region:/i, '');
      continue;
    } else if (s.match(/^notes:/i)) {
      obj.notes = s.replace(/^notes:/i, '');
      continue;
    }
    //DMS-format
    if (hemispheres[s.toLowerCase()]) {
      if (obj.lat !== null) {
        nums.push(s);
        obj.lon = convertGeo(nums);
      } else {
        nums.push(s);
        obj.lat = convertGeo(nums);
        arr = arr.slice(i, arr.length);
        nums = [];
        i = 0;
      }
    }
  }
  //this is an original `lat|lon` format
  if (!obj.lon && nums.length === 2) {
    obj.lat = nums[0];
    obj.lon = nums[1];
  }
  obj.lat = round(obj.lat);
  obj.lon = round(obj.lon);
  return obj;
};
module.exports = parseCoord;

},{"../../lib/convertGeo":15}],51:[function(_dereq_,module,exports){
'use strict';

var kill_xml = _dereq_('./kill_xml');
var wordTemplates = _dereq_('./word_templates');

//this mostly-formatting stuff can be cleaned-up first, to make life easier
function preProcess(r, wiki, options) {
  //remove comments
  wiki = wiki.replace(/<!--[^>]{0,2000}-->/g, '');
  wiki = wiki.replace(/__(NOTOC|NOEDITSECTION|FORCETOC|TOC)__/gi, '');
  //signitures
  wiki = wiki.replace(/~~{1,3}/, '');
  //windows newlines
  wiki = wiki.replace(/\r/g, '');
  //horizontal rule
  wiki = wiki.replace(/--{1,3}/, '');
  //space
  wiki = wiki.replace(/&nbsp;/g, ' ');
  //kill off interwiki links
  wiki = wiki.replace(/\[\[([a-z][a-z]|simple|war|ceb|min):.{2,60}\]\]/i, '');
  // these '{{^}}' things are nuts, and used as some ilicit spacing thing.
  wiki = wiki.replace(/\{\{\^\}\}/g, '');
  //expand inline templates like {{date}}
  wiki = wordTemplates(wiki, r);
  //give it the inglorious send-off it deserves..
  wiki = kill_xml(wiki, r, options);
  //({{template}},{{template}}) leaves empty parentheses
  wiki = wiki.replace(/\( \)/g, '');
  return wiki;
}
module.exports = preProcess;
// console.log(preProcess("hi [[as:Plancton]] there"));
// console.log(preProcess('hello <br/> world'))
// console.log(preProcess("hello <asd f> world </h2>"))

},{"./kill_xml":52,"./word_templates":53}],52:[function(_dereq_,module,exports){
'use strict';

var parseCitation = _dereq_('../infobox/citation');
var parseLine = _dereq_('../section/sentence').parseLine;
//okay, i know you're not supposed to regex html, but...
//https://en.wikipedia.org/wiki/Help:HTML_in_wikitext

var hasCitation = function hasCitation(str) {
  return (/^ *?\{\{ *?(cite|citation)/i.test(str) && /\}\} *?$/.test(str) && /citation needed/i.test(str) === false
  );
};
//handle unstructured ones - <ref>some text</ref>
var parseInline = function parseInline(str, r, options) {
  if (options.citations === false) {
    return;
  }
  var obj = parseLine(str) || {};
  var cite = {
    cite: 'inline',
    text: obj.text
  };
  if (obj.links && obj.links.length) {
    var extern = obj.links.find(function (f) {
      return f.site;
    });
    if (extern) {
      cite.url = extern.site;
    }
  }
  r.citations.push(cite);
};

var kill_xml = function kill_xml(wiki, r, options) {
  //luckily, refs can't be recursive..
  // <ref></ref>
  wiki = wiki.replace(/ ?<ref>([\s\S]{0,750}?)<\/ref> ?/gi, function (a, tmpl) {
    if (hasCitation(tmpl)) {
      wiki = parseCitation(tmpl, wiki, r, options);
    } else {
      parseInline(tmpl, r, options);
    }
    return ' ';
  });
  // <ref name=""/>
  wiki = wiki.replace(/ ?<ref [^>]{0,200}?\/> ?/gi, ' ');
  // <ref name=""></ref>
  wiki = wiki.replace(/ ?<ref [^>]{0,200}?>([\s\S]{0,1000}?)<\/ref> ?/gi, function (a, tmpl) {
    if (hasCitation(tmpl)) {
      wiki = parseCitation(tmpl, wiki, r, options);
    } else {
      parseInline(tmpl, r, options);
    }
    return ' ';
  });
  //other types of xml that we want to trash completely
  wiki = wiki.replace(/< ?(table|code|score|data|categorytree|charinsert|gallery|hiero|imagemap|inputbox|math|nowiki|poem|references|source|syntaxhighlight|timeline) ?[^>]{0,200}?>[\s\S]{0,700}< ?\/ ?(table|code|score|data|categorytree|charinsert|gallery|hiero|imagemap|inputbox|math|nowiki|poem|references|source|syntaxhighlight|timeline) ?>/gi, ' '); // <table name=""><tr>hi</tr></table>
  //some xml-like fragments we can also kill
  wiki = wiki.replace(/ ?< ?(ref|span|div|table|data) [a-z0-9=" ]{2,20}\/ ?> ?/g, ' '); //<ref name="asd"/>
  //some formatting xml, we'll keep their insides though
  wiki = wiki.replace(/ ?<[ \/]?(p|sub|sup|span|nowiki|div|table|br|tr|td|th|pre|pre2|hr)[ \/]?> ?/g, ' '); //<sub>, </sub>
  wiki = wiki.replace(/ ?<[ \/]?(abbr|bdi|bdo|blockquote|cite|del|dfn|em|i|ins|kbd|mark|q|s)[ \/]?> ?/g, ' '); //<abbr>, </abbr>
  wiki = wiki.replace(/ ?<[ \/]?h[0-9][ \/]?> ?/g, ' '); //<h2>, </h2>
  //a more generic + dangerous xml-tag removal
  wiki = wiki.replace(/ ?<[ \/]?[a-z0-9]{1,8}[ \/]?> ?/g, ' '); //<samp>
  wiki = wiki.replace(/ ?< ?br ?\/> ?/g, ' '); //<br />
  return wiki.trim();
};
// console.log(kill_xml("hello <ref>nono!</ref> world1. hello <ref name='hullo'>nono!</ref> world2. hello <ref name='hullo'/>world3.  hello <table name=''><tr><td>hi<ref>nono!</ref></td></tr></table>world4. hello<ref name=''/> world5 <ref name=''>nono</ref>, man.}}"))
// console.log(kill_xml("hello <table name=''><tr><td>hi<ref>nono!</ref></td></tr></table>world4"))
// console.log(kill_xml('hello<ref name="theroyal"/> world <ref>nono</ref>, man}}'))
// console.log(kill_xml("hello<ref name=\"theroyal\"/> world5, <ref name=\"\">nono</ref> man"));
// console.log(kill_xml("hello <asd f> world </h2>"))
// console.log(kill_xml("North America,<ref name=\"fhwa\"> and one of"))
// console.log(kill_xml("North America,<br /> and one of"))
module.exports = kill_xml;

},{"../infobox/citation":44,"../section/sentence":61}],53:[function(_dereq_,module,exports){
'use strict';

var languages = _dereq_('../../data/languages');
var parseCoord = _dereq_('./coordinates');

var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
//these are easy, inline templates we can do without too-much trouble.
var inline = /\{\{(url|convert|current|local|lc|uc|formatnum|pull|cquote|coord|small|smaller|midsize|larger|big|bigger|large|huge|resize|dts|date|term|ipa|ill|sense|t|etyl|sfnref|OldStyleDate)(.*?)\}\}/gi;

// templates that need parsing and replacing for inline text
//https://en.wikipedia.org/wiki/Category:Magic_word_templates
var word_templates = function word_templates(wiki, r) {

  //greedy-pass at easier, inline-templates
  wiki = wiki.replace(inline, function (tmpl) {
    //we can be sneaky with this template, as it's often found inside other templates
    tmpl = tmpl.replace(/^\{\{URL\|([^ ]{4,100}?)\}\}/gi, '$1');
    //this one needs to be handled manually
    tmpl = tmpl.replace(/^\{\{convert\|([0-9]*?)\|([^\|]*?)\}\}/gi, '$1 $2'); //TODO: support https://en.tmplpedia.org/tmpl/Template:Convert#Ranges_of_values
    //date-time templates
    var d = new Date();
    tmpl = tmpl.replace(/^\{\{(CURRENT|LOCAL)DAY(2)?\}\}/gi, d.getDate());
    tmpl = tmpl.replace(/^\{\{(CURRENT|LOCAL)MONTH(NAME|ABBREV)?\}\}/gi, months[d.getMonth()]);
    tmpl = tmpl.replace(/^\{\{(CURRENT|LOCAL)YEAR\}\}/gi, d.getFullYear());
    tmpl = tmpl.replace(/^\{\{(CURRENT|LOCAL)DAYNAME\}\}/gi, days[d.getDay()]);
    //formatting templates
    tmpl = tmpl.replace(/^\{\{(lc|uc|formatnum):(.*?)\}\}/gi, '$2');
    tmpl = tmpl.replace(/^\{\{pull quote\|([\s\S]*?)(\|[\s\S]*?)?\}\}/gi, '$1');
    tmpl = tmpl.replace(/^\{\{cquote\|([\s\S]*?)(\|[\s\S]*?)?\}\}/gi, '$1');
    //interlanguage-link
    tmpl = tmpl.replace(/^\{\{ill\|([^|]+).*?\}\}/gi, '$1');
    //footnote syntax
    tmpl = tmpl.replace(/^\{\{refn\|([^|]+).*?\}\}/gi, '$1');
    //'tag' escaped thing.
    tmpl = tmpl.replace(/^\{\{#?tag\|([^|]+).*?\}\}/gi, '');
    // these are nuts {{OldStyleDate}}
    tmpl = tmpl.replace(/^\{\{OldStyleDate\|([^|]+).*?\}\}/gi, '');
    //'harvard references'
    //{{coord|43|42|N|79|24|W|region:CA-ON|display=inline,title}}
    var coord = tmpl.match(/^\{\{coord\|(.*?)\}\}/i);
    if (coord !== null) {
      r.coordinates.push(parseCoord(coord[1]));
      tmpl = tmpl.replace(coord[0], '');
    }
    //font-size
    tmpl = tmpl.replace(/^\{\{(small|smaller|midsize|larger|big|bigger|large|huge|resize)\|([\s\S]*?)\}\}/gi, '$2');
    //{{font|size=x%|text}}

    if (tmpl.match(/^\{\{dts\|/)) {
      var date = (tmpl.match(/^\{\{dts\|(.*?)[\}\|]/) || [])[1] || '';
      date = new Date(date);
      if (date && date.getTime()) {
        tmpl = tmpl.replace(/^\{\{dts\|.*?\}\}/gi, date.toDateString());
      } else {
        tmpl = tmpl.replace(/^\{\{dts\|.*?\}\}/gi, ' ');
      }
    }
    if (tmpl.match(/^\{\{date\|.*?\}\}/)) {
      var _date = tmpl.match(/^\{\{date\|(.*?)\|(.*?)\|(.*?)\}\}/) || [] || [];
      var dateString = _date[1] + ' ' + _date[2] + ' ' + _date[3];
      tmpl = tmpl.replace(/^\{\{date\|.*?\}\}/gi, dateString);
    }
    //common templates in wiktionary
    tmpl = tmpl.replace(/^\{\{term\|(.*?)\|.*?\}\}/gi, '\'$1\'');
    tmpl = tmpl.replace(/^\{\{IPA(c-en)?\|(.*?)\|(.*?)\}\},?/gi, '');
    tmpl = tmpl.replace(/^\{\{sense\|(.*?)\|?.*?\}\}/gi, '($1)');
    tmpl = tmpl.replace(/v\{\{t\+?\|...?\|(.*?)(\|.*)?\}\}/gi, '\'$1\'');
    //replace languages in 'etyl' tags
    if (tmpl.match(/^\{\{etyl\|/)) {
      //doesn't support multiple-ones per sentence..
      var lang = (tmpl.match(/^\{\{etyl\|(.*?)\|.*?\}\}/i) || [])[1] || '';
      lang = lang.toLowerCase();
      if (lang && languages[lang]) {
        tmpl = tmpl.replace(/^\{\{etyl\|(.*?)\|.*?\}\}/gi, languages[lang].english_title);
      } else {
        tmpl = tmpl.replace(/^\{\{etyl\|(.*?)\|.*?\}\}/gi, '($1)');
      }
    }
    return tmpl;
  });
  //flatlist -> commas  -- hlist?
  wiki = wiki.replace(/\{\{(flatlist|hlist) ?\|([^}]+)\}\}/gi, function (a, b, c) {
    var arr = c.split(/\s+[* ]+? ?/g);
    arr = arr.filter(function (line) {
      return line;
    });
    return arr.join(', ');
  });
  //plainlist -> newlines
  wiki = wiki.replace(/\{\{(plainlist|ublist|unbulleted list) ?\|([^}]+)\}\}/gi, function (a, b, c) {
    var arr = c.split(/\s+[* ]+? ?/g);
    arr = arr.filter(function (line) {
      return line;
    });
    return arr.join(', ');
  });
  // tmpl = tmpl.replace(/\{\{flatlist\|([\s\S]*?)(\|[\s\S]*?)?\}\}/gi, '$1');
  return wiki;
};
// console.log(word_templates("hello {{CURRENTDAY}} world"))
// console.log(word_templates("hello {{CURRENTMONTH}} world"))
// console.log(word_templates("hello {{CURRENTYEAR}} world"))
// console.log(word_templates("hello {{LOCALDAYNAME}} world"))
// console.log(word_templates("hello {{lc:88}} world"))
// console.log(word_templates("hello {{pull quote|Life is like\n|author=[[asdf]]}} world"))
// console.log(word_templates("hi {{etyl|la|-}} there"))
// console.log(word_templates("{{etyl|la|-}} cognate with {{etyl|is|-}} {{term|hugga||to comfort|lang=is}},"))

module.exports = word_templates;

},{"../../data/languages":12,"./coordinates":50}],54:[function(_dereq_,module,exports){
'use strict';

var fns = _dereq_('../../lib/helpers');
var heading_reg = /^(={1,5})([^=]{1,200}?)={1,5}$/;

//interpret depth, title of headings like '==See also=='
var parseHeading = function parseHeading(r, str) {
  var heading = str.match(heading_reg);
  if (!heading) {
    return {
      title: '',
      depth: 0
    };
  }
  var title = heading[2] || '';
  title = fns.trim_whitespace(title);
  var depth = 1;
  if (heading[1]) {
    depth = heading[1].length - 1;
  }
  r.title = title;
  r.depth = depth;
  return r;
};
module.exports = parseHeading;

},{"../../lib/helpers":17}],55:[function(_dereq_,module,exports){
'use strict';

var Hashes = _dereq_('jshashes');
var i18n = _dereq_('../../../data/i18n');
var file_reg = new RegExp('(' + i18n.images.concat(i18n.files).join('|') + '):.*?[\\|\\]]', 'i');

//the wikimedia image url is a little silly:
//https://commons.wikimedia.org/wiki/Commons:FAQ#What_are_the_strangely_named_components_in_file_paths.3F
var make_image = function make_image(file) {
  var title = file.replace(/^(image|file?)\:/i, '');
  //titlecase it
  title = title.charAt(0).toUpperCase() + title.substring(1);
  //spaces to underscores
  title = title.replace(/ /g, '_');

  var hash = new Hashes.MD5().hex(title);
  var path = hash.substr(0, 1) + '/' + hash.substr(0, 2) + '/';
  title = encodeURIComponent(title);
  path += title;
  var server = 'https://upload.wikimedia.org/wikipedia/commons/';
  var thumb = '/300px-' + title;
  return {
    url: server + path,
    file: file,
    thumb: server + 'thumb/' + path + thumb
  };
};

//images are usually [[image:my_pic.jpg]]
var parse_image = function parse_image(img) {
  img = img.match(file_reg) || [''];
  img = img[0].replace(/[\|\]]$/, '');
  //add url, etc to image
  img = make_image(img);
  return img;
};
module.exports = parse_image;

// console.log(parse_image("[[image:my_pic.jpg]]"));

},{"../../../data/i18n":11,"jshashes":2}],56:[function(_dereq_,module,exports){
'use strict';

var i18n = _dereq_('../../../data/i18n');
var find_recursive = _dereq_('../../../lib/recursive_match');
var parse_image = _dereq_('./image');
var fileRegex = new RegExp('(' + i18n.images.concat(i18n.files).join('|') + '):.*?[\\|\\]]', 'i');

var parseImages = function parseImages(r, wiki, options) {
  //second, remove [[file:...[[]] ]] recursions
  var matches = find_recursive('[', ']', wiki);
  matches.forEach(function (s) {
    if (s.match(fileRegex)) {
      r.images = r.images || [];
      if (options.images !== false) {
        r.images.push(parse_image(s));
      }
      wiki = wiki.replace(s, '');
    }
  });

  //third, wiktionary-style interlanguage links
  matches.forEach(function (s) {
    if (s.match(/\[\[([a-z]+):(.*?)\]\]/i) !== null) {
      var site = (s.match(/\[\[([a-z]+):/i) || [])[1] || '';
      site = site.toLowerCase();
      if (site && i18n.dictionary[site] === undefined && !(options.namespace !== undefined && options.namespace === site)) {
        r.interwiki = r.interwiki || {};
        r.interwiki[site] = (s.match(/\[\[([a-z]+):(.*?)\]\]/i) || [])[2];
        wiki = wiki.replace(s, '');
      }
    }
  });
  return wiki;
};
module.exports = parseImages;

},{"../../../data/i18n":11,"../../../lib/recursive_match":18,"./image":55}],57:[function(_dereq_,module,exports){
'use strict';

//interpret ==heading== lines
var parse = {
  heading: _dereq_('./heading'),
  list: _dereq_('./list'),
  image: _dereq_('./image'),
  table: _dereq_('./table'),
  templates: _dereq_('./section_templates'),
  eachSentence: _dereq_('./sentence').eachSentence
};
var section_reg = /[\n^](={1,5}[^=]{1,200}?={1,5})/g;

var parseSection = function parseSection(section, wiki, r, options) {
  // //parse the tables
  wiki = parse.table(section, wiki);
  // //parse the lists
  wiki = parse.list(section, wiki);
  //supoprted things like {{main}}
  wiki = parse.templates(section, wiki);
  // //parse+remove scary '[[ [[]] ]]' stuff
  wiki = parse.image(section, wiki, options);
  //do each sentence
  wiki = parse.eachSentence(section, wiki);
  // section.wiki = wiki;
  return section;
};

var makeSections = function makeSections(r, wiki, options) {
  var split = wiki.split(section_reg); //.filter(s => s);
  var sections = [];
  for (var i = 0; i < split.length; i += 2) {
    var title = split[i - 1] || '';
    var txt = split[i] || '';
    var section = {
      title: '',
      depth: null
    };
    section = parse.heading(section, title);
    section = parseSection(section, txt, r, options);
    sections.push(section);
  }
  return sections;
};

module.exports = makeSections;

},{"./heading":54,"./image":56,"./list":58,"./section_templates":59,"./sentence":61,"./table":69}],58:[function(_dereq_,module,exports){
'use strict';

var list_reg = /^[#\*:;\|]+/;
var bullet_reg = /^\*+[^:,\|]{4}/;
var number_reg = /^ ?\#[^:,\|]{4}/;
var has_word = /[a-z]/i;
var parseLine = _dereq_('./sentence/').parseLine;

// does it start with a bullet point or something?
var isList = function isList(line) {
  return list_reg.test(line) || bullet_reg.test(line) || number_reg.test(line);
};

//make bullets/numbers into human-readable *'s
var cleanList = function cleanList(list) {
  var number = 1;
  list = list.filter(function (l) {
    return l;
  });
  for (var i = 0; i < list.length; i++) {
    var line = list[i];
    //add # numberings formatting
    if (line.match(number_reg)) {
      line = line.replace(/^ ?#*/, number + ') ');
      line = line + '\n';
      number += 1;
    } else if (line.match(list_reg)) {
      number = 1;
      line = line.replace(list_reg, '');
    }
    list[i] = parseLine(line);
  }
  return list;
};

var grabList = function grabList(lines, i) {
  var sub = [];
  for (var o = i; o < lines.length; o++) {
    if (isList(lines[o])) {
      sub.push(lines[o]);
    } else {
      break;
    }
  }
  sub = sub.filter(function (a) {
    return a && has_word.test(a);
  });
  sub = cleanList(sub);
  return sub;
};

var parseList = function parseList(r, wiki) {
  var lines = wiki.split(/\n/g);
  lines = lines.filter(function (l) {
    return has_word.test(l);
  });
  var lists = [];
  var theRest = [];
  for (var i = 0; i < lines.length; i++) {
    if (isList(lines[i]) && lines[i + 1] && isList(lines[i + 1])) {
      var sub = grabList(lines, i);
      if (sub.length > 0) {
        lists.push(sub);
        i += sub.length;
      }
    } else {
      theRest.push(lines[i]);
    }
  }
  if (lists.length > 0) {
    r.lists = lists;
  }
  return theRest.join('\n');
};
module.exports = parseList;

},{"./sentence/":61}],59:[function(_dereq_,module,exports){
'use strict';

// const parseCoord = require('./coordinates');
var regs = {
  main: /\{\{main( article)?\|(.*?)\}\}/i,
  wide_image: /\{\{wide image\|(.*?)\}\}/i
};

//these templates apply only to this section,and we wont find them, say, inside a infobox
var parseTemplates = function parseTemplates(section, wiki) {
  var templates = {};

  //{{main|toronto}}
  var main = wiki.match(regs.main);
  if (main) {
    templates.main = main[2].split('|');
    wiki = wiki.replace(regs.main, '');
  }
  //{{wide image|file:cool.jpg}}
  var wide = wiki.match(regs.wide_image);
  if (wide) {
    templates.wide_image = wide[1].split('|');
    wiki = wiki.replace(regs.wide_image, '');
  }
  if (Object.keys(templates).length > 0) {
    section.templates = templates;
  }
  return wiki;
};
module.exports = parseTemplates;

},{}],60:[function(_dereq_,module,exports){
'use strict';

//
var formatting = function formatting(obj) {
  var bolds = [];
  var italics = [];
  var wiki = obj.text || '';
  //bold and italics combined 5 's
  wiki = wiki.replace(/''{4}([^']{0,200})''{4}/g, function (a, b) {
    bolds.push(b);
    italics.push(b);
    return b;
  });
  //'''bold'''
  wiki = wiki.replace(/''{2}([^']{0,200})''{2}/g, function (a, b) {
    bolds.push(b);
    return b;
  });
  //''italic''
  wiki = wiki.replace(/''([^']{0,200})''/g, function (a, b) {
    italics.push(b);
    return b;
  });

  //pack it all up..
  obj.text = wiki;
  if (bolds.length > 0) {
    obj.fmt = obj.fmt || {};
    obj.fmt.bold = bolds;
  }
  if (italics.length > 0) {
    obj.fmt = obj.fmt || {};
    obj.fmt.italic = italics;
  }
  return obj;
};
module.exports = formatting;

},{}],61:[function(_dereq_,module,exports){
'use strict';

var helpers = _dereq_('../../../lib/helpers');
var parseLinks = _dereq_('./links');
var parseFmt = _dereq_('./formatting');
var templates = _dereq_('./templates');
var sentenceParser = _dereq_('./sentence-parser');
var i18n = _dereq_('../../../data/i18n');
var cat_reg = new RegExp('\\[\\[:?(' + i18n.categories.join('|') + '):[^\\]\\]]{2,80}\\]\\]', 'gi');

//return only rendered text of wiki links
var resolve_links = function resolve_links(line) {
  // categories, images, files
  line = line.replace(cat_reg, '');
  // [[Common links]]
  line = line.replace(/\[\[:?([^|]{1,80}?)\]\](\w{0,5})/g, '$1$2');
  // [[File:with|Size]]
  line = line.replace(/\[\[File:?(.{2,80}?)\|([^\]]+?)\]\](\w{0,5})/g, '$1');
  // [[Replaced|Links]]
  line = line.replace(/\[\[:?(.{2,80}?)\|([^\]]+?)\]\](\w{0,5})/g, '$2$3');
  // External links
  line = line.replace(/\[(https?|news|ftp|mailto|gopher|irc):\/\/[^\]\| ]{4,1500}([\| ].*?)?\]/g, '$2');
  return line;
};
// console.log(resolve_links("[http://www.whistler.ca www.whistler.ca]"))

function postprocess(line) {
  //fix links
  line = resolve_links(line);
  //oops, recursive image bug
  if (line.match(/^(thumb|right|left)\|/i)) {
    return null;
  }
  line = helpers.trim_whitespace(line);
  return line;
}

function parseLine(line) {
  var obj = {
    text: postprocess(line)
  };
  //pull-out the [[links]]
  var links = parseLinks(line);
  if (links) {
    obj.links = links;
  }
  //pull-out the bolds and ''italics''
  obj = parseFmt(obj);
  //pull-out things like {{start date|...}}
  obj = templates(obj);
  return obj;
}

var parseSentences = function parseSentences(r, wiki) {
  var sentences = sentenceParser(wiki);
  sentences = sentences.map(parseLine);
  r.sentences = sentences;
  return r;
};

module.exports = {
  eachSentence: parseSentences,
  parseLine: parseLine
};

},{"../../../data/i18n":11,"../../../lib/helpers":17,"./formatting":60,"./links":62,"./sentence-parser":63,"./templates":66}],62:[function(_dereq_,module,exports){
'use strict';

var helpers = _dereq_('../../../lib/helpers');
var ignore_links = /^:?(category|catégorie|Kategorie|Categoría|Categoria|Categorie|Kategoria|تصنيف|image|file|image|fichier|datei|media|special|wp|wikipedia|help|user|mediawiki|portal|talk|template|book|draft|module|topic|wiktionary|wikisource):/i;
var external_link = /\[(https?|news|ftp|mailto|gopher|irc)(:\/\/[^\]\| ]{4,1500})([\| ].*?)?\]/g;
var link_reg = /\[\[(.{0,80}?)\]\]([a-z']+)?(\w{0,10})/gi; //allow dangling suffixes - "[[flanders]]'s"

var external_links = function external_links(links, str) {
  str.replace(external_link, function (all, protocol, link, text) {
    text = text || '';
    links.push({
      type: 'external',
      site: protocol + link,
      text: text.trim()
    });
    return text;
  });
  return links;
};

var internal_links = function internal_links(links, str) {
  //regular links
  str.replace(link_reg, function (_, s, apostrophe) {
    var txt = '';
    var link = s;
    if (s.match(/\|/)) {
      //replacement link [[link|text]]
      s = s.replace(/\[\[(.{2,80}?)\]\](\w{0,10})/g, '$1$2'); //remove ['s and keep suffix
      link = s.replace(/(.{2,60})\|.{0,200}/, '$1'); //replaced links
      txt = s.replace(/.{2,60}?\|/, '');
      //handle funky case of [[toronto|]]
      if (!txt && link.match(/\|$/)) {
        link = link.replace(/\|$/, '');
        txt = link;
      }
    }
    //kill off non-wikipedia namespaces
    if (link.match(ignore_links)) {
      return s;
    }
    //kill off just anchor links [[#history]]
    if (link.match(/^#/i)) {
      return s;
    }
    //remove anchors from end [[toronto#history]]
    link = link.replace(/#[^ ]{1,100}/, '');
    var obj = {
      page: helpers.capitalise(link),
      text: txt || link
    };
    //finally, support [[link]]'s apostrophe
    if (apostrophe) {
      obj.text += apostrophe;
    }
    links.push(obj);
    return s;
  });
  return links;
};

//grab an array of internal links in the text
var parse_links = function parse_links(str) {
  var links = [];
  //first, parse external links
  links = external_links(links, str);
  //internal links
  links = internal_links(links, str);

  if (links.length === 0) {
    return undefined;
  }
  return links;
};
module.exports = parse_links;

},{"../../../lib/helpers":17}],63:[function(_dereq_,module,exports){
//split text into sentences, using regex
//@spencermountain MIT

//(Rule-based sentence boundary segmentation) - chop given text into its proper sentences.
// Ignore periods/questions/exclamations used in acronyms/abbreviations/numbers, etc.
// @spencermountain 2015 MIT
'use strict';

var abbreviations = _dereq_('../../../data/abbreviations');
var abbrev_reg = new RegExp('(^| )(' + abbreviations.join('|') + ')[.!?] ?$', 'i');
var acronym_reg = new RegExp('[ |.][A-Z].? +?$', 'i');
var elipses_reg = new RegExp('\\.\\.\\.* +?$');
var hasWord = new RegExp('[a-z][a-z]', 'i');

//turn a nested array into one array
var flatten = function flatten(arr) {
  var all = [];
  arr.forEach(function (a) {
    all = all.concat(a);
  });
  return all;
};

var naiive_split = function naiive_split(text) {
  //first, split by newline
  var splits = text.split(/(\n+)/);
  splits = splits.filter(function (s) {
    return s.match(/\S/);
  });
  //split by period, question-mark, and exclamation-mark
  splits = splits.map(function (str) {
    return str.split(/(\S.+?[.!?])(?=\s+|$)/g);
  });
  return flatten(splits);
};

// if this looks like a period within a wikipedia link, return false
var isBalanced = function isBalanced(str) {
  str = str || '';
  var open = str.split(/\[\[/) || [];
  var closed = str.split(/\]\]/) || [];
  if (open.length > closed.length) {
    return false;
  }
  //make sure quotes are closed too
  var quotes = str.match(/"/g);
  if (quotes && quotes.length % 2 !== 0 && str.length < 900) {
    return false;
  }
  return true;
};

var sentence_parser = function sentence_parser(text) {
  var sentences = [];
  //first do a greedy-split..
  var chunks = [];
  //ensure it 'smells like' a sentence
  if (!text || typeof text !== 'string' || !text.match(/\w/)) {
    return sentences;
  }
  // This was the splitter regex updated to fix quoted punctuation marks.
  // let splits = text.split(/(\S.+?[.\?!])(?=\s+|$|")/g);
  // todo: look for side effects in this regex replacement:
  var splits = naiive_split(text);
  //filter-out the grap ones
  for (var i = 0; i < splits.length; i++) {
    var s = splits[i];
    if (!s || s === '') {
      continue;
    }
    //this is meaningful whitespace
    if (!s.match(/\S/)) {
      //add it to the last one
      if (chunks[chunks.length - 1]) {
        chunks[chunks.length - 1] += s;
        continue;
      } else if (splits[i + 1]) {
        //add it to the next one
        splits[i + 1] = s + splits[i + 1];
        continue;
      }
    }
    chunks.push(s);
  }

  //detection of non-sentence chunks
  var isSentence = function isSentence(hmm) {
    if (hmm.match(abbrev_reg) || hmm.match(acronym_reg) || hmm.match(elipses_reg)) {
      return false;
    }
    //too short? - no consecutive letters
    if (hasWord.test(hmm) === false) {
      return false;
    }
    if (!isBalanced(hmm)) {
      return false;
    }
    return true;
  };

  //loop through these chunks, and join the non-sentence chunks back together..
  for (var _i = 0; _i < chunks.length; _i++) {
    //should this chunk be combined with the next one?
    if (chunks[_i + 1] && !isSentence(chunks[_i])) {
      chunks[_i + 1] = chunks[_i] + (chunks[_i + 1] || ''); //.replace(/ +/g, ' ');
    } else if (chunks[_i] && chunks[_i].length > 0) {
      //this chunk is a proper sentence..
      sentences.push(chunks[_i]);
      chunks[_i] = '';
    }
  }
  //if we never got a sentence, return the given text
  if (sentences.length === 0) {
    return [text];
  }
  return sentences;
};

module.exports = sentence_parser;
// console.log(sentence_parser('Tony is nice. He lives in Japan.').length === 2);

},{"../../../data/abbreviations":10}],64:[function(_dereq_,module,exports){
'use strict';

//assorted parsing methods for date/time templates
var months = [undefined, //1-based months.. :/
'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

//parse year|month|date numbers
var ymd = function ymd(arr) {
  var obj = {};
  var units = ['year', 'month', 'date', 'hour', 'minute', 'second'];
  for (var i = 0; i < units.length; i += 1) {
    if (!arr[i] && arr[1] !== 0) {
      continue;
    }
    obj[units[i]] = parseInt(arr[i], 10);
    if (isNaN(obj[units[i]])) {
      delete obj[units[i]];
    }
  }
  //try for timezone,too ftw
  var last = arr[arr.length - 1] || '';
  last = String(last);
  if (last.toLowerCase() === 'z') {
    obj.tz = 'UTC';
  } else if (/[+-][0-9]+:[0-9]/.test(last)) {
    obj.tz = arr[6];
  }
  return obj;
};

//zero-pad a number
var pad = function pad(num) {
  if (num < 10) {
    return '0' + num;
  }
  return String(num);
};

var toText = function toText(date) {
  //eg '1995'
  var str = String(date.year) || '';
  if (date.month !== undefined && months.hasOwnProperty(date.month) === true) {
    if (date.date === undefined) {
      //January 1995
      str = months[date.month] + ' ' + date.year;
    } else {
      //January 5, 1995
      str = months[date.month] + ' ' + date.date + ', ' + date.year;
      //add times, if available
      if (date.hour !== undefined && date.minute !== undefined) {
        var time = pad(date.hour) + ':' + pad(date.minute);
        if (date.second !== undefined) {
          time = time + ':' + pad(date.second);
        }
        str = time + ', ' + str;
        //add timezone, if there, at the end in brackets
      }
      if (date.tz) {
        str += ' (' + date.tz + ')';
      }
    }
  }
  return str;
};

module.exports = {
  toText: toText,
  ymd: ymd
};

},{}],65:[function(_dereq_,module,exports){
"use strict";

//this is allowed to be rough
var day = 1000 * 60 * 60 * 24;
var month = day * 30;
var year = day * 365;

var getEpoch = function getEpoch(obj) {
  return new Date(obj.year + "-" + (obj.month || 0) + "-" + (obj.date || 1)).getTime();
};

//very rough!
var delta = function delta(from, to) {
  from = getEpoch(from);
  to = getEpoch(to);
  var diff = to - from;
  var obj = {};
  //get years
  var years = Math.floor(diff / year, 10);
  if (years > 0) {
    obj.years = years;
    diff -= obj.years * year;
  }
  //get months
  var months = Math.floor(diff / month, 10);
  if (months > 0) {
    obj.months = months;
    diff -= obj.months * month;
  }
  //get days
  var days = Math.floor(diff / day, 10);
  if (days > 0) {
    obj.days = days;
    // diff -= (obj.days * day);
  }
  return obj;
};

module.exports = delta;

},{}],66:[function(_dereq_,module,exports){
'use strict';

var parsers = _dereq_('./parsers');
var templates = _dereq_('./templates');

//get identity of template - Template:Foo
var getName = function getName(tmpl) {
  tmpl = tmpl.replace(/^\{\{/, '');
  tmpl = tmpl.replace(/\}\}$/, '');
  var name = tmpl.split(/\|/)[0] || '';
  name = name.toLowerCase().trim();
  // name = name.replace(/-/g, ' ');
  return name;
};

//run each remaining {{template}} through our parsers
var parseTemplates = function parseTemplates(obj) {
  var list = obj.text.match(/\{\{([^}]+)\}\}/g) || [];
  list = list.map(function (tmpl) {
    var name = getName(tmpl);
    return {
      name: name,
      raw: tmpl
    };
  });
  //try parsing each template
  list.forEach(function (t) {
    //remove the {{'s & }}'s
    t.tmpl = t.raw.replace(/^\{\{/, '');
    t.tmpl = t.tmpl.replace(/\}\}$/, '');
    if (parsers.hasOwnProperty(templates[t.name]) === true) {
      var parser = templates[t.name];
      var result = parsers[parser](t.tmpl, obj);
      obj.text = obj.text.replace(t.raw, result);
    } else {
      //otherwise, just remove it from the text
      obj.text = obj.text.replace(t.raw, '');
    }
  });
  return obj;
};
module.exports = parseTemplates;

},{"./parsers":67,"./templates":68}],67:[function(_dereq_,module,exports){
'use strict';

var dates = _dereq_('./dates');
var ymd = dates.ymd;
var toText = dates.toText;
var delta = _dereq_('./delta_date');

var getBoth = function getBoth(tmpl) {
  var arr = tmpl.split('|');
  var from = ymd(arr.slice(1, 4));
  var to = arr.slice(4, 7);
  //assume now, if 'to' is empty
  if (to.length === 0) {
    var d = new Date();
    to = [d.getFullYear(), d.getMonth(), d.getDate()];
  }
  to = ymd(to);
  return {
    from: from,
    to: to
  };
};

var parsers = {

  //generic {{date|year|month|date}} template
  date: function date(tmpl, obj) {
    var arr = tmpl.split('|');
    arr = arr.slice(1, 8);
    //support 'df=yes|1894|7|26'
    if (arr[0] && /^df=/.test(arr[0])) {
      arr.shift();
    }
    var date = ymd(arr);
    date.text = toText(date); //make the replacement string
    obj.dates = obj.dates || [];
    obj.dates.push(date);
    return date.text;
  },

  //support parsing of 'February 10, 1992'
  natural_date: function natural_date(tmpl, obj) {
    var arr = tmpl.split('|');
    var str = arr[1] || '';
    // - just a year
    var date = {};
    if (/^[0-9]{4}$/.test(arr[1])) {
      date.year = parseInt(arr[1], 10);
    } else {
      //parse the date, using the js date object (for now?)
      var txt = arr[1].replace(/[a-z]+\/[a-z]+/i);
      txt = txt.replace(/[0-9]+:[0-9]+(am|pm)?/i);
      var d = new Date(txt);
      if (isNaN(d.getTime()) === false) {
        date.year = d.getFullYear();
        date.month = d.getMonth() + 1;
        date.date = d.getDate();
      }
    }
    obj.dates = obj.dates || [];
    obj.dates.push(date);
    return str.trim();
  },

  //just grab the first value, and assume it's a year
  one_year: function one_year(tmpl, obj) {
    var arr = tmpl.split('|');
    var str = arr[1] || '';
    var year = parseInt(str, 10);
    obj.dates = obj.dates || [];
    obj.dates.push({
      year: year
    });
    return str.trim();
  },

  //assume 'y|m|d' | 'y|m|d'
  two_dates: function two_dates(tmpl, obj) {
    var arr = tmpl.split('|');
    //'b' means show birth-date, otherwise show death-date
    if (arr[1] === 'B' || arr[1] === 'b') {
      var _date = ymd(arr.slice(2, 5));
      obj.dates = obj.dates || [];
      obj.dates.push(_date);
      return toText(_date);
    }
    var date = ymd(arr.slice(5, 8));
    obj.dates = obj.dates || [];
    obj.dates.push(date);
    return toText(date);
  },

  'age': function age(tmpl) {
    var d = getBoth(tmpl);
    var diff = delta(d.from, d.to);
    return diff.years || 0;
  },

  'diff-y': function diffY(tmpl) {
    var d = getBoth(tmpl);
    var diff = delta(d.from, d.to);
    if (diff.years === 1) {
      return diff.years + ' year';
    }
    return (diff.years || 0) + ' years';
  },
  'diff-ym': function diffYm(tmpl) {
    var d = getBoth(tmpl);
    var diff = delta(d.from, d.to);
    var arr = [];
    if (diff.years === 1) {
      arr.push(diff.years + ' year');
    } else if (diff.years && diff.years !== 0) {
      arr.push(diff.years + ' years');
    }
    if (diff.months === 1) {
      arr.push('1 month');
    } else if (diff.months && diff.months !== 0) {
      arr.push(diff.months + ' months');
    }
    return arr.join(', ');
  },
  'diff-ymd': function diffYmd(tmpl) {
    var d = getBoth(tmpl);
    var diff = delta(d.from, d.to);
    var arr = [];
    if (diff.years === 1) {
      arr.push(diff.years + ' year');
    } else if (diff.years && diff.years !== 0) {
      arr.push(diff.years + ' years');
    }
    if (diff.months === 1) {
      arr.push('1 month');
    } else if (diff.months && diff.months !== 0) {
      arr.push(diff.months + ' months');
    }
    if (diff.days === 1) {
      arr.push('1 day');
    } else if (diff.days && diff.days !== 0) {
      arr.push(diff.days + ' days');
    }
    return arr.join(', ');
  },
  'diff-yd': function diffYd(tmpl) {
    var d = getBoth(tmpl);
    var diff = delta(d.from, d.to);
    var arr = [];
    if (diff.years === 1) {
      arr.push(diff.years + ' year');
    } else if (diff.years && diff.years !== 0) {
      arr.push(diff.years + ' years');
    }
    //ergh...
    diff.days += (diff.months || 0) * 30;
    if (diff.days === 1) {
      arr.push('1 day');
    } else if (diff.days && diff.days !== 0) {
      arr.push(diff.days + ' days');
    }
    return arr.join(', ');
  },
  'diff-d': function diffD(tmpl) {
    var d = getBoth(tmpl);
    var diff = delta(d.from, d.to);
    var arr = [];
    //ergh...
    diff.days += (diff.years || 0) * 365;
    diff.days += (diff.months || 0) * 30;
    if (diff.days === 1) {
      arr.push('1 day');
    } else if (diff.days && diff.days !== 0) {
      arr.push(diff.days + ' days');
    }
    return arr.join(', ');
  }

};
module.exports = parsers;

},{"./dates":64,"./delta_date":65}],68:[function(_dereq_,module,exports){
'use strict';

//templates we support
var keep = {
  'main': true,
  'main article': true,
  'wide image': true,
  'coord': true,

  //date/age/time templates
  'start': 'date',
  'end': 'date',
  'birth': 'date',
  'death': 'date',
  'start date': 'date',
  'end date': 'date',
  'birth date': 'date',
  'death date': 'date',
  'start date and age': 'date',
  'end date and age': 'date',
  'birth date and age': 'date',
  'death date and age': 'date',
  'birth date and given age': 'date',
  'death date and given age': 'date',
  'birth year and age': 'one_year',
  'death year and age': 'one_year',

  //this is insane (hyphen ones are different)
  'start-date': 'natural_date',
  'end-date': 'natural_date',
  'birth-date': 'natural_date',
  'death-date': 'natural_date',
  'birth-date and age': 'natural_date',
  'birth-date and given age': 'natural_date',
  'death-date and age': 'natural_date',
  'death-date and given age': 'natural_date',

  'birthdeathage': 'two_dates',
  'dob': 'date',
  'bda': 'date',
  // 'birth date and age2': 'date',

  'age': 'age',
  'age nts': 'age',
  'age in years': 'diff-y',
  'age in years and months': 'diff-ym',
  'age in years, months and days': 'diff-ymd',
  'age in years and days': 'diff-yd',
  'age in days': 'diff-d'
  // 'age in years, months, weeks and days': true,
  // 'age as of date': true,


};
module.exports = keep;

},{}],69:[function(_dereq_,module,exports){
'use strict';

var helpers = _dereq_('../../lib/helpers');
var parseLine = _dereq_('./sentence/').parseLine;

var table_reg = /\{\|[\s\S]+?\|\}/g; //the largest-cities table is ~70kchars.

var parseHeading = function parseHeading(str) {
  str = parseLine(str).text || '';
  if (str.match(/\|/)) {
    str = str.replace(/.+\| ?/, ''); //class="unsortable"|title
  }
  return str;
};

//turn a {|...table string into an array of arrays
var parse_table = function parse_table(wiki) {
  var headings = [];
  var lines = wiki.replace(/\r/g, '').split(/\n/);

  //find headings first
  for (var i = 0; i < lines.length; i++) {
    var str = lines[i];
    //header
    if (str.match(/^\!/)) {
      str = str.replace(/^\! +/, '');
      //handle inline '!!' format
      if (str.match(/ \!\! /)) {
        var heads = str.split(/ \!\! /);
        headings = heads.map(parseHeading);
      } else {
        //handle heading-per-line
        str = parseHeading(str);
        if (!str) {
          str = 'col-' + headings.length;
        }
        headings.push(str);
        lines[i] = null; //remove it
      }
    } else if (headings.length > 0 && str.match(/^|-/)) {
      lines = lines.slice(i, lines.length);
      break; //done here
    } else if (str.match(/^\| /)) {
      lines = lines.slice(i, lines.length);
      break; //done here
    }
  }
  lines = lines.filter(function (l) {
    return l;
  });

  // console.log(lines);
  var table = [[]];
  lines.forEach(function (str) {
    //end of table, end here
    if (str.match(/^\|\}/)) {
      return;
    }
    //this is some kind of comment/summary
    if (str.match(/^\|\+/)) {
      return;
    }
    //make new row
    if (str.match(/^\|-/)) {
      if (table[0].length > 0) {
        table.push([]);
      }
      return;
    }
    // handle weird '! ' row-header syntax
    if (str.match(/^\!/)) {
      str = str.replace(/^\! +/, '');
      str = parseHeading(str);
      str = helpers.trim_whitespace(str);
      table[table.length - 1].push(str);
      return;
    }
    //juicy line
    if (str.match(/^\|/)) {
      var want = (str.match(/\|(.*)/) || [])[1] || '';
      //handle weird 'rowspan="2" |' syntax
      if (want.match(/. \| /)) {
        //this needs additional cleanup
        want = parseHeading(want);
      }
      want = helpers.trim_whitespace(want) || '';
      //handle the || shorthand..
      if (want.match(/[!\|]{2}/)) {
        want.split(/[!\|]{2}/g).forEach(function (s) {
          s = helpers.trim_whitespace(s);
          table[table.length - 1].push(s);
        });
      } else {
        table[table.length - 1].push(want);
      }
    }
  });
  //remove top one, if it's empty
  if (table[0] && Object.keys(table[0]).length === 0) {
    table.shift();
  }
  //index them by their header
  table = table.map(function (arr) {
    var obj = {};
    arr.forEach(function (a, i) {
      var head = headings[i] || 'col-' + i;
      obj[head] = parseLine(a);
    });
    return obj;
  });
  return table;
};

var findTables = function findTables(r, wiki) {
  var tables = wiki.match(table_reg, '') || [];
  tables = tables.map(function (str) {
    return parse_table(str);
  });
  tables = tables.filter(function (t) {
    return t && t.length > 0;
  });
  if (tables.length > 0) {
    r.tables = tables;
  }
  //remove tables
  wiki = wiki.replace(table_reg, '');
  return wiki;
};
module.exports = findTables;

},{"../../lib/helpers":17,"./sentence/":61}]},{},[14])(14)
});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
